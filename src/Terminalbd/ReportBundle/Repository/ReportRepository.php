<?php
namespace Terminalbd\ReportBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Vendor;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Terminalbd\PosBundle\Entity\Pos;
use Terminalbd\PosBundle\Entity\PosItem;

/**
 * VendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends EntityRepository
{

    /* ================ This part for Inventory Reports ============================*/

    protected function invHandleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {
            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate = isset($data['endDate'])  ? $data['endDate'] : '';
            $invoice =    isset($data['invoice'])? $data['invoice'] :'';
            $process =    isset($data['process'])? $data['process'] :'';
            $transactionMethod =    isset($data['method'])? $data['method'] :'';
            $courierInvoice =    isset($data['courierInvoice'])? $data['courierInvoice'] :'';
            $salesBy =    isset($data['toUser'])? $data['toUser'] :'';
            $customer =    isset($data['customer'])? $data['customer'] :'';
            $paymentStatus =    isset($data['paymentStatus'])? $data['paymentStatus'] :'';
            $mode =    isset($data['mode'])? $data['mode'] :'';
            $branch =    isset($data['branch'])? $data['branch'] :'';
            $item =    isset($data['item'])? $data['item'] :'';
            $barcode =    isset($data['barcode'])? $data['barcode'] :'';
            $serialNo =    isset($data['serialNo'])? $data['serialNo'] :'';
            $vendor =    isset($data['vendor'])? $data['vendor'] :'';

            if (!empty($startDate)) {
                $datetime = new \DateTime($startDate);
                $start = $datetime->format('Y-m-d 00:00:00');
                $qb->andWhere("s.created >= :startDate")->setParameter('startDate',$start);
            }

            if (!empty($endDate)) {
                $datetime = new \DateTime($endDate);
                $end = $datetime->format('Y-m-d 23:59:59');
                $qb->andWhere("s.created <= :endDate")->setParameter('endDate',$end);
            }

            if (!empty($invoice)) {

                $qb->andWhere("s.invoice LIKE :invoice");
                $qb->setParameter('invoice', $invoice.'%');
            }

            if (!empty($courierInvoice)) {

                $qb->andWhere("s.courierInvoice LIKE :courierInvoice");
                $qb->setParameter('invoice','%'. $courierInvoice.'%');
            }

            if (!empty($process)) {

                $qb->andWhere("s.process = :process");
                $qb->setParameter('process', $process);

            }

            if (!empty($customer)) {

                $qb->andWhere("c.mobile = :mobile");
                $qb->setParameter('mobile', $customer);
            }

            if (!empty($salesBy)) {

                $qb->andWhere("u.username = :user");
                $qb->setParameter('user', $salesBy);
            }
            if (!empty($transactionMethod)) {

                $qb->andWhere("s.transactionMethod = :transactionMethod");
                $qb->setParameter('transactionMethod', $transactionMethod);
            }

            if (!empty($paymentStatus)) {

                $qb->andWhere("s.paymentStatus = :paymentStatus");
                $qb->setParameter('paymentStatus', $paymentStatus);
            }

            if(!empty($mode)){
                $qb->andWhere("s.salesMode = :mode");
                $qb->setParameter('mode', $mode);
            }
            if(!empty($branch)){
                $qb->andWhere("s.branches = :branch");
                $qb->setParameter('branch', $branch);
            }

            if (!empty($item)) {
                $qb->join('si.item','item');
                $qb->andWhere("item.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($vendor)) {
                $qb->andWhere("vendor.companyName = :vendorName");
                $qb->setParameter('vendorName', $vendor);
            }

            if (!empty($barcode)) {
                $qb->leftJoin('si.purchaseItem','purchaseItem');
                $qb->andWhere("purchaseItem.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($serialNo)) {
                $qb->andWhere("si.serialNo LIKE :serialNo");
                $qb->setParameter('serialNo','%'. $serialNo.'%');
            }

        }

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {

            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {
                $qb->join('stock.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->join('item.masterItem', 'm');
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }

            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }

            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('item.masterItem', 'mc');
                $qb->join('mc.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }
        }

    }


    public function invReportPurchaseOverview($inventory,$data)
    {

        $receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';
        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Purchase','purchase');
        $qb->select('SUM(purchase.totalQnt) AS quantity ');
        $qb->addSelect('SUM(purchase.totalAmount) AS total ');
        $qb->addSelect('SUM(purchase.paymentAmount) AS payment');
        $qb->addSelect('SUM(purchase.dueAmount) AS due');
        $qb->addSelect('SUM(purchase.vatAmount) AS vat');
        $qb->addSelect('SUM(purchase.commissionAmount) AS discount');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("purchase.process = 'approved'");
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');

        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }
        $data = $qb->getQuery()->getOneOrNullResult();
        return $data;

    }

    public function invReportTransactionOverview($inventory , $data)
    {

        $receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';
        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Purchase','s');
        $qb->join('s.transactionMethod','t');
        $qb->select('t.name as transactionName , sum(s.totalAmount) as total ,sum(s.paymentAmount) as payment , sum(s.dueAmount) as due, sum(s.commissionAmount) as discount, sum(s.vatAmount) as vat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'approved');
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');

        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }
        $qb->groupBy("s.transactionMethod");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function invReportAccountPurchaseOverview(User $user ,$data = array())
    {
        $global =  $user->getGlobalOption()->getId();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:AccountPurchase','e');
        $qb->select('sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
        $qb->where('e.globalOption = :config');
        $qb->setParameter('config', $global);
        $qb->andWhere('e.process = :process');
        $qb->setParameter('process', 'approved');
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function invReportStockPriceOverview($inventory,$data ="")
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from("InventoryBundle:Item",'e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.remainingQnt * e.purchaseAvgPrice) AS purchasePrice');
        $qb->addSelect('SUM(e.remainingQnt * e.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function invReportSalesPurchasePrice($inventory,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Sales','sales');
        $qb->select("SUM(sales.total) as totalSales");
        $qb->where("sales.inventoryConfig = :inventoryConfig");
        $qb->setParameter('inventoryConfig', $inventory);
        $qb->andWhere('sales.process IN(:process)')->setParameter('process',array_values(array('Done','Delivered')));
        $sales = $qb->getQuery()->getSingleScalarResult();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','si');
        $qb->join('si.sales','sales');
        $qb->select('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where("sales.inventoryConfig = :inventoryConfig");
        $qb->setParameter('inventoryConfig', $inventory);
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done','Delivered')));
        $purchase = $qb->getQuery()->getSingleScalarResult();
        $data = array('sales'=> $sales,'purchase' => $purchase);
        return $data;
    }

    public  function getStockOverview($inventory,$data=''){

        $em = $this->_em;
        $purchase = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'sales',$data);
        $salesReturn = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'salesReturn',$data);
        $damage = $em->getRepository('InventoryBundle:Item')->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>        $purchase,
            'purchaseReturn'=>  $purchaseReturn,
            'purchaseReplace'=> $purchaseReplace,
            'sales'=>           $sales,
            'salesReturn'=>     $salesReturn,
            'damage'=>          $damage,
            'remaining'=>       $remaining
        );
        return $data;

    }

    public function invReportStockItemPrice($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.masterItem', 'm');
        $qb->join('m.productUnit', 'u');
        $qb->addSelect('item.name as name','item.purchaseQuantity','item.purchaseQuantityReturn','item.salesQuantity','item.salesQuantityReturn','item.damageQuantity','item.remainingQnt','item.salesPrice as salesPrice','item.purchaseAvgPrice');
        $qb->addSelect('u.name as unit');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
       // $this->handleSearchBetween($qb,$data);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function invReportCategoryStockItemPrice($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.masterItem', 'm');
        $qb->join('m.category', 'c');
        $qb->addSelect('c.id as cid','c.name as name','SUM(item.remainingQnt) as quantity','SUM(item.purchaseAvgPrice*item.remainingQnt) as amount');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->groupBy('c.id');
        $qb->orderBy('c.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function invReportBrandStockItemPrice($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item', 'item');
        $qb->join('item.brand', 'c');
        $qb->addSelect('c.id as cid','c.name as name','SUM(item.remainingQnt) as quantity','SUM(item.purchaseAvgPrice*item.remainingQnt) as amount');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('item.remainingQnt > 0');
        $qb->groupBy('c.id');
        $qb->orderBy('c.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function todaySales(User $user , $mode = '')
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:Sales','s');
        $qb->select('s')
            ->where('s.inventoryConfig = :inventory')
            ->andWhere('s.salesMode =:mode')
            ->andWhere('s.created >= :today_startdatetime')
            ->andWhere('s.created <= :today_enddatetime');
        $qb->setParameter('inventory', $inventory)
            ->setParameter('mode', $mode)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        if ($branch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $qb->orderBy("s.invoice", 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function invReportSales( $inventory , $data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Sales', 's');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->leftJoin('s.transactionMethod', 't');
        $qb->innerJoin('s.salesItems', 'si');
        $qb->select('u.username as salesBy');
        $qb->addSelect('t.name as transactionMethod');
        $qb->addSelect('s.id as id');
        $qb->addSelect('s.created as created');
        $qb->addSelect('s.process as process');
        $qb->addSelect('s.invoice as invoice');
        $qb->addSelect('(s.due) as due');
        $qb->addSelect('(s.subTotal) as subTotal');
        $qb->addSelect('(s.total) as total');
        $qb->addSelect('(s.payment) as payment');
        $qb->addSelect('(s.totalItem) totalItem');
        $qb->addSelect('(s.discount) as discount');
        $qb->addSelect('(s.vat) as vat');
        $qb->addSelect('SUM(si.purchasePrice * si.quantity) as purchasePrice');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->invHandleSearchBetween($qb,$data);
        $qb->groupBy('s.id');
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }


    public  function invReportSalesItem($inventory, $data=''){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','si');
        $qb->join('si.sales','s');
        $qb->join('s.salesBy','u');
        $qb->leftJoin('s.customer','customer');
        $qb->join('si.item','item');
        $qb->select('s.created AS salesCreated');
        $qb->addSelect('u.username AS salesBy');
        $qb->addSelect('customer.name AS customerName');
        $qb->addSelect('s.invoice AS salesInvoice');
        $qb->addSelect('si.assuranceType AS assuranceType');
        $qb->addSelect('si.assuranceToCustomer AS assuranceToCustomer');
        $qb->addSelect('si.serialNo AS serialNo');
        $qb->addSelect('si.quantity AS quantity');
        $qb->addSelect('si.salesPrice AS salesPrice','si.purchasePrice AS purchasePrice');
        $qb->addSelect('item.name AS name');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->invHandleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }







}
