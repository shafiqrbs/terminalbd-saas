<?php

namespace Product\Bundle\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CollectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionRepository extends EntityRepository
{

    function urlSlug($str, $options = array()) {

        // Make sure string is in UTF-8 and strip invalid UTF-8 characters
        $str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());

        $defaults = array(
            'delimiter' => '-',
            'limit' => null,
            'lowercase' => true,
            'replacements' => array(),
            'transliterate' => false,
        );

        // Merge options
        $options = array_merge($defaults, $options);


        // Make custom replacements
        $str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str);


        // Replace non-alphanumeric characters with our delimiter
        $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);

        // Remove duplicate delimiters
        $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);

        // Truncate slug to max. characters
        $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');

        // Remove delimiter from ends
        $str = trim($str, $options['delimiter']);

        $slug = $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;

        $em = $this->_em;
        $entity = $em->getRepository('ProductProductBundle:Collection')->findOneBy(array('slug'=>$slug));
        if (empty($entity)){
            return $slug;
        }else{
            return $this->checkExistingProductSlug($slug);
        }



    }

    public function checkExistingProductSlug($productSlug)
    {

        $em = $this->_em;

        $productSlugNew = '';
        for ($i = 1; $i < 100; $i++){

            $new = $productSlug.'-'.$i;
            $existsSlug = $em->getRepository('ProductProductBundle:Collection')->findOneBy(array('slug'=>$new));

            if (empty($existsSlug) ){
                $productSlugNew = $productSlug.'-'.$i;
                break;
            }
        }

        if ($productSlugNew == ''){
            return $productSlug.'-'.md5(time());
        }else{
            return $productSlugNew;
        }
    }

    public function getCollectionOptionGroup()
    {
        $results = $this->createQueryBuilder('b')
            ->orderBy('b.name', 'ASC')
            ->where("b.status = 1")
            ->getQuery()
            ->getResult()
        ;

        $collections = $this->getIndexedById($results);

        $grouped = array();

        foreach ($collections as $collection) {
            /**
             * @var Collection $collection
             */
            if(null != $collection->getParent()) {
                $grouped[$collections[$collection->getParent()->getId()]->getName()][$collection->getId()] = $collection;
            }
        }

        return $grouped;
    }

    /**
     * @param Collection[] $results
     * @return Collection[]
     */
    protected function getIndexedById($results)
    {
        $collections = array();

        foreach ($results as $collection) {
            $collections[$collection->getId()] = $collection;
        }

        return $collections;
    }


    public function getCollections()
    {
        $em =$this->_em;
        $existsSlug = $em->getRepository('ProductProductBundle:Collection')->findOneBy(array('slug'=>$new));
    }

}
