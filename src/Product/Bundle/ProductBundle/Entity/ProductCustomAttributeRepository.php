<?php

namespace Product\Bundle\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CustomAttributeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCustomAttributeRepository extends EntityRepository
{

    public function insertProductAttribute($reEntity,$data)
    {

        $em = $this->_em;

        $attributeName      = $data['attributeName'];
        $attributeContent   = $data['attributeContent'];

        $i=0;
        foreach($attributeName as $val ){
            if($data['attributeId'][$i] > 0 ){
                $id = $data['attributeId'][$i];
                $entity = $em->getRepository('ProductProductBundle:ProductCustomAttribute')->find($id);
            }else{
                $entity = New ProductCustomAttribute();
            }
                $entity->setProduct($reEntity);
                $entity->setName($val);
                $entity->setContent($attributeContent[$i]);

                $em->persist($entity);
                $i++;
        }
        $em->flush();
        if(!empty($data['removeAttributeId'])){
            $this->removeAttribute($data['removeAttributeId']);
        }

    }

    public function removeAttribute($posts)
    {
        $em = $this->_em;

            foreach ($posts as $post ){
                $entity = $em->getRepository('ProductProductBundle:ProductCustomAttribute')->find($post);
                $em->remove($entity);
            }
            $em->flush();


    }

    public function insertDuplicateProductAttribute($reEntity,$oldEntity)
    {
        $em = $this->_em;
        $productCustomAttributes = $oldEntity->getProductCustomAttributes();


        foreach($productCustomAttributes as $row ){

            $entity = New ProductCustomAttribute();

            $entity->setProduct($reEntity);
            $entity->setName($row->getName());
            $entity->setContent($row->getContent());
            $em->persist($entity);

        }
        $em->flush();

    }


}
