<?php

namespace Product\Bundle\ProductBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function getItemUnit()
    {
        return $unit = array(
            'Bag' => 'Bag',
            'Bottle' => 'Bottle',
            'Box' => 'Box',
            'Can' => 'Can',
            'Cft' => 'Cft',
            'Coil' => 'Coil',
            'Cylinder' => 'Cylinder',
            'Carton' => 'Carton',
            'Feet' => 'Feet',
            'Gallon' => 'Gallon',
            'Jar' => 'Jar',
            'Job' => 'Job',
            'Kg' => 'Kg',
            'Liter' => 'Liter',
            'Meter' => 'Meter',
            'ML' => 'ML',
            'MM' => 'MM',
            'Nos' => 'Nos',
            'Pail' => 'Pail',
            'Pair' => 'Pair',
            'Pcs' => 'Pcs',
            'Packet' => 'Packet',
            'Pound' => 'Pound',
            'Prs' => 'Prs',
            'Refile' => 'Refile',
            'Rft' => 'Rft',
            'Rim' => 'Rim',
            'Roll' => 'Roll',
            'Set' => 'Set',
            'Sft' => 'Sft',
            'Yard' => 'Yard',
        );
    }

    public function getProducts($user,$search = null)
    {

        /** @var EntityManager $em */

        $qb = $this->createQueryBuilder('p');

            $qb->where($qb->expr()->eq("p.user",":user"));
            $qb->setParameter('user', $user );

        if(!empty($search['searchCategory'])){
            $qb->andWhere($qb->expr()->eq("p.parentCategory",":cat"));
            $qb->setParameter('cat', $search['searchCategory'] );
        }
        if(!empty($search['searchCollection'])){
            $qb->andWhere($qb->expr()->eq("p.collection",":collection"));
            $qb->setParameter('collection', $search['searchCollection'] );
        }
        if(!empty($search['searchAvailability'])){
            $qb->andWhere($qb->expr()->eq("p.availability",":availability"));
            $qb->setParameter('availability', $search['searchAvailability'] );
        }

        if(!empty($search['keyword'])){
            $qb->andWhere($qb->expr()->like("p.name",":name"));
            $qb->setParameter('name', $search['keyword'] );
        }

        $qb->orderBy('p.created', 'DESC');
        $query = $qb->getQuery();
        return $query;

    }

    public function insertProduct($data,$user)
    {
        $em = $this->_em;
        $user = $em->getRepository('UserBundle:User')->find($user);
        if($user){


            $i=0;
            foreach ($data as $key => $value) {

                $entity = new Product();

                if(strpos($key,'tmpname')){

                    $imageName = nl2br(htmlentities(stripslashes($value)));
                    $entity->setPath($imageName);
                    $entity->setUser($user);
                    $entity->setStatus(2);
                    $em->persist($entity);

                }

                $i++;

            }
            $em->flush();

        }
    }

    public function multiInsert($data)
    {

        $em = $this->_em;
        $i=0;

        if(!empty($data['removeId'])){
            $this->removeProduct($data['removeId']);
        }

        foreach ($data['productId'] as $key ){


            $name           = ($data['name'][$i]) ? $data['name'][$i] : null ;
            $vendorPrice    = ($data['vendorPrice'][$i]) ? $data['vendorPrice'][$i] : null ;
            $price          = ($data['price'][$i]) ? $data['price'][$i] : null ;
            $salesPrice     = ($data['salesPrice'][$i]) ? $data['salesPrice'][$i] : null ;
            $quantity       = ($data['quantity'][$i]) ? $data['quantity'][$i] : null ;
            $content        = ($data['content'][$i]) ? $data['content'][$i] : null ;
            $shipping       = ($data['shipping'][$i]) ? $data['shipping'][$i] : null ;
            $madeIn         = ($data['madeIn'][$i]) ? $data['madeIn'][$i] : null ;
            $category       = ($data['category'][$i]) ? $data['category'][$i] : null ;
            $availability       = ($data['availability'][$i]) ? $data['availability'][$i] : null ;
            $unit       = ($data['unit'][$i]) ? $data['unit'][$i] : null ;


            $entity = $em->getRepository('ProductProductBundle:Product')->findOneBy(array('id'=>$key));
            $cat = array();

            if(!empty($category)){

                $cat[] = $em->getRepository('ProductProductBundle:Category')->findOneBy(array('id'=>$category));
                $parentCat = $em->getRepository('ProductProductBundle:Category')->find($category);
                $entity->setParentCategory($parentCat);
                $entity->setCategories($cat);
            }

            if (!empty($entity)) {

                $productCode    = 'P0'.$entity->getUser()->getId().'0'.$key;
                $entity->setProductCode($productCode);
                $entity->setName($name);
                $entity->setSlug($this->urlSlug($name));
                $entity->setVendorPrice($vendorPrice);
                $entity->setPrice($price);
                $entity->setSalesPrice($salesPrice);
                $entity->setQuantity($quantity);
                $entity->setContent($content);
                $entity->setShipping($shipping);
                $entity->setMadeIn($madeIn);
                $entity->setStatus(1);
                $entity->setAvailability($availability);
                $entity->setUnit($unit);


                $em->persist($entity);
            }

            $i++;

        }
        $em->flush();


    }

    public function  updateProductCategories($entity,$data)
    {
        $em = $this->_em;
        $cat = array();
        $categories     = $data['categories'];
        $checkEntity    = $entity->getCategories();

        $insData = $data['categories'];
        $dbData=array();

       // exit;

        foreach( $entity->getCategories() as $cat ){

                $dbData[] = $cat->getId();
        }

        $removeData = array_diff($dbData,$insData);
        if(!empty($removeData)){
            //$this->removeExistingMenu('syndicate',$removeData,$reEntity);
        }

        $insertData = array_diff($insData,$dbData);

        foreach($insertData as $id ){
            $cat[] = $em->getRepository('ProductProductBundle:Category')->findOneBy(array('id'=>$id));
        }

        if (!empty($cat)) {
                $entity->setCategories($cat);
                $em->persist($entity);
        }
        $em->flush();
    }


    public function removeProduct($data)
    {
        $em = $this->_em;
        if(!empty($data)){

            foreach ($data as $key ){

                $entity = $em->getRepository('ProductProductBundle:Product')->find($key);
                if(!empty($entity)){
                    $em->remove($entity);
                }
            }
            $em->flush();
        }


    }

    public function getLatestProduct(){

        $em = $this->_em;
        $entity = $em->getRepository('ProductProductBundle:Product')->findBy(array('status'=>1,'isFeature'=>1),array('created'=>'desc'));
        if(!empty($entity)){

          return $entity;

        }

    }

    public function getRelatedProduct($cat){

        $em = $this->_em;
        $entity = $em->getRepository('ProductProductBundle:Product')->findBy(array('status'=>1,'isFeature'=>1),array('created'=>'desc'));
        if(!empty($entity)){

            return $entity;

        }

    }


    public function getCategoryProducts($slug){

        $em = $this->_em;

        /** @var EntityManager $em */



        $qb = $this->createQueryBuilder('p');
        $qb->select("p");
        $qb->join("p.categories","c");
        $qb->andWhere($qb->expr()->eq("c.slug",":slug"));
        $qb->setParameter('slug', "$slug");
        $qb->orderBy('p.created', 'DESC');
        $query = $qb->getQuery();
        return $query;


    }




    function urlSlug($str, $options = array()) {

        // Make sure string is in UTF-8 and strip invalid UTF-8 characters
        $str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());

        $defaults = array(
            'delimiter' => '-',
            'limit' => null,
            'lowercase' => true,
            'replacements' => array(),
            'transliterate' => false,
        );

        // Merge options
        $options = array_merge($defaults, $options);


        // Make custom replacements
        $str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str);


        // Replace non-alphanumeric characters with our delimiter
        $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);

        // Remove duplicate delimiters
        $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);

        // Truncate slug to max. characters
        $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');

        // Remove delimiter from ends
        $str = trim($str, $options['delimiter']);

        $slug = $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;

        $em = $this->_em;
        $entity = $em->getRepository('ProductProductBundle:Product')->findOneBy(array('slug'=>$slug));
        if (empty($entity)){
            return $slug;
        }else{
            return $this->checkExistingProductSlug($slug);
        }



    }

    public function checkExistingProductSlug($productSlug)
    {

        $em = $this->_em;

        $productSlugNew = '';
        for ($i = 1; $i < 100; $i++){

            $new = $productSlug.'-'.$i;
            $existsSlug = $em->getRepository('ProductProductBundle:Product')->findOneBy(array('slug'=>$new));

            if (empty($existsSlug) ){
                $productSlugNew = $productSlug.'-'.$i;
                break;
            }
        }

        if ($productSlugNew == ''){
            return $productSlug.'-'.md5(time());
        }else{
            return $productSlugNew;
        }


    }

    public function insertProductCollection($data)
    {
        $em =$this->_em;
        $products = $data['productId'];

        $i=0;
        foreach( $products as $product ){

            $entity  = $em->getRepository('ProductProductBundle:Product')->find($product);
            $collection = $data['collection'][$i];

            if($collection > 0){

                $collection     = $em->getRepository('ProductProductBundle:Collection')->find($collection);
                $discount = $collection->getDiscountPercentage();
                if($discount > 0 ){
                    $entity->setSalesPrice($this->discountPercentage($discount,$data['price'][$i]));
                }
                $entity->setCollection($collection);

            }

            if(!empty($data['categories'][$i])){
                $category     = $em->getRepository('ProductProductBundle:Category')->find($data['categories'][$i]);
                $entity->setParentCategory($category);
            }

            if(!empty($data['brand'][$i])){
                $brand     = $em->getRepository('SettingToolBundle:Branding')->find($data['brand'][$i]);
                $entity->setBrand($brand);
            }

            if(isset($data['isFeature'][$i])){
                $entity->setIsFeature($data['isFeature'][$i]);
            }
            if(isset($data['vendorPrice'][$i]) && $data['vendorPrice'][$i] > 0){
                $entity->setVendorPrice($data['vendorPrice'][$i]);
            }
            if(isset($data['price'][$i]) && $data['price'][$i] > 0){
            $entity->setPrice($data['price'][$i]);
            }
            if(isset($data['shipping'][$i]) && $data['shipping'][$i] > 0){
                $entity->setShipping($data['shipping'][$i]);
            }
            if(isset($data['quantity'][$i]) && $data['quantity'][$i] > 0){
                $entity->setQuantity($data['quantity'][$i]);
            }
            $entity->setAvailability($data['availability'][$i]);
            if(isset($data['dealType'][$i]) && $data['dealType'][$i] != ""){
                $entity->setDealType($data['dealType'][$i]);
            }
            $entity->setUpdated(new \DateTime($data['updated'][$i]));
            $em->persist($entity);

            $i++;
        }
        $em->flush();
    }

    public function updateCollection($entity,$data)
    {
        $em = $this->_em;

        $collection = $data['collection'];
        if(!empty($collection)){

            $collection     = $em->getRepository('ProductProductBundle:Collection')->find($collection);
            $discount = $collection->getDiscountPercentage();
            $price = $entity->getPrice();
            if($discount > 0 ){
                $entity->setSalesPrice($this->discountPercentage($discount,$price));
            }
            $entity->setCollection($collection);
            $em->persist($entity);
            $em->flush();
        }
    }

    public function discountPercentage($discount,$price)
    {

        $discountPrice = (($price * $discount)/100);
        return $salesPrice =  ($price - $discountPrice);

    }

    public function insertDuplicate($entity)
    {
        $em = $this->_em;

        /** @var EntityManager $em */


        $name = $entity->getName();
        $price = $entity->getPrice();
        $salesPrice = $entity->getSalesprice();
        $vendorPrice = $entity->getVendorPrice();
        $productCode = $entity->getProductCode();
        $description = $entity->getContent();
        $size = $entity->getSize();
        $color = $entity->getColor();
        $quantity = $entity->getQuantity();
        $weight = $entity->getWeight();
        $status = $entity->getStatus();
        $madeIn = $entity->getMadeIn();
        $path = $entity->getPath();
        $isFeature = $entity->getIsFeature();
        $user = $entity->getUser();
        $collection = $entity->getCollection();
        $categories = $entity->getCategories();
        $shipping = $entity->getShipping();

        $newEntity = new Product();

        $newEntity->setName($name);
        $newEntity->setSlug($this->urlSlug($name));
        $newEntity->setPrice($price);
        $newEntity->setSalesprice($salesPrice);
        $newEntity->setVendorPrice($vendorPrice);
        $newEntity->setShipping($shipping);
        $newEntity->setContent($description);
        $newEntity->setSize($size);
        $newEntity->setColor($color);
        $newEntity->setQuantity($quantity);
        $newEntity->setWeight($weight);
        $newEntity->setStatus($status);
        $newEntity->setMadeIn($madeIn);
        $newEntity->setPath($path);
        $newEntity->setIsFeature($isFeature);
        $newEntity->setUser($user);
        $newEntity->setCollection($collection);
        $newEntity->setCategories($categories);
        $em->persist($newEntity);
        $em->flush();
        return $newEntity;

    }

    public function updateDuplicateProduct($entity)
    {
        $em = $this->_em;
        $productCode    = 'P0'.$entity->getUser()->getVendor()->getThana()->getId().'0'.$entity->getUser()->getId().'0'.$entity->getId();
        $entity->setProductCode($productCode);
        $em->persist($entity);
        $em->flush();

    }

}
