<?php

namespace Product\Bundle\ProductBundle\Entity;

use Appstore\Bundle\EcommerceBundle\Entity\EcommerceConfig;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Gedmo\Tree\Entity\Repository\MaterializedPathRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends MaterializedPathRepository
{


    public function findWithEcommerceSearch($config , $data){

        $sort = isset($data['sort'])? $data['sort'] :'e.name';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';

        $name = isset($data['name'])? $data['name'] :'';
        $nameBn = isset($data['nameBn'])? $data['nameBn'] :'';
        $parent = isset($data['parent'])? $data['parent'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.parent','p');
        $qb->where('e.ecommerceConfig = :config')->setParameter('config', $config) ;
        if (!empty($name)) {
            $qb->andWhere($qb->expr()->like("e.name", "'%$name%'"  ));
        }
         if (!empty($nameBn)) {
            $qb->andWhere($qb->expr()->like("e.nameBn", "'%$nameBn%'"  ));
        }
        if(!empty($parent)){
            $qb->andWhere("p.name LIKE :parent");
            $qb->setParameter('parent', '%'.$parent.'%');
        }
        $qb->orderBy("{$sort}",$direction);
        $qb->getQuery();
        return  $qb;
    }

    public function findWithSearch($data){

       $name = isset($data['name'])? $data['name'] :'';
       $parent = isset($data['parent'])? $data['parent'] :'';
       $qb = $this->createQueryBuilder('category');
       $qb->where('category.level != :null')->setParameter('null', 'N;') ;
       if (!empty($name)) {
           $qb->andWhere($qb->expr()->like("category.name", "'%$name%'"  ));
       }
       if(!empty($parent)){
           $qb->andWhere("category.parent = :parent");
           $qb->setParameter('parent', $parent);
       }
       $qb->orderBy('category.name','ASC');
       $qb->getQuery();
       return  $qb;
   }

    public function getCategories($data,$array)
    {


        $em = $this->_em;

        $tree = "";					// Clear the directory tree
        $this->depth = 1;			// Child level depth.
        $top_level_on = 1;			// What top-level category are we on?
        $exclude = array();			// Define the exclusion array
        array_push($exclude, 0);	// Put a starting value in it

        $tree .= '<select class="form-control input-sm select2" name="category[]" id="category" ><option selected="selected" value=0 >---Select one---</option>';

        foreach ($data  as $row ){


            $goOn = 1;
            for($x = 0; $x < count($exclude); $x++ )
            {
                if ( $exclude[$x] == $row->getId() )
                {
                    $goOn = 0;
                    break;
                }
            }
            if ( $goOn == 1 )
            {


                if(in_array($row->getId(), $array)){
                    $tree .= '<option value="'.$row->getId().' >'.$row->getName() . "</option>";
                    array_push($exclude, $row->getId());
                    if ( $row->getId() < 6 )
                    { $top_level_on = $row->getId(); }
                    $tree .=$this->build_child($row->getId(),$array);
                }
            }

        }
        $tree .= '</select>';

        return $tree;
    }



    public function build_child($oldID = null ,$array=array())
    {

        $em = $this->_em;
        $tree = "";					// Clear the directory tree
        $this->depth = 1;			// Child level depth.
        $top_level_on = 1;			// What top-level category are we on?
        $exclude = array();			// Define the exclusion array
        array_push($exclude, 0);	// Put a starting value in it
        $tempTree="";

        $childData = $em->getRepository('ProductProductBundle:Category')->findBy(array('parent' => $oldID ),array('name'=>'asc'));

        foreach ( $childData as $child ){

            if(in_array($child->getId(), $array)){
                $tempTree .= '<option value="'.$child->getId().'" rel="'.$this->depth.'">';
                for ( $c=0;$c<$this->depth;$c++ )
                { $tempTree .= "&nbsp;&nbsp;&nbsp;"; }
                for ( $c=0; $c < $this->depth; $c++ )
                { $tempTree .= ">"; }
                $tempTree .= "" . $child->getName(). "</option>";
            }

            $this->depth++;
            $tempTree .=$this->build_child($child->getId(),$array);
            $this->depth--;
            if(is_array($exclude)){
                array_push($exclude,$child->getId());
            }
        }

        return $tempTree;
    }

    public function printCategoryTree($category,$parent = 0) {

        $em = $this->_em;
	    $trees = array();
        /* @var $row Category */

        foreach ($category as $row )
        {
	        $trees[] = array("id" => $row->getId(), "name" =>$row->getName(),'parent'=>$row->getParent()->getId());
        	if(!empty($row->getChildren())){
		      //  $trees[] = $this->printTree($row->getChildren(),$row->getId());
	        }
        }
        return $trees;

    }

	public function printTree( $category ,$parent = 0, $spacing = '--', $user_tree_array = '' ) {

		$em = $this->_em;
		$user_tree_array = array();
		foreach ($category as $row )
		{
			$user_tree_array[] = array("id" => $row->getId(), "name" => $spacing . $row->getName());
			if(!empty($row->getChildren()) and $row->getId() == $parent ) {
				$user_tree_array[] = $this->printTree( $row->getChildren(), $row->getId(), $spacing . '--', $user_tree_array );
			}
		}
		return $user_tree_array;

	}


	public function buildTreeDropDown(Array $data, $parent = 0){

		$tree = array();
		foreach ($data as $d) {
			if ($d['parent'] == $parent) {
				$children = $this->buildTreeDropDown($data, $d['id']);
				// set a trivial key
				if (!empty($children)) {
					$d['_children'] = $children;
				}
				$tree[] = $d;
			}
		}
		return $tree;
	}

	function printCatTree($tree, $r = 0, $p = null) {

		$trees = '';
		foreach ($tree as $i => $t) {
			$dash = (!empty($t['parent']) and $t['parent'] == 0) ? '' : str_repeat('-', $r) .' ';
			$trees .= sprintf("\t<option value='%d'>%s%s</option>\n", $t['id'], $dash, $t['name']);
			if ($t['parent'] == $p) {
				$r = 0;
			}
			if (isset($t['_children'])) {
				$trees .= $this->printCatTree($t['_children'], ++$r, $t['parent']);
			}
		}
		 return $trees;
	}


	function printCategoryCustomTree($category, $r = 0, $p = null) {

		/* @var $row Category */

	   $tree ='';
	   foreach ($category as $row )
	    {
	    	$dash = ($row->getParent()->getId() == 0) ? '' : str_repeat('-', $r) .' ';
		    $tree .="<option value='{$row->getId()}'>{$dash}{$row->getName()}</option>";
			if ($row->getParent()->getId() == $p) {
				$r = 0;
			}
			if(!empty($row->getChildren())) {
				 $this->printCategoryTree($row->getChildren(), ++$r, $row->getParent()->getId());
			}
		}
		return $tree;
	}


	public function  getReturnCategoryTree($cats, $selected = '')
    {
	    $trees =array();
	    $categoryTree = $this->printTree($cats);
	   // $trees = $this->printCatTree($categoryTree);
	    $tree='';
		$tree .= "<select name='category' id='category' class='search-select search-field form-control'>";
		$tree .= "<option value=''>Filter by Category</option>";
	    foreach($categoryTree as $row) {
		    $selected = ($selected === $row['id'])? 'selected':'';
		    $tree .= "<option ".$selected." value=".$row["id"].">".$row["name"]."</option>";
	    }
		$tree .= "</select>";
		return $tree;
    }

    public function  getReturnCategoryTreeForMobile($category,$array = array())
    {
        $selected =  isset($array['category']) ? $array['category'] : '';
        $categoryTree = $this->printTree($category);
        $tree='';
        $tree .= "<select name='category' id='category' class='input-selector item-select col-xs-12 col-md-12'>";
        $tree .= "<option value=''>Filter by Category</option>";
        foreach($categoryTree as $row) {
            $selected = ($selected === $row['id'])? 'selected':'';
            $tree .= "<option ".$selected." value=".$row["id"].">".$row["name"]."</option>";
        }
        $tree .= "</select>";
        return $tree;
    }



    function getParentId($inventory) {

        $cats = array();
        if(!empty($inventory)){
	        $qb = $this->createQueryBuilder('category');
	        $qb->where('category.status = 1');
	        $qb->andWhere('category.level = 1');
	        $qb->andWhere('category.ecommerceConfig =:config');
	        $qb->setParameter('config',$inventory);
	        $qb->orderBy('category.name','ASC');
	        $result = $qb->getQuery()->getResult();
	        return $result;
        }
	    return false;


    }

    public function productCategorySidebar($category, $array = ''){

       $categories =  isset($array) ? $array : array();

       if(empty($category) || count($category) == 0){
           return '';
       }

       $result = "<ul>";
       foreach ($category as $row)
       {
            $checked = in_array($row->getId() , $categories) ? 'checked':'';

            if (!empty($row->getChildren())) {
                $result.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='categories[]' {$checked} id='category-{$row->getId()}' value='{$row->getId()}'>
                <label for='category-{$row->getId()}'></label>
                </div><a class='' href='/product/category/{$row->getSlug()}'>{$row->getName()}</a>";
                $result.= $this->productCategorySidebar($row->getChildren(),$categories);
                $result.= "</li>";
            }else {
                $result.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='categories[]' {$checked} id='category-{$row->getId()}' value='{$row->getId()}'>
                <label for='category-{$row->getId()}'></label>
                </div><a class='' href='/product/category/{$row->getSlug()}'>{$row->getName()}</a></li>";
            }
        }
        $result.= "</ul>";
        return $result;

    }

    public function footerProductCategory($category){

        if(empty($category) || count($category) == 0){
            return '';
        }
        $result = "";
        foreach ($category as $row)
        {
            if (!empty($row->getChildren())) {
                $result.= "<a class='footer-category' href='/product/category/{$row->getSlug()}'>{$row->getName()}</a>";
                $result.= $this->footerProductCategory($row->getChildren());
            }else {
                $result.= "<a class='' href='/product/category/{$row->getSlug()}'>{$row->getName()}</a>";
            }
        }
        return $result;

    }


    public function getSelectdDropdownCategories($data,$array,$slected=''){

        $tree = "";					// Clear the directory tree
        $tree .= '<select class="span12 select2" name="category" id="category" >';
        $tree .= '<option value="" >---Select one---</option>';

        foreach ($data  as $row ){

             if(in_array($row->getId(), $array)){
                 $selected = ($slected === $row->getId() )? 'selected="selected"':'';
                 $tree .= '<option  value='.$row->getId().' '.$selected.' >'.$row->getName() . '</option>';
             }
        }
        return $tree .= '</select>';
    }

    public function getGroupCategories($categories , $array = array() ){


        $value ='';
        $value .='<ul>';
        foreach ($categories as $val) {
            $checkd = in_array($val->getId(), $array)? 'checked':'';
            $name = $val->getName();
            if (!empty($name)) {
                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;

                if($subIcon == 1){

                    $value .= '<li class="dd-item dd3-item" ><div class="dd4-content"><input type="checkbox" '.$checkd.' name="categories[]" value="'.$val->getId().'" >' . $val->getName().'</div>';
                    //$value .= $this->getGroupCategories($val->getChildren(),$array);
                }else{
                    $value .= '<li class="dd-item dd3-item" ><div class="dd4-content"><input type="checkbox" '.$checkd.' name="categories[]" value="'.$val->getId().'" >' . $val->getName().'</div>';
                }

                $value .= '</li>';
            } else {
                $value .= '<li class="dd-item dd3-item" ><div class="dd4-content"><input type="checkbox" '.$checkd.' name="categories[]" value="'.$val->getId().'" >'.$val->getName(). '</div></li>';
            }
        }
        $value .='</ul>';

        return $value;

    }

    public function getSelectedCategories($categories,$entity){


        $array =array();
        $value ='';
        $value .='<ul>';
        foreach ($categories as $val) {

            $checked = "";
            // $checked = in_array($val->getId(), $array)? 'checked':'';

            $name = $val->getName();
            if (!empty($name)) {
                if(in_array($val->getId(), $array)){

                    $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;

                    if($subIcon == 1){
                        $value .= '<li class="dd-item1" ><input type="checkbox"  '.$checked.' name="categories[]" value="'.$val->getId().'" >' . $val->getName();
                        $value .= $this->getSelectedCategories($val->getChildren(),$entity);
                    }else{
                        $value .= '<li class="dd-item1" ><input type="checkbox"  '.$checked.' name="categories[]" value="'.$val->getId().'" >' . $val->getName();
                    }
                    $value .= '</li>';
                }
            }

        }
        $value .='</ul>';
        //\Doctrine\Common\Util\Debug::dump($value);
        //exit;


        return $value;

    }

    public function getProductCategory($categories,$addCalss ='treeview'){

        $value ='';
        $addCalss = ($addCalss == '') ? 'list-group margin-bottom-25 sidebar-menu' : 'dropdown-menu';
        $value .='<ul class="'.$addCalss.'" >';
        foreach ($categories as $val) {

            $name = $val->getName();
            if (!empty($name)) {

                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
                if($subIcon == 1){
                    $value .= '<li class="list-group-item clearfix dropdown" ><a href="shop-product-list.html"><i class="fa fa-angle-right"></i>'.$val->getName().'</a>';
                    $value .= $this->getProductCategory($val->getChildren(),$addCalss ='dropdown-menu');
                }else{
                    $value .= '<li class="list-group-item clearfix" ><a href="shop-product-list.html">' . $val->getName().'</a>';
                }
                $value .= '</li>';
            }

        }
        $value .='</ul>';

        return $value;

    }

    public function getProductCategoryMenu($categories,$addCalss =''){

        $value ='';
        $addCalss = ($addCalss == '') ? 'list-group margin-bottom-25 sidebar-menu' : 'dropdown-menu';
        $value .='<ul class="'.$addCalss.'" >';
        foreach ($categories as $val) {

            $name = $val->getName();
            if (!empty($name)) {

                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;

                if($subIcon == 1){
                    $value .= '<li class="list-group-item clearfix dropdown" ><a href="shop-product-list.html"><i class="fa fa-angle-right"></i>'.$val->getName().'</a>';
                    $value .= $this->getProductCategory($val->getChildren(),$addCalss ='dropdown-menu');
                }else{
                    $value .= '<li class="list-group-item clearfix" ><a href="shop-product-list.html">' . $val->getName().'</a>';
                }
                $value .= '</li>';
            }

        }
        $value .='</ul>';

        return $value;

    }


    public function getFeatureCategoryMenu($categories , $addCalss=""){

        $value ='';
        $value .="<ul class='{$addCalss}'>";

        foreach ($categories as $val) {

            $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
            if($subIcon == 1){
                $value .= "<li class='cat-item  cat-parent' ><a href='/product/category/{$val->getSlug() }'>{$val->getName()}</a>";
                $value .= $this->getFeatureCategoryMenu($val->getChildren(),$addCalss ='children');
            }else{
                $value .= "<li class='cat-item' ><a href='/product/category/{$val->getSlug() }'>{$val->getName()}</a>";
            }
            $value .= '</li>';

        }
        $value .='</ul>';

        return $value;

    }


    public function setFeatureOrdering($data)
    {
        $i = 1;
        $em = $this->_em;
        $qb = $em->createQueryBuilder();

        foreach ($data as $key => $value){
            $val = ($value) ? $value: 0 ;
            $q = $qb->update('ProductProductBundle:Category', 'mg')
                ->set('mg.sorting', $i)
                ->where('mg.id = :id')
                ->setParameter('id', $key)
                ->getQuery()
                ->execute();
            $i++;

        }
    }

    public function setCategoryFeature($data)
    {

        $i = 1;
        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $isFeatures = $data['feature'];
        $catIDs = $data['catId'];
        foreach ($catIDs as $value){

            $val = in_array($value , $isFeatures ) ? 1 : 0 ;
            $q = $qb->update('ProductProductBundle:Category', 'mg')
                ->set('mg.feature', $val)
                ->where('mg.id = :id')
                ->setParameter('id', $value)
                ->getQuery()
                ->execute();
            $i++;
        }
    }

    public function getRootCategoriesQB() {

        $qb = $this->createQueryBuilder('c');

        return $qb
            ->where('c.status = :status')
            ->andWhere($qb->expr()->isNull('c.parent'))
            ->setParameter('status', 1)
            ->orderBy('c.name', 'ASC');
    }

    public function getRootCategories() {
        return $this->getRootCategoriesQB()->getQuery()->getResult();
    }

    public function getFeaturedRootCategories() {
        $qb = $this->getRootCategoriesQB();

        return $qb
            ->andWhere($qb->expr()->eq('c.feature', true))
            ->getQuery()
            ->getResult();
    }

    public function getCategoryFeature()
    {
        $categories = $this->getFeaturedRootCategories();

        $value ='';
        $addCalss =  'list-group margin-bottom-25 sidebar-menu' ;
        $value .='<ul class="'.$addCalss.'" >';
        foreach ($categories as $val) {
                $value .= '<li class="list-group-item clearfix" ><a href="/category/'.$val->getSlug().'">' . $val->getName().'</a></li>';
        }
        $value .='</ul>';

        return $value;
    }

    public function getFlatTree()
    {

        $categories = $this->childrenHierarchy();

        $this->buildFlatTree($categories, $array);

        return $array;
    }

    public function getFlatCategoryTree()
    {

        $categories = $this->childrenHierarchy();

        $this->buildFlatCategoryTree($categories, $array);

        return $array;
    }

    private function buildFlatTree($categories, &$array = array())
    {
        usort($categories, function($a, $b){
            return strcmp($a["name"], $b["name"]);
        });

        foreach($categories as $category) {
            $array[$category['id']] = $this->formatLabel($category['level'], $category['name']);
            if(isset($category['__children'])) {
                $this->buildFlatTree($category['__children'], $array);
            }
        }
    }

    private function buildFlatCategoryTree($categories, &$array = array())
    {
        usort($categories, function($a, $b){
            return strcmp($a["name"], $b["name"]);
        });

        foreach($categories as $category) {
            $array[] = $this->find($category['id']);
            if(isset($category['__children'])) {
                $this->buildFlatCategoryTree($category['__children'], $array);
            }
        }
    }

    private function formatLabel($level, $value) {
        $level = $level - 1;
        return str_repeat("-", $level * 3) . str_repeat(">", $level) . "$value";
    }


    public function getCategoryOptions(){

        $ret = array();
        $em = $this->_em;
        $categories = $em->getRepository('ProductProductBundle:Category')->findBy(array('status'=>1),array('name'=>'asc'));

        foreach( $categories as $cat ){
            if( !$cat->getParent() ){
                continue;
            }
            $key = $cat->getParent()->getName();
            if(!array_key_exists($key, $ret) ){
                $ret[ $cat->getParent()->getName() ] = array();
            }
            $ret[ $cat->getParent()->getName() ][ $cat->getId() ] = $cat;
        }
        return $ret;
    }

    /**
     * @param $categories Category[]
     * @return array
     */
    public function buildCategoryGroup($categories)
    {
        $result = array();

        foreach($categories as $category) {

            $parentCategory = $this->getParentCategoryByLevel($category, 2);


            if(empty($parentCategory)) {
                continue;
            }

            $parentId = $parentCategory->getId();

            if(!isset($result[$parentId])) {
                $result[$parentId] = array(
                    'name' =>  $parentCategory->getName(),
                    'id' =>  $parentCategory->getId(),
                    '__children' =>  array(),
                );
            }

            $result[$parentId]['__children'][] = array(
                'name' => $category->getName(),
                'id' => $category->getId()
            );
        }

        return $result;
    }

    public function getCategoryOptionGroup()
    {
        $results = $this->createQueryBuilder('node')
            ->orderBy('node.level, node.name', 'ASC')
            ->where('node.level > 1')
            ->getQuery()
            ->getResult();

        $categories = $this->getCategoriesIndexedById($results);
        $grouped = array();
        foreach ($categories as $category) {
            switch($category->getLevel()) {
                case 2: break;
                default:
                    $grouped[$categories[$category->getParentIdByLevel(2)]->getName()][$category->getId()] = $category;
            }
        }
        return $grouped;
    }

    /**
     * @param Category $category
     * @param int $level
     * @return Category
     */
    public function getParentCategoryByLevel(Category $category, $level = 1)
    {
        return $this->find($category->getParentIdByLevel($level));
    }

    /**
     * @param $results
     * @return Category[]
     */
    protected function getCategoriesIndexedById($results)
    {
        $categories = array();

        foreach ($results as $category) {
            $categories[$category->getId()] = $category;
        }
        return $categories;
    }

    public function getEcommerceCategoryMenu(EcommerceConfig $config)
    {
        $grouped = array();

        $qb = $this->createQueryBuilder('node');
        $orX = $qb->expr()->orX();

        $categories = $this->createQueryBuilder("node")
            ->where('node.ecommerceConfig = :config')
            ->andWhere('node.level = :level')
            ->setParameter('config', $config)
            ->setParameter('level', 1)
            ->orderBy('node.level','ASC')
            ->getQuery()->getResult();

        foreach($categories as $category){
            $orX->add("node.path like '" .$category->getId() . "/%'");
        }

        $results = $qb
            ->orderBy('node.level, node.name', 'ASC')
            ->where('node.level IN (1,2)')
            ->andWhere($orX)
            ->getQuery()
            ->getResult();

        $categories = $this->getCategoriesIndexedById($results);

        foreach ($categories as $category) {
            switch($category->getLevel()) {
                case 1: break;
                default:
                    $grouped[$categories[$category->getParentIdByLevel(1)]->getName()][$category->getId()] = $category;
            }
        }
        return $grouped == null ? array() : $grouped;

    }

    public function getUserCategoryOptionGroup(InventoryConfig $inventroy)
    {
        $grouped = array();

        if(!empty($inventroy->getItemTypeGrouping())){

            $qb = $this->createQueryBuilder('node');
            $orX = $qb->expr()->orX();

            $categories = $inventroy->getItemTypeGrouping()->getCategories();
            foreach($categories as $category){
                $orX->add("node.path like '" .$category->getId() . "/%'");
            }

            $results = $qb
                ->orderBy('node.level, node.name', 'ASC')
                ->where('node.level > 1')
                ->andWhere($orX)
                ->getQuery()
                ->getResult();

            $categories = $this->getCategoriesIndexedById($results);

            foreach ($categories as $category) {
                switch($category->getLevel()) {
                    case 2: break;
                    default:
                        $grouped[$categories[$category->getParentIdByLevel(2)]->getName()][$category->getId()] = $category;
                }
            }
            return $grouped;
        }

        return $grouped == null ? array() : $grouped;

    }

    public function getUseInventoryItemCategory(InventoryConfig $inventroy)
    {
        $arr =array();
        $array =array();
        if(!empty($inventroy->getItemTypeGrouping())){

            $categories = $inventroy->getItemTypeGrouping()->getCategories();
            foreach($categories as $category){
                $arr[] = array(
                    'id' => $category->getId(),
                    'name' => $category->getName(),
                    'level' => $category->getLevel(),
                    '__children' => $this->childrenHierarchy($category)
                );
            }
            $this->buildFlatCategoryTree($arr , $array);
        }
        return $array == null ? array() : $array;

    }

    public function getUseEcommerceItemCategory(EcommerceConfig $config)
    {
        $arr =array();
        $array =array();
        if(!empty($config->getCategoryGrouping())){
            $categories = $config->getCategoryGrouping()->getCategories();
            foreach($categories as $category){
                $arr[] = array(
                    'id' => $category->getId(),
                    'name' => $category->getName(),
                    'level' => $category->getLevel(),
                    '__children' => $this->childrenHierarchy($category)
                );
            }
            $this->buildFlatCategoryTree($arr , $array);
        }
        return $array == null ? array() : $array;

    }

    public function getFlatEcommerceCategoryTree(EcommerceConfig $config)
    {

        $categories = $this->createQueryBuilder("node")
            ->where('node.ecommerceConfig = :config')
            ->andWhere('node.level = :level')
            ->setParameter('config', $config)
            ->setParameter('level', 1)
            ->orderBy('node.level','ASC')
            ->getQuery()->getResult();

        $arr =array();
        $array =array();
        if(!empty($categories)){

            /* @var $category Category */

            foreach($categories as $category){

                $arr[] = array(
                    'id' => $category->getId(),
                    'name' => $category->getName(),
                    'level' => $category->getLevel(),
                    '__children' => $this->childrenHierarchy($category)
                );
            }
            $this->buildFlatCategoryTree($arr , $array);
        }
        return $array == null ? array() : $array;
    }

    public function getFlatInventoryCategoryTree(InventoryConfig $config)
    {

        $categories = $this->createQueryBuilder("node")
            ->where('node.inventoryConfig = :config')
            ->setParameter('config', $config)
            ->orderBy('node.level','ASC')
            ->getQuery()->getResult();

        $arr =array();
        $array =array();
        if(!empty($categories)){

            /* @var $category Category */

            foreach($categories as $category){

                $arr[] = array(
                    'id' => $category->getId(),
                    'name' => $category->getName(),
                    'level' => $category->getLevel(),
                    '__children' => $this->childrenHierarchy($category)
                );
            }
            $this->buildFlatCategoryTree($arr , $array);
        }
        return $array == null ? array() : $array;
    }

    function categoryTree($config){

        $items = array();
        $sql = "SELECT id,parent,name FROM categories WHERE  ecommerceConfig_id ={$config} AND level > 2";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $items[]=array('value' => '','text'=> '-- Add Category --');
        if($results){
            foreach($results as $row){
                $items[]=array('value' => $row['id'],'text'=> $row['name']);
            }
        }
        $items[] = array('value' => '0','text'=> 'Empty Category');
        return $items;
    }

    function categoryInventoryTree($config){

        $sql = "SELECT name FROM categories WHERE  inventoryConfig_id ={$config->getId()}  and  permission = 'private' ";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        return $results;
    }

    public function selectCategoryTree( $category , $spacing = '--', $items = '' ) {

        if (!is_array($items))
            $items = array();
        foreach($category as $row){
            $items[] = array("value" => $row->getId(), "text" => $spacing . $row->getName());
            if($row->getChildren()){
                $items = $this->selectCategoryTree($row->getChildren(), $spacing . '--', $items);
            }
        }
        return $items;

    }

    public function getCategoryTreeForMobile( $category , $selected, $spacing = '--', $items = '' ) {

        /* @var $row Category */
        foreach($category as $row){
            $selected = ($selected === $row->getId() )? 'selected':'';
            $name = $row->getName();
            $items .= "<option  $selected  value='{$row->getSlug()}'>{$spacing}{$name}</option>";
            if($row->getChildren()){
                $items = $this->getCategoryTreeForMobile($row->getChildren(), $selected, $spacing . '--', $items);
            }
        }
        return $items;

    }



    public function searchAutoComplete($inventory,$q)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.masterProducts','m');
        $query->select('e.name as id');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'$q%'"  ));
        $query->andWhere("m.inventoryConfig = :inventory");
        $query->setParameter('inventory', $inventory->getId());
        $query->groupBy('e.id');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }


    public function getChildIds($catId)
    {

        $query = $this->createQueryBuilder('e');
        $orX = $query->expr()->orX();
        $query->select('e.id as id');
        $orX->add("e.path like '%" .$catId."/%'");
        $query->where($orX);
        $result = $query->getQuery();
        $res = $result->getArrayResult();
        return $res;

    }

    public function getFeatureCategory($config, $limit)
    {
        $query = $this->createQueryBuilder('e');
        $query->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $query->andWhere("e.status = 1");
        $query->andWhere("e.feature = 1");
        $query->orderBy('e.name', 'ASC');
        if($limit > 0){
            $query->setMaxResults($limit);
        }
        return $query->getQuery()->getResult();

    }



}
