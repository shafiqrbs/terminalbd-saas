<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\CashReconciliation;
use Appstore\Bundle\AccountingBundle\Entity\CashReconciliationMeta;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * CashReconciliationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CashReconciliationRepository extends EntityRepository
{

    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
      //  $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function checkExist(GlobalOption $option)
    {
        $date = new \DateTime('now');
        $created = $date->format('Y-m-d');
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $option->getId());
        $qb->andWhere($qb->expr()->like("e.created", "'%$created%'"  ));
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function initialUpdate(User $user , CashReconciliation $entity)
    {

        $transactionCashOverview = $this->_em->getRepository('AccountingBundle:AccountCash')->transactionWiseOverview($user);
        foreach ($transactionCashOverview['result'] as $mod):

            if($mod['transactionName'] == 'Cash'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setCash($cash);
                $entity->setSystemCash($cash);
            }elseif($mod['transactionName'] == 'Bank'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setBank($cash);
                $entity->setSystemBank($cash);
            }elseif($mod['transactionName'] == 'Mobile'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setMobile($cash);
                $entity->setSystemMobile($cash);
            }
            endforeach;
            $this->_em->flush($entity);
    }

    public function systemCashUpdate(User $user , CashReconciliation $entity)
    {

        $transactionCashOverview = $this->_em->getRepository('AccountingBundle:AccountCash')->transactionWiseOverview($user);
        foreach ($transactionCashOverview['result'] as $mod):

            if($mod['transactionName'] == 'Cash'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setSystemCash($cash);
            }elseif($mod['transactionName'] == 'Bank'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setSystemBank($cash);
            }elseif($mod['transactionName'] == 'Mobile'){
                $open   =  $transactionCashOverview['openingBalance'][$mod['transactionId']];
                $debit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['debit'];
                $credit  =  $transactionCashOverview['transactionBalances'][$mod['transactionId']]['credit'];
                $cash   =  (($open + $debit) - $credit);
                $entity->setSystemMobile($cash);
            }
        endforeach;
        $this->_em->flush($entity);
    }

    public function notesReconciliationInsert(CashReconciliation $reconciliation,$bankCash,$mobileCash)
    {
       $arrs = [1000 =>'1000 Taka', 500 => '500 Taka', 100 => '100 Taka',50 => '50 Taka', 20 => '20 Taka',10 => '10 Taka',5 => '5 Taka',2 => '2 Taka',1 => '1 Taka'];
        foreach ($arrs as $key => $value){
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Cash');
            $entity->setMetaKey($value);
            $entity->setNoteType($key);
            $entity->setAmount(0);
            $this->_em->persist($entity);
            $this->_em->flush();
        }
        $closing = 0;

        foreach ($bankCash['result'] as $bank ){
            $bankId = $bank['accountId'];
            $closing = ($bankCash['openingBalance'][$bankId] + $bankCash['transactionBankCash'][$bankId]['debit'] - $bankCash['transactionBankCash'][$bankId]['credit'] );
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Bank');
            $entity->setMetaKey($bank['bankName']);
            if($closing > 0){
                $entity->setAmount($closing);
                $entity->setSystemAmount($closing);
            }
            $this->_em->persist($entity);
            $this->_em->flush();
        }

        foreach ($mobileCash['result'] as $mobile ) {

            $bankId = $mobile['accountId'];
            $closing = ($mobileCash['openingBalance'][$bankId] + $mobileCash['transactionMobileCash'][$bankId]['debit'] - $mobileCash['transactionMobileCash'][$bankId]['credit']);
            $entity = new CashReconciliationMeta();
            $entity->setCashReconciliation($reconciliation);
            $entity->setTransactionMethod('Mobile');
            $entity->setMetaKey($mobile['mobileBankName']);
            if ($closing > 0){
                $entity->setAmount($closing);
                $entity->setSystemAmount($closing);
            }
            $this->_em->persist($entity);
            $this->_em->flush();
        }
    }

    public function update(CashReconciliation $cash, $method)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:CashReconciliationMeta','e');
        $qb->join('e.cashReconciliation','t');
        $qb->select('COALESCE(SUM(e.amount),0) AS amount');
        $qb->where("t.id = :reconciliation");
        $qb->setParameter('reconciliation', $cash->getId());
        $qb->andWhere("e.transactionMethod = :method");
        $qb->setParameter('method', $method);
        echo $result = $qb->getQuery()->getOneOrNullResult()['amount'];
        echo $method;
        if($method == 'Cash'){
            $cash->setCash($result);
        }elseif($method == 'Bank'){
            $cash->setBank($result);
        }elseif($method == 'Mobile'){
            $cash->setMobile($result);
        }
        $this->_em->persist($cash);
        $this->_em->flush($cash);

    }

}
