<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\AccountingBundle\Entity\AccountSalesReturn;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * AccountSalesReturnRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountSalesReturnRepository extends EntityRepository
{


    public function salesReturnOverview(User $user,$data)
    {

        $globalOption = $user->getGlobalOption();
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.totalAmount) AS totalAmount, SUM(e.amount) AS receiveAmount, SUM(e.amount) AS dueAmount,SUM(e.amount) AS returnAmount ');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $qb->andWhere("e.process = 'approved'");
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        $data =  array('totalAmount'=>$result['totalAmount'],'receiveAmount'=>$result['receiveAmount'],'dueAmount'=>$result['dueAmount']);
        return $data;

    }

    public function findWithSearch(User $user,$data = '')
    {
        $globalOption = $user->getGlobalOption();

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(empty($data))
        {
             $datetime = new \DateTime("now");
             $startDate = $datetime->format('Y-m-d 00:00:00');
             $endDate = $datetime->format('Y-m-d 23:59:59');

            /* $qb->andWhere("e.updated >= :startDate");
             $qb->setParameter('startDate', $startDate);
             $qb->andWhere("e.updated <= :endDate");
             $qb->setParameter('endDate', $endDate);*/

        }else{

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
            $customer =    isset($data['mobile'])? $data['mobile'] :'';

            if (!empty($data['startDate']) ) {

                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {

                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
            if (!empty($customer)) {
                $qb->join('e.customer','c');
                $qb->andWhere("c.mobile = :mobile");
                $qb->setParameter('mobile', $customer);
            }
        }

    }

    public function lastInsertSales($globalOption,$entity)
    {
        $em = $this->_em;
        $entity = $em->getRepository('AccountingBundle:AccountSalesReturn')->findOneBy(
            array('globalOption'=>$globalOption,'customer'=> $entity->getSales()->getCustomer(),'process'=>'approved'),
            array('id' => 'DESC')
        );

        if (empty($entity)) {
            return 0;
        }
        return $entity->getBalance();
    }

    public function insertAccountSalesReturn(SalesReturn $entity)
    {
        $em = $this->_em;
        $accountSales = new AccountSalesReturn();
        $accountSales->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        if(!empty($entity->getBranches())){

            $accountSales->setBranches($entity->getBranches());
        }
        $accountSales->setSalesReturn($entity);
        $accountSales->setCustomer($entity->getSales()->getCustomer());
        $accountSales->setTotalAmount($entity->getTotal());
        $accountSales->setAmount($entity->getTotal());
        $accountSales->setProcess('approved');
        $accountSales->setProcessHead('SalesReturn');
        $accountSales->setTransactionMethod($this->_em->getRepository('SettingToolBundle:TransactionMethod')->find(1));
        $em->persist($accountSales);
        $em->flush();

        return $accountSales;

    }

    public function insertAccountSalesReturnx(SalesReturn $entity)
    {
        $em = $this->_em;
        $accountSales = new AccountSales();
        $accountSales->setGlobalOption($entity->getInventoryConfig()->getGlobalOption());
        $accountSales->setSalesReturn($entity);
        $accountSales->setCustomer($entity->getSales()->getCustomer());
        /* Cash - Sales Return Payment Account */
        $accountSales->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));

        $accountSales->setReturnAmount($entity->getTotal());
        $accountSales->setApprovedBy($entity->getCreatedBy());
        $accountSales->setProcess('approved');
        $accountSales->setProcessHead('Sales');
        $em->persist($accountSales);
        $em->flush();

    }


}
