<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBankCash;
use Appstore\Bundle\AccountingBundle\Entity\AccountCash;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchase;
use Appstore\Bundle\AccountingBundle\Entity\Transaction;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseReturn;
use Doctrine\ORM\EntityRepository;

/**
 * AccountBkashRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountBkashRepository extends EntityRepository
{

    public function findWithSearch($globalOption,$data = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function accountCashOverview($globalOption,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.debit) AS debit, SUM(e.credit) AS credit');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);

        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getSingleResult();
        $data =  array('debit'=> $result['debit'],'credit'=> $result['credit']);
        return $data;

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(empty($data))
        {
                $datetime = new \DateTime("now");
                $startDate = $datetime->format('Y-m-d 00:00:00');
                $endDate = $datetime->format('Y-m-d 23:59:59');

                /*
                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate);
                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate);
                */

        }else{

                $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
                $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
                $process =    isset($data['process'])? $data['process'] :'';
                $bankBranch =    isset($data['bankBranch'])? $data['bankBranch'] :'';

                if (!empty($data['startDate']) and !empty($data['endDate']) ) {

                    $qb->andWhere("e.updated >= :startDate");
                    $qb->setParameter('startDate', $startDate.' 00:00:00');
                }
                if (!empty($data['endDate']) and !empty($data['startDate'])) {

                    $qb->andWhere("e.updated <= :endDate");
                    $qb->setParameter('endDate', $endDate.' 00:00:00');
                }
                if (!empty($process)) {

                    $qb->andWhere("e.processHead = :process");
                    $qb->setParameter('process', $process);
                }
                if (!empty($bankBranch)) {

                    $qb->andWhere("e.bankBranch = :bankBranch");
                    $qb->setParameter('bankBranch', $bankBranch);
                }
        }

    }

    public function lastInsertCash($entity)
    {
        $em = $this->_em;
        $entity = $em->getRepository('AccountingBundle:AccountBankCash')->findOneBy(
            array(
                'globalOption' => $entity->getGlobalOption(),
                'bankBranch' => $entity->getBankBranch()
            ),
            array('id' => 'DESC')
        );

        if (empty($entity)) {
            return 0;
        }
        return $entity->getBalance();
    }



    public function insertJournalBank(AccountJournal $journal)
    {

        $balance = $this->lastInsertCash($journal);
        $em = $this->_em;
        $cash = new AccountBankCash();
        $cash->setGlobalOption($journal->getGlobalOption());
        $cash->setBankBranch($journal->getBankBranch());
        $cash->setProcessHead('Journal');
        $cash->setAccountRefNo($journal->getAccountRefNo());
        $cash->setUpdated($journal->getUpdated());
        if($journal->getTransactionType()  == 'Debit' ){
            $cash->setAccountHead($journal->getAccountHeadDebit());
            $cash->setDebit($journal->getAmount());
            $cash->setBalance($balance + $journal->getAmount());
        }else{
            $cash->setAccountHead($journal->getAccountHeadCredit());
            $cash->setBalance($balance - $journal->getAmount() );
            $cash->setCredit($journal->getAmount());
        }
        $em->persist($cash);
        $em->flush();

    }

    public function insertPurchaseBank(AccountPurchase $entity)
    {

        $balance = $this->lastInsertCash($entity);
        $em = $this->_em;
        $cash = new AccountBankCash();
        $cash->setGlobalOption($entity->getGlobalOption());
        $cash->setBankBranch($entity->getBankBranch());
        $cash->setProcessHead('Purchase');
        $cash->setAccountRefNo($entity->getAccountRefNo());
        $cash->setUpdated($entity->getUpdated());
        $cash->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(32));
        $cash->setBalance($balance - $entity->getPayment() );
        $cash->setCredit($entity->getPayment());
        $em->persist($cash);
        $em->flush();

    }
    
}
