<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\Expenditure;
use Appstore\Bundle\AccountingBundle\Entity\ExpenseAndroidProcess;
use Appstore\Bundle\AccountingBundle\Entity\ExpenseCategory;
use Appstore\Bundle\HospitalBundle\Entity\DoctorInvoice;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * ExpenditureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenditureRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $startDate      = isset($data['startDate']) and $data['startDate'] != '' ? $data['startDate']:'';
        $endDate        = isset($data['endDate']) and $data['endDate'] != '' ? $data['endDate']:'';
        $toUser         = isset($data['toUser'])? $data['toUser'] :'';
        $user =    isset($data['user'])? $data['user'] :'';
        $invoice =    isset($data['invoice'])? $data['invoice'] :'';
        $remark =    isset($data['remark'])? $data['remark'] :'';
        $accountHead    = isset($data['accountHead'])? $data['accountHead'] :'';
        $transactionMethod    = isset($data['transactionMethod'])? $data['transactionMethod'] :'';
        $category       = isset($data['category'])? $data['category'] :'';
        $device       = isset($data['device'])? $data['device'] :'';
        if(!empty($startDate) and !empty($endDate)){
           $start = new \DateTime($data['startDate']);
           $startDate = $start->format('Y-m-d 00:00:00');
           $end = new \DateTime($data['endDate']);
           $endDate = $end->format('Y-m-d 23:59:59');
           $qb->andWhere("e.updated >= :startDate");
           $qb->setParameter('startDate', $startDate);
           $qb->andWhere("e.updated <= :endDate");
           $qb->setParameter('endDate', $endDate);
        }

        if (!empty($toUser)) {
            $qb->join("e.toUser",'u');
            $qb->andWhere($qb->expr()->like("u.username", "'%$toUser%'" ));
        }

        if (!empty($user)) {
            $qb->join('e.createdBy','u');
            $qb->andWhere("u.id = :user")->setParameter('user', $user);
        }

        if (!empty($device)) {
            $qb->andWhere("e.androidProcess = :android")->setParameter('android', $device);
        }
         if (!empty($accountHead)) {
            $qb->andWhere("e.accountHead = :accountHead");
            $qb->setParameter('accountHead', $accountHead);
        }
        if (!empty($transactionMethod)) {
            $qb->andWhere("e.transactionMethod = :transactionMethod");
            $qb->setParameter('transactionMethod', $transactionMethod);
        }
        if (!empty($category)) {
            $qb->andWhere("e.expenseCategory = :category");
            $qb->setParameter('category', $category);
        }
        if (!empty($invoice)) {
            $qb->andWhere($qb->expr()->like("e.accountRefNo", "'%$invoice%'" ));
        }
        if (!empty($remark)) {
            $qb->andWhere($qb->expr()->like("e.remark", "'%$remark%'" ));
        }
    }

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['startDate']) and !empty($data['endDate'])){
            $start = new \DateTime($data['startDate']);
            $startDate = $start->format('Y-m-d 00:00:00');
            $end = new \DateTime($data['endDate']);
            $endDate = $end->format('Y-m-d 23:59:59');
        }
        if (!empty($startDate) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
    }


    public function expenditureOverview(User $user , $data)
    {
        $globalOption = $user->getGlobalOption();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:Expenditure','e');
        $qb->select('sum(e.amount) as amount');
        $qb->where('e.process = :process');
        $qb->setParameter('process', 'approved');
        $qb->andWhere('e.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $amount = $qb->getQuery()->getOneOrNullResult();
        return  $amount['amount'] ;

    }

    public function parentsExpenseAccountHead($globalOption,$parent,$data){

        $qb = $this->createQueryBuilder('e');
        $qb->select('sum(e.amount) as amount, accountHead.name as name , accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->innerJoin('e.expenseCategory','c');
        $qb->innerJoin('c.accountHead','accountHead');
        $qb->where('e.globalOption = :globalOption')->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("accountHead.parent IN(:parent)")->setParameter('parent', $parent);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function dailyPurchasePayment(User $user,$data)
    {
        $globalOption = $user->getGlobalOption();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.expenseCategory','c');
        $qb->select("c.id","c.name","COALESCE(SUM(e.amount),0) AS amount");
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption);
        $qb->andWhere("e.process = 'approved'");
        $qb->groupBy("c.id");
        $qb->orderBy("c.name",'ASC');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }


    public function androidDeviceExpenditureOverview(GlobalOption $option, $data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:Expenditure','e');
        $qb->select('sum(e.amount) as amount');
        $qb->where('e.process = :process');
        $qb->setParameter('process', 'approved');
        $qb->andWhere('e.globalOption = :globalOption');
        $qb->setParameter('globalOption', $option->getId());
        $qb->andWhere('e.androidDevice = :device')->setParameter('device', $data['device']);
        $this->handleSearchBetween($qb,$data);
        $amount = $qb->getQuery()->getOneOrNullResult();
        return  $amount['amount'] ;

    }

    public function findWithSearch(User $user , $data)
    {
        $globalOption = $user->getGlobalOption();

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.createdBy','cu');
        $qb->leftJoin('e.toUser','tu');
        $qb->leftJoin('tu.profile','profile');
        $qb->leftJoin('e.expenseCategory','c');
        $qb->leftJoin('e.transactionMethod','t');
        $qb->leftJoin('e.accountMobileBank','amb');
        $qb->leftJoin('e.accountBank','ab');
        $qb->select('e.id as id','e.created as created','e.amount as amount','e.accountRefNo as accountRefNo','e.path as path','e.remark as remark','e.process as process');
        $qb->addSelect('cu.username as createdBy');
        $qb->addSelect('profile.name as toUser');
        $qb->addSelect('t.name as methodName');
        $qb->addSelect('c.name as categoryName');
        $qb->addSelect('amb.name as mobileBankName');
        $qb->addSelect('amb.mobile as mobileNo');
        $qb->addSelect('ab.name as bankName');
        $qb->addSelect('ab.accountNo as accountNo');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function lastInsertExpenditure(Expenditure $entity)
    {

        $em = $this->_em;
        $entity = $em->getRepository('AccountingBundle:Expenditure')->findOneBy(
            array('globalOption' => $entity->getGlobalOption(),'expenseCategory' => $entity->getExpenseCategory(),'process'=>'approved'),
            array('id' => 'DESC')
        );
        if (empty($entity)) {
            return 0;
        }
        return $entity->getBalance();

    }

    public function insertCommissionPayment(DoctorInvoice $doctorInvoice)
    {
        $em = $this->_em;
        $entity = new Expenditure();
        $global = $doctorInvoice->getHospitalConfig()->getGlobalOption();
        $head = $this->_em->getRepository('AccountingBundle:AccountHead')->find(52);
        $entity->setGlobalOption($global);
        $entity->setDoctorInvoice($doctorInvoice);
        $entity->setAmount($doctorInvoice->getPayment());
        $entity->setCreatedBy($doctorInvoice->getCreatedBy());
        $entity->setApprovedBy($doctorInvoice->getApprovedBy());
        $entity->setAccountHead($head);
        $entity->setExpenseCategory($em->getRepository(ExpenseCategory::class)->generateCommission($global,$head));
        $entity->setTransactionMethod($doctorInvoice->getTransactionMethod());
        $entity->setAccountMobileBank($doctorInvoice->getAccountMobileBank());
        $entity->setAccountBank($doctorInvoice->getAccountBank());
        $entity->setCreated($doctorInvoice->getCreated());
        $entity->setUpdated($doctorInvoice->getCreated());
        $commission = "From Commission. Invoice No.-{$doctorInvoice->getHmsDoctorInvoice()} Name: {$doctorInvoice->getAssignDoctor()->getName()} and  type of commission: {$doctorInvoice->getHmsCommission()->getName()}";
        $entity->setRemark($commission);
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
        $em->getRepository('AccountingBundle:AccountCash')->insertExpenditureCash($entity);
       // $em->getRepository('AccountingBundle:Transaction')->insertExpenditureTransaction($entity);

    }

    public function reportForExpenditure(GlobalOption $option,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.expenseCategory','ec');
        $qb->select('SUM(e.amount) as amount');
        $qb->addSelect('ec.name as categoryName');
        $qb->where('e.globalOption =:option')->setParameter('option', $option);
        $qb->andWhere('e.process =:process')->setParameter('process', 'approved');
        $qb->groupBy('ec.name');
        $this->handleDateRangeFind($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function reportExpenditureAccountHead($option,$heads,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.expenseCategory','ec');
        $qb->join('ec.accountHead','ah');
        $qb->join('ah.parent','p');
        $qb->select("ah.name",'SUM(e.amount) as amount');
        $qb->where('e.globalOption =:option')->setParameter('option', $option);
        $qb->andWhere('e.process =:process')->setParameter('process', 'approved');
        $qb->andWhere('p.id IN (:ids)')->setParameter('ids', $heads);
        $qb->groupBy("ah.name");
        $this->handleDateRangeFind($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function monthlyExpenditure(User $user , $data =array())
    {
        $config = $user->getGlobalOption()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(transaction.updated,'%d-%m-%Y') as date,SUM(transaction.amount) as payment
                FROM Expenditure as transaction
                WHERE transaction.globalOption_id = :option AND transaction.process = :process AND MONTHNAME(transaction.updated) =:month AND YEAR(transaction.updated) =:year
                GROUP BY date";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('option', $config);
        $stmt->bindValue('process', 'Approved');
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = array();
        foreach ($results as $result){
            $arrays[$result['date']] = $result;
        }
        return $arrays;
    }

    public function yearlyExpenditure(User $user , $data =array())
    {
        $config = $user->getGlobalOption()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(transaction.updated,'%M') as month,SUM(transaction.amount) as payment
                FROM Expenditure as transaction
                WHERE transaction.globalOption_id = :option AND transaction.process = :process AND  YEAR(transaction.updated) =:year
                GROUP BY month";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('option', $config);
        $stmt->bindValue('process', 'Approved');
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = array();
        foreach ($results as $result){
            $arrays[$result['month']] = $result;
        }
        return $arrays;
    }

    public function accountReverse(Expenditure $entity)
    {
        $em = $this->_em;
        $transaction = $em->createQuery("DELETE AccountingBundle:Transaction e WHERE e.globalOption = ".$entity->getGlobalOption()->getId() ." AND e.accountRefNo =".$entity->getAccountRefNo()." AND e.processHead = 'Expenditure'");
        if($transaction){
            $transaction->execute();
        }
        $accountCash = $em->createQuery("DELETE AccountingBundle:AccountCash e WHERE e.globalOption = {$entity->getGlobalOption()->getId() } AND e.expenditure ={$entity->getId()} AND e.processHead = 'Expenditure'");
        if($accountCash){
            $accountCash->execute();
        }
    }

    public function insertApiExpenditure(GlobalOption $option , $data){

        $em = $this->_em;
        $expense = new Expenditure();
        $expense->setGlobalOption($option);
        $expense->setAmount($data['amount']);
        $expense->setBalance($data['amount']);
        if($data['transactionMethod']){
            $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>$data['transactionMethod']));
            $expense->setTransactionMethod($method);
        }
        if($data['bankAccount']){
            $bank = $em->getRepository('AccountingBundle:AccountBank')->find($data['bankAccount']);
            $expense->setAccountBank($bank);
        }
        if($data['mobileBankAccount']){
            $mobile = $em->getRepository('AccountingBundle:AccountMobileBank')->find($data['mobileBankAccount']);
            $expense->setAccountMobileBank($mobile);
        }
        if($data['createdBy']){
            $createdBy = $em->getRepository('UserBundle:User')->find($data['createdBy']);
            $expense->setCreatedBy($createdBy);
        }
        if($data['toUser']){
            $toUser = $em->getRepository('UserBundle:User')->find($data['toUser']);
            $expense->setToUser($toUser);
        }
        if($data['expenseCategory']){
            $category = $em->getRepository('AccountingBundle:ExpenseCategory')->find($data['expenseCategory']);
            $expense->setExpenseCategory($category);
        }
        $expense->setUpdated($expense->getCreated());
        $em->persist($expense);
        $em->flush();

    }

    public function removeDoctorExpenditure(DoctorInvoice $entity)
    {
        $em = $this->_em;
        $transaction = $em->createQuery("DELETE AccountingBundle:Expenditure e WHERE  e.doctorInvoice ={$entity->getId()}");
        if($transaction){
            $transaction->execute();
        }
    }

    public function findAndroidDeviceSales($x)
    {
        $ids = [];
        foreach ($x as $y){
            $ids[]=$y['id'];
        }

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.androidProcess','a');
        $qb->select('a.id as androidId');
        $qb->addSelect('sum(s.amount) as amount , count(s.id) as voucher');
        $qb->where("s.androidProcess IN (:salesId)")->setParameter('salesId', $ids);
        $qb->groupBy('androidId');
        $result = $qb->getQuery()->getArrayResult();
        $array= [];
        foreach ($result as $row ){
            $array[$row['androidId']]= $row;
        }
        return $array;
    }

    public function insertApiExpense(GlobalOption $option, ExpenseAndroidProcess $process)
    {
        $em = $this->_em;

        $items = json_decode($process->getJsonItem(),true);

        if($items){
            foreach ($items as $item):

                $sales = new Expenditure();
                $sales->setGlobalOption($option);
                $sales->setAndroidDevice($process->getAndroidDevice());
                $sales->setAndroidProcess($process);
                $sales->setAccountRefNo($item['invoiceId']);
                $sales->setAmount($item['payment']);
                if(isset($item['transactionMethod']) and $item['transactionMethod']){
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>$item['transactionMethod']));
                    if($method){
                        $sales->setTransactionMethod($method);
                    }
                }elseif(isset($item['transactionMethod']) and empty($item['transactionMethod']) and $sales->getAmount() > 0){
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>'cash'));
                    $sales->setTransactionMethod($method);
                }
                if(isset($item['bankAccount']) and $item['bankAccount'] > 0 ){
                    $bank = $em->getRepository('AccountingBundle:AccountBank')->find($item['bankAccount']);
                    if($bank){ $sales->setAccountBank($bank); }
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>'bank'));
                    $sales->setTransactionMethod($method);
                }
                if(isset($item['mobileBankAccount']) and $item['mobileBankAccount'] > 0 ){
                    $mobile = $em->getRepository('AccountingBundle:AccountMobileBank')->find($item['mobileBankAccount']);
                    if($mobile){ $sales->setAccountMobileBank($mobile); }
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>'mobile'));
                    $sales->setTransactionMethod($method);
                }
                $category = $em->getRepository('AccountingBundle:ExpenseCategory')->find($item['expenseCategory']);
                if(!empty($category)){
                    $sales->setExpenseCategory($category);
                    $sales->setAccountHead($sales->getExpenseCategory()->getAccountHead());
                }
                if(($item['toUser'])){
                    $createdBy = $em->getRepository('UserBundle:User')->find($item['toUser']);
                    $sales->setCreatedBy($createdBy);
                    $sales->setToUser($createdBy);
                }
                $sales->setProcess("Device");
                $em->persist($sales);
                $em->flush();

            endforeach;

            return $msg = "valid";
        }

    }



}
