<?php

namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBalanceTransfer;
use Appstore\Bundle\AccountingBundle\Entity\AccountBank;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournal;
use Appstore\Bundle\AccountingBundle\Entity\AccountJournalItem;
use Appstore\Bundle\AccountingBundle\Entity\AccountOnlineOrder;
use Appstore\Bundle\AccountingBundle\Entity\AccountProfit;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchaseCommission;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchaseReturn;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\AccountingBundle\Entity\AccountSalesAdjustment;
use Appstore\Bundle\AccountingBundle\Entity\AccountSalesReturn;
use Appstore\Bundle\AccountingBundle\Entity\Expenditure;
use Appstore\Bundle\AccountingBundle\Entity\PaymentSalary;
use Appstore\Bundle\AccountingBundle\Entity\PettyCash;
use Appstore\Bundle\AccountingBundle\Entity\Transaction;
use Appstore\Bundle\AssetsBundle\Entity\DepreciationBatch;
use Appstore\Bundle\DmsBundle\Entity\DmsTreatmentPlan;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTransaction;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransaction;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseReturn;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchase;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $accountHead = isset($data['accountHead']) ? $data['accountHead'] :'';
        $accountSubHead = isset($data['accountSubHead']) ? $data['accountSubHead'] :'';
        $startDate = isset($data['startDate']) ? $data['startDate'] : '';
        $endDate =   isset($data['endDate']) ? $data['endDate'] : '';

        if(empty($data)){
            $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['startDate']) and !empty($data['endDate'])){
            $start = new \DateTime($data['startDate']);
            $startDate = $start->format('Y-m-d 00:00:00');
            $end = new \DateTime($data['endDate']);
            $endDate = $end->format('Y-m-d 23:59:59');
        }
        if (!empty($startDate) ) {
            $qb->andWhere("ex.created >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("ex.created <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if (!empty($accountHead)) {
            $qb->andWhere("ex.accountHead = :accountHead");
            $qb->setParameter('accountHead', $accountHead);
        }
        if (!empty($accountSubHead)) {
            $qb->andWhere("ex.subAccountHead = :accountSubHead");
            $qb->setParameter('accountSubHead', $accountSubHead);
        }
    }


    public function removeTransaction($option,$process)
    {
	    $transaction = $this->_em->createQuery("DELETE AccountingBundle:Transaction e WHERE e.globalOption = {$option->getId()} AND e.processHead ='{$process}'");
	    $transaction->execute();
    }


    public function reportAccountHead(GlobalOption $globalOption,$data)
    {

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','head');
        $qb->leftJoin('ex.subAccountHead','sub');
        $qb->leftJoin('ex.accountJournal','aj');
        $qb->leftJoin('aj.accountJournalItems','aji');
        $qb->select('ex.created as created ,head.name as accountHead , sub.name as subAccountHead , ex.processHead as processHead , COALESCE(ex.debit,0) as debit , COALESCE(ex.credit,0) as credit');
        $qb->addSelect('aji.narration as narration','aj.accountRefNo as accountRefNo');
        $qb->where("ex.globalOption = :globalOption");
        $qb->setParameter('globalOption',$globalOption->getId());
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('ex.created','DESC');
        $result = $qb->getQuery();
        $res = $result->getArrayResult();
        return $res;
    }

	public function finalTransaction(GlobalOption $globalOption)
	{

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.accountHead','a');
		$qb->select('a.name as name , e.processHead as processHead , COALESCE(sum(e.debit),0) as debit , COALESCE(sum(e.credit),0) as credit');
		$qb->where("e.globalOption = :globalOption");
		$qb->setParameter('globalOption',$globalOption->getId());
		$qb->groupBy('e.accountHead');
		$qb->orderBy('e.accountHead','ASC');
		$result = $qb->getQuery();
		$res = $result->getArrayResult();
		return $res;
	}

    public function stakeHolderWiseCapital($globalOption,AccountProfit $profit)
    {
        $end = $profit->getGenerateMonth();
        $endDate = $end->format('Y-m-t 23:59:59');
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.accountHead','a');
        $qb->addSelect('(COALESCE(SUM(e.credit),0) - COALESCE(SUM(e.debit),0)) AS balance');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption',$globalOption);
        $qb->andWhere("a.slug = :slug")->setParameter('slug','capital-investment');
        $qb->andWhere("e.subAccountHead IS NOT NULL");
        $qb->andWhere("e.created <= :created")->setParameter('created', $endDate);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function getCapitalInvestment(GlobalOption $option , AccountProfit $profit)
    {

        $summary = $this->stakeHolderWiseCapital($option,$profit);
        $totalCapital = abs($summary['balance']);
        $end = $profit->getGenerateMonth();
        $endDate = $end->format('Y-m-t 23:59:59');
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.subAccountHead','ach');
        $qb->join('e.accountHead','ac');
        $qb->select('ach.id as subAccountId','COALESCE(SUM(e.debit),0) AS debit, COALESCE(SUM(e.credit),0) AS credit');
        $qb->addSelect('(COALESCE(SUM(e.credit),0) - COALESCE(SUM(e.debit),0)) AS capital');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption',$option->getId());
        $qb->andWhere("ac.slug = :slug")->setParameter('slug','capital-investment');
       // $qb->andWhere("ach.source = :source")->setParameter('source','user');
        $qb->andWhere("e.created <= :created")->setParameter('created', $endDate);
        $qb->groupBy('subAccountId');
        $qb->orderBy('e.subAccountHead','ASC');
        $result = $qb->getQuery()->getArrayResult();
        if($result){
            foreach ($result as $row):
                $this->profitDistribution($totalCapital,$profit,$row);
            endforeach;
        }
    }

    public function profitDistribution($totalCapital,AccountProfit $profit,$row){

        $em = $this->_em;
        $subAccount = $em->getRepository('AccountingBundle:AccountHead')->find($row['subAccountId']);
        $transaction = new Transaction();
        if($profit->getProfit() > 0){
            $totalProfit = $profit->getProfit();
            $amount = floor(($row['capital'] * $totalProfit) / $totalCapital);
            $transaction->setCredit($amount);
            $transaction->setAmount("-{$amount}");
        }else{
            $totalProfit = $profit->getLoss();
            $amount = floor(($row['capital'] * $totalProfit) / $totalCapital);
            $transaction->setDebit($amount);
            $transaction->setAmount($amount);

        }
        $transaction->setGlobalOption($profit->getGlobalOption());
        $transaction->setAccountProfit($profit);
        $transaction->setCreated($profit->getCreated());
        $transaction->setUpdated($profit->getCreated());
        $transaction->setProcess('Current Liabilities');
        $transaction->setAccountRefNo($profit->getId());
        $transaction->setUpdated($profit->getUpdated());
        /* Inventory Assets - Purchase Goods Received account */
        $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array("slug" => "profit-loss")));
        $transaction->setSubAccountHead($subAccount);
        $em->persist($transaction);
        $em->flush();
    }

	public function transactionOverview($globalOption,$accountHead = 0)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('COALESCE(SUM(e.debit),0) AS debit, COALESCE(SUM(e.credit),0) AS credit');
        $qb->addSelect('(COALESCE(SUM(e.debit),0) - COALESCE(SUM(e.credit),0)) AS balance');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption',$globalOption);
        if(!empty($accountHead)){
            $qb->andWhere("e.accountHead = :head");
            $qb->setParameter('head',$accountHead);
        }
        $result = $qb->getQuery();
        $res = $result->getOneOrNullResult();
        return $res;
    }

    public function getGroupByAccountHead($globalOption,$heads,$data){

        if(empty($data)){
            $datetime = new \DateTime("now");
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['tillDate']) and !empty($data['tillDate'])){
            $datetime = new \DateTime($data['tillDate']);
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.accountHead','accountHead');
        $qb->join('accountHead.parent','parent');
        $qb->select('sum(e.amount) as amount, sum(e.debit) as debit , sum(e.credit) as credit, accountHead.name as name , parent.name as parentName,parent.id as parentId, accountHead.id as accountHeadId, accountHead.toIncrease, accountHead.code as code');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("parent.slug IN (:parent)")->setParameter('parent',$heads);
        $qb->andWhere("accountHead.slug != 'profit-loss'");
        $qb->andWhere("e.updated <= :tillDate")->setParameter('tillDate', $tillDate);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('parentName','ASC')->orderBy('name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getProfitLossByAccountHead($globalOption,$heads,$data){

        if(empty($data)){
            $datetime = new \DateTime("now");
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['tillDate']) and !empty($data['tillDate'])){
            $datetime = new \DateTime($data['tillDate']);
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.accountHead','accountHead');
        $qb->join('accountHead.parent','parent');
        $qb->select('sum(e.amount) as amount, sum(e.debit) as debit , sum(e.credit) as credit, accountHead.name as name , parent.name as parentName,parent.id as parentId, accountHead.id as accountHeadId, accountHead.toIncrease, accountHead.code as code');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption->getId());
      //  $qb->andWhere("parent.slug IN (:parent)")->setParameter('parent',$heads);
        $qb->andWhere("accountHead.slug = 'profit-loss'");
        $qb->andWhere("e.created <= :tillDate")->setParameter('tillDate', $tillDate);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('parent.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getSubHeadProfitAccount($globalOption,$data){

        if(empty($data)){
            $datetime = new \DateTime("now");
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['tillDate']) and !empty($data['tillDate'])){
            $datetime = new \DateTime($data['tillDate']);
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.subAccountHead','subAccountHead');
        $qb->join('e.accountHead','accountHead');
        $qb->select('subAccountHead.id as subHead , subAccountHead.name as headName , COALESCE(sum(e.amount),0) as amount');
        $qb->addSelect('accountHead.name as parentName',"accountHead.id as parentId");
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("accountHead.slug = 'profit-loss'");
        $qb->andWhere("e.created <= :tillDate")->setParameter('tillDate', $tillDate);
        $qb->groupBy('subAccountHead.id');
        $qb->orderBy('accountHead.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $array = array();
        foreach ($result as $row):
            $array[$row['subHead']] = $row;
        endforeach;
        return $array;
    }

    public function getStakeHolderProfitAccount($user){

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.subAccountHead','subAccountHead');
        $qb->join('e.accountHead','accountHead');
        $qb->select('sum(e.amount) as amount');
        $qb->where("subAccountHead.employee = :employee")->setParameter('employee', $user->getId());
        $qb->andWhere("accountHead.slug = 'profit-loss'");
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'];
    }

    public function getSubHeadAccountDebit($globalOption,$parent,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['tillDate']) and !empty($data['tillDate'])){
            $datetime = new \DateTime($data['tillDate']);
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.subAccountHead','subAccountHead');
        $qb->join('e.accountHead','accountHead');
        $qb->join('accountHead.parent','parent');
        $qb->select('subAccountHead.id as subHead , subAccountHead.name as headName , COALESCE(sum(e.amount),0) as amount');
        $qb->addSelect('accountHead.name as parentName',"accountHead.id as parentId");
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("parent.slug IN(:parents)")->setParameter('parents', $parent);
        $qb->andWhere("accountHead.slug NOT IN(:heads)")->setParameter('heads', array('account-receivable'));
        $qb->andWhere("e.updated <= :tillDate")->setParameter('tillDate', $tillDate);
        $qb->groupBy('subAccountHead.id');
        $qb->having('amount > 0');
        $qb->orderBy('accountHead.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $array = array();
        foreach ($result as $row):
            $array[$row['subHead']] = $row;
        endforeach;
        return $array;
    }

    public function getSubHeadAccountCredit($globalOption,$parent,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['tillDate']) and !empty($data['tillDate'])){
            $datetime = new \DateTime($data['tillDate']);
            $tillDate = $datetime->format('Y-m-d 23:59:59');
        }
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.subAccountHead','subAccountHead');
        $qb->join('e.accountHead','accountHead');
        $qb->join('accountHead.parent','parent');
        $qb->select('subAccountHead.id as subHead , subAccountHead.name as headName , COALESCE(sum(e.amount),0) as amount');
        $qb->addSelect('accountHead.name as parentName',"accountHead.id as parentId");
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("parent.slug IN(:parents)")->setParameter('parents', $parent);
        $qb->andWhere("accountHead.slug NOT IN(:heads)")->setParameter('heads', array('account-payable'));
        $qb->andWhere("e.updated <= :tillDate")->setParameter('tillDate', $tillDate);
        $qb->andWhere("accountHead.slug != 'profit-loss'");
        $qb->groupBy('subAccountHead.id');
        $qb->having('amount < 0');
        $qb->orderBy('accountHead.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $array = array();
        foreach ($result as $row):
            $array[$row['subHead']] = $row;
        endforeach;
        return $array;
    }

    public function parentsAccountHead($globalOption,$parent,$data){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(ex.amount) as amount, accountHead.name as name , accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','ex');
        $qb->innerJoin('ex.accountHead','accountHead');
        $qb->where('ex.globalOption = :globalOption')->setParameter('globalOption', $globalOption->getId());
        $qb->andWhere("accountHead.parent IN(:parent)")->setParameter('parent', $parent);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('ex.accountHead');
        $qb->orderBy('ex.accountHead','ASC');
        $result = $qb->getQuery()->getResult();
        return $result;
    }


    public function specificParentAccountHead($globalOption,$parent){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.amount) as amount, accountHead.name as name , accountHead.id, accountHead.toIncrease, accountHead.code');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->innerJoin('e.accountHead','accountHead');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("accountHead.parent = :parent")
            ->andWhere('e.updated >= :today_startdatetime')
            ->andWhere('e.updated <= :today_enddatetime');
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('parent', $parent)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->groupBy('e.accountHead');
        $qb->orderBy('e.accountHead','ASC');
        $result = $qb->getQuery()->getResult();

        return $result;


    }

    public function specificAccountHead($globalOption,$accountHead){

        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e.amount as amount,e.debit as debit, e.credit as credit , e.updated,e.accountRefNo, e.processHead, e.toIncrease, e.content');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where('e.globalOption = :globalOption')
            ->andWhere("e.accountHead = :accountHead");
        $qb->setParameter('globalOption', $globalOption->getId())
            ->setParameter('accountHead', $accountHead);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery()->getResult();

        return $result;

    }

    public function reportTransactionIncomeLoss($globalOption,$accountHeads,$data){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('COALESCE(SUM(ex.amount),0) as amount');
        $qb->where("accountHead.parent IN (:parent)");
        $qb->setParameter('parent', $accountHeads);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $res =  $qb->getQuery();
        $result = $res->getOneOrNullResult();
        return $result;

    }

    public function reportTransactionProfitIncomeLoss(AccountProfit $profit,$accountHeads){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('COALESCE(SUM(ex.amount),0) as amount');
        $qb->where("accountHead.parent IN (:parent)");
        $qb->setParameter('parent', $accountHeads);
        $qb->andWhere('ex.accountProfit = :profit');
        $qb->setParameter('profit', $profit->getId());
        $res =  $qb->getQuery();
        $result = $res->getOneOrNullResult();
        return $result;

    }


    public function reportTransactionIncome($globalOption,$accountHeads,$data){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('COALESCE(sum(ex.amount),0) as amount, COALESCE(sum(ex.debit),0) as debit , COALESCE(sum(ex.credit),0) as credit, accountHead.name as name, accountHead.toIncrease as toIncrease');
        $qb->where("accountHead.parent IN (:parent)");
        $qb->setParameter('parent', $accountHeads);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('ex.accountHead');
        $res =  $qb->getQuery();
        $result = $res->getArrayResult();
        return $result;

    }

    public function reportDebitTransactionIncome($globalOption,$accountHeads,$data){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('sum(ex.amount) as amount');
        $qb->where("accountHead.id IN (:ids)");
        $qb->setParameter('ids', $accountHeads);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('ex.accountHead');
        $res =  $qb->getQuery();
        $result = $res->getOneOrNullResult();
        return $result['amount'];

    }

    public function reportTransactionVat($globalOption,$accountHeads,$data){

        $qb = $this->createQueryBuilder('ex');
        $qb->join('ex.accountHead','accountHead');
        $qb->select('sum(ex.credit) as salesVat');
        $qb->where("accountHead.id = :head");
        $qb->setParameter('head', 16);
        $qb->andWhere('ex.globalOption = :globalOption');
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $res =  $qb->getQuery();
        $result = $res->getOneOrNullResult();
        if($result){
            return $result['salesVat'];
        }
        return 0;

    }

    public function insertDoubleEntryTransaction(AccountJournal $journal)
    {

        $em = $this->_em;

        /* @var $entity AccountJournalItem */

        foreach ($journal->getAccountJournalItems() as $entity):

            $transaction = new Transaction();
            $transaction->setGlobalOption($journal->getGlobalOption());
            $transaction->setAccountJournal($journal);
            $transaction->setProcessHead('Journal');
            $transaction->setProcess($entity->getAccountHead()->getParent()->getName());
            $transaction->setAccountRefNo($journal->getAccountRefNo());
            $transaction->setCreated($journal->getCreated());
            $transaction->setUpdated($journal->getCreated());
            if($entity->getDebit() > 0){
                $transaction->setAccountHead($entity->getAccountHead());
                if($entity->getAccountSubHead()){
                    $transaction->setSubAccountHead($entity->getAccountSubHead());
                }
                $transaction->setAmount($entity->getDebit());
                $transaction->setDebit($entity->getDebit());
            }else{
                $transaction->setAccountHead($entity->getAccountHead());
                if($entity->getAccountSubHead()){
                    $transaction->setSubAccountHead($entity->getAccountSubHead());
                }
                $transaction->setAmount("-{$entity->getCredit()}");
                $transaction->setCredit($entity->getCredit());
            }
            $em->persist($transaction);
            $em->flush();
            if($entity->getAccountHead()->getSlug() == "cash-in-hand"){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'cash');
            }elseif($entity->getAccountHead()->getSlug() == "bank-account" and $entity->getAccountSubHead()){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'bank');
            }elseif($entity->getAccountHead()->getSlug() == "mobile-account" and $entity->getAccountSubHead()){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'mobile');
            }

        endforeach;

    }

    public function resetDoubleEntryTransaction(AccountJournal $journal)
    {

        $em = $this->_em;

        /* @var $entity AccountJournalItem */

        foreach ($journal->getAccountJournalItems() as $entity):

            $transaction = new Transaction();
            $transaction->setGlobalOption($journal->getGlobalOption());
            $transaction->setAccountJournal($journal);
            $transaction->setProcessHead('Journal');
            $transaction->setProcess($entity->getAccountHead()->getParent()->getName());
            $transaction->setAccountRefNo($journal->getAccountRefNo());
            $transaction->setCreated($journal->getCreated());
            $transaction->setUpdated($journal->getCreated());
            if($entity->getDebit() > 0){
                $transaction->setAccountHead($entity->getAccountHead());
                if($entity->getAccountSubHead()){
                    $transaction->setSubAccountHead($entity->getAccountSubHead());
                }
                $transaction->setAmount($entity->getDebit());
                $transaction->setDebit($entity->getDebit());
            }else{
                $transaction->setAccountHead($entity->getAccountHead());
                if($entity->getAccountSubHead()){
                    $transaction->setSubAccountHead($entity->getAccountSubHead());
                }
                $transaction->setAmount("-{$entity->getCredit()}");
                $transaction->setCredit($entity->getCredit());
            }
            $em->persist($transaction);
            $em->flush();
            if($entity->getAccountHead()->getSlug() == "cash-in-hand"){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'cash');
            }elseif($entity->getAccountHead()->getSlug() == "bank-account" and $entity->getAccountSubHead()){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'bank');
            }elseif($entity->getAccountHead()->getSlug() == "mobile-account" and $entity->getAccountSubHead()){
                $em->getRepository('AccountingBundle:AccountCash')->insertDoubleEntry($journal,$entity,'mobile');
            }

        endforeach;

    }

    public function insertAccountJournalTransaction(AccountJournal $journal)
    {
        $this->insertAccountJournalDebitTransaction($journal);
        $this->insertAccountJournalCreditTransaction($journal);
    }

    public function insertAccountJournalDebitTransaction(AccountJournal $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountJournal($entity);
        $transaction->setProcessHead('Journal');
        $transaction->setProcess($entity->getAccountHeadDebit()->getParent()->getName());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $transaction->setAccountHead($entity->getAccountHeadDebit());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());

        /* Cash - Cash various */


        if (!empty($entity->getToUser()) and $entity->getToUser()->getProfile()->getUserGroup() and $entity->getTransactionType() == 'Credit'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertUserAccount($entity->getToUser()->getProfile());
            $transaction->setSubAccountHead($subAccount);
        }
        if(!empty($entity->getTransactionMethod()) and $entity->getTransactionMethod()->getId() == 2 and $entity->getTransactionType() == 'Debit' ){

            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);

        }elseif(!empty($entity->getTransactionMethod()) and $entity->getTransactionMethod()->getId() == 3 and $entity->getTransactionType() == 'Debit' ){

            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
        }
        $this->_em->persist($transaction);
        $this->_em->flush();

        return $transaction;

    }

    public function insertAccountJournalCreditTransaction(AccountJournal $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountJournal($entity);
        $transaction->setProcessHead('Journal');
        $transaction->setProcess($entity->getAccountHeadCredit()->getParent()->getName());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $transaction->setAccountHead($entity->getAccountHeadCredit());
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());

        /* Cash - Cash various */

        if ($entity->getToUser() and $entity->getToUser()->getProfile()->getUserGroup() and $entity->getTransactionType() == 'Debit'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertUserAccount($entity->getToUser()->getprofile());
            $transaction->setSubAccountHead($subAccount);
        }
        if(!empty($entity->getTransactionMethod()) and $entity->getTransactionMethod()->getId() == 2 and $entity->getTransactionType() == 'Credit' ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
        }elseif(!empty($entity->getTransactionMethod()) and $entity->getTransactionMethod()->getId() == 3 and $entity->getTransactionType() == 'Credit' ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);

        }
        $this->_em->persist($transaction);
        $this->_em->flush();

        return $transaction;

    }

	public function insertAccountBalanceTransferTransaction(AccountBalanceTransfer $journal)
	{
		$this->insertAccountBalanceDebitTransaction($journal);
		$this->insertAccountBalanceCreditTransaction($journal);
	}


    public function insertAccountBalanceDebitTransaction(AccountBalanceTransfer $entity)
	{

		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setProcessHead('Contra Account');
		$transaction->setProcess('Current Assets');
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setUpdated($entity->getUpdated());
        /* Cash - Cash various */
        if($entity->getToTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getToAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getToTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getToAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getToTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }
		$transaction->setAmount($entity->getAmount());
		$transaction->setDebit($entity->getAmount());
		if(!empty($entity->getBranches())){
			$transaction->setBranches($entity->getBranches());
		}
		$this->_em->persist($transaction);
		$this->_em->flush();

		return $transaction;

	}

	public function insertAccountBalanceCreditTransaction(AccountBalanceTransfer $entity)
	{

		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setProcessHead('Contra Account');
		$transaction->setProcess('Current Assets');
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setUpdated($entity->getUpdated());
        /* Cash - Cash various */
        if($entity->getFromTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getFromAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getFromTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getFromAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getFromTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }
		$transaction->setAmount('-'.$entity->getAmount());
		$transaction->setCredit($entity->getAmount());
		if(!empty($entity->getBranches())){
			$transaction->setBranches($entity->getBranches());
		}
		$this->_em->persist($transaction);
		$this->_em->flush();
		return $transaction;

	}

	public function purchaseTransaction(Purchase $purchase,$accountPurchase,$source='')
    {
        $this->insertInventoryAsset($purchase,$accountPurchase);
        $this->insertPurchaseCash($purchase,$accountPurchase);
        $this->insertPurchaseAccountPayable($purchase,$accountPurchase);
    }


    private function insertInventoryAsset($purchase,$accountPurchase)
    {

        $amount = $purchase->getTotalAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($purchase->getInventoryConfig()->getGlobalOption());
        $transaction->setProcessHead('Purchase');
        $transaction->setProcess('Inventory Assets');
        $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
        $transaction->setUpdated($accountPurchase->getUpdated());
        /* Inventory Assets - Purchase Goods Received account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();


    }

    private function insertPurchaseCash(Purchase $purchase,AccountPurchase $accountPurchase)
    {

        $amount = $purchase->getPaymentAmount();
        if($amount > 0) {

            $transaction = new Transaction();
            $transaction->setGlobalOption($purchase->getInventoryConfig()->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Cash');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());

            /* Cash - Cash various */
            if($purchase->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($purchase->getAccountBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($purchase->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($purchase->getAccountMobileBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($purchase->getTransactionMethod()->getId() == 1 ){
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }


            $transaction->setAmount('-' . $amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }
    }

    private function insertPurchaseAccountPayable(Purchase $purchase, AccountPurchase $accountPurchase)
    {

        $amount = $purchase->getDueAmount();
        if($amount > 0){
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountPurchase->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Current Liabilities');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());
            /* Current Liabilities-Purchase Account payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertVendorOpeningTransaction(AccountPurchase $entity)
    {

    	$transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Opening Liabilities');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Current Liabilities');
        /* Current Liabilities - Account Payable Payment */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
        /* ==== Sub Account set ====*/
        if($entity->getGlobalOption()->getMainApp()->getSlug() == 'miss'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($entity->getMedicineVendor());
        }elseif ($entity->getGlobalOption()->getMainApp()->getSlug() == 'inventory'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($entity->getVendor());
        }else{
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($entity->getAccountVendor());
        }
        $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount('-'.$entity->getPurchaseAmount());
        $transaction->setCredit($entity->getPurchaseAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

	    $transaction = new Transaction();
	    $transaction->setGlobalOption($entity->getGlobalOption());
	    $transaction->setAccountRefNo($entity->getAccountRefNo());
	    $transaction->setProcessHead('Opening Liabilities');
	    $transaction->setUpdated($entity->getUpdated());
	    $transaction->setProcess('Inventory Assets');
	    /* Current Liabilities - Account Payable Payment */
	    $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setSubAccountHead($subAccount);
	    $transaction->setAmount($entity->getPurchaseAmount());
	    $transaction->setDebit($entity->getPurchaseAmount());
	    $this->_em->persist($transaction);
	    $this->_em->flush();

    }

    public function insertPurchaseVendorTransaction(AccountPurchase $entity)
    {
        $this->insertPurchaseCashCreditTransaction($entity);
        $this->insertPurchaseLiabilityDebitTransaction($entity);
    }

    public function insertPurchaseCashCreditTransaction(AccountPurchase $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Purchase');
        $transaction->setUpdated($entity->getUpdated());

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }
        if($entity->getGlobalOption()->getMainApp()->getSlug() == 'miss'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($entity->getMedicineVendor());
        }elseif ($entity->getGlobalOption()->getMainApp()->getSlug() == 'inventory'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($entity->getVendor());
        }else{
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($entity->getAccountVendor());
        }
     //   $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertPurchaseLiabilityDebitTransaction(AccountPurchase $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Purchase');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Current Liabilities');
        /* Current Liabilities - Account Payable Payment */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
        /* ==== Sub Account set ==== */
        if($entity->getGlobalOption()->getMainApp()->getSlug() == 'miss'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($entity->getMedicineVendor());
        }elseif ($entity->getGlobalOption()->getMainApp()->getSlug() == 'inventory'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($entity->getVendor());
        }else{
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($entity->getAccountVendor());
        }
        $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount($entity->getPayment());
        $transaction->setDebit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function purchaseReturnTransaction($entity,$accountPurchaseReturn)
    {

        $this->insertPurchaseReturn($entity,$accountPurchaseReturn);
        $this->insertPurchaseReturnAccountReceivable($entity,$accountPurchaseReturn);

    }

    private function insertPurchaseReturn(PurchaseReturn $entity,AccountPurchaseReturn $accountPurchaseReturn)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchaseReturn->getGlobalOption());
        $transaction->setAccountRefNo($accountPurchaseReturn->getAccountRefNo());
        $transaction->setProcessHead('PurchaseReturn');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Goods');
        /* Inventory Assets-Purchase Return account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertPurchaseReturnAccountReceivable(PurchaseReturn $entity,AccountPurchaseReturn $accountPurchaseReturn)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchaseReturn->getGlobalOption());
        $transaction->setAccountRefNo($accountPurchaseReturn->getAccountRefNo());
        $transaction->setProcessHead('PurchaseReturn');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcess('Cash');
        /* Assets Account - Account Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function salesTransaction($entity,$accountSales)
    {
        $this->insertSalesItem($entity,$accountSales);
        $this->insertSalesProfit($entity,$accountSales);
        $this->insertSalesCash($entity,$accountSales);
        $this->insertSalesAccountReceivable($entity,$accountSales);
        $this->insertSalesVatAccountPayable($entity,$accountSales);
    }

    public function resetSalesTransaction($option , $entity, $accountSales)
    {
	    $this->salesTransaction($entity,$accountSales);
    }

    private function insertSalesItem(Sales $entity , AccountSales $accountSales)
    {
        $amount =  $entity->getPurchasePrice();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesProfit(Sales $entity , AccountSales $accountSales)
    {
        $amount =  $entity->getProfit();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Current Liabilities');
        /* Sales Revenue - Sales Profit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(60));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesCash(Sales $entity , AccountSales $accountSales)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                if($accountSales->getAccountBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                if($accountSales->getAccountMobileBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertSalesAccountReceivable(Sales $entity, AccountSales $accountSales)
    {

       $amount = $entity->getDue();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertSalesVatAccountPayable(Sales $entity, AccountSales $accountSales)
    {

         $amount = $entity->getVat();
         if($amount > 0){

             $transaction = new Transaction();
             $transaction->setGlobalOption($accountSales->getGlobalOption());
             if(!empty($accountSales->getBranches())){
                 $transaction->setBranches($accountSales->getBranches());
             }
             $transaction->setAccountRefNo($accountSales->getAccountRefNo());
             $transaction->setProcessHead('Sales');
             $transaction->setProcess('AccountPayable');
             /* Current Liabilities - Sales Vat & Tax */
             $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
             $transaction->setAmount('-'.$amount);
             $transaction->setCredit($amount);
             $this->_em->persist($transaction);
             $this->_em->flush();

        }

    }



    public function salesReturnTransaction(SalesReturn $entity, AccountSales $accountSales)
    {
        $this->insertSalesReturnDebit($entity,$accountSales);
        $this->insertSalesReturnCredit($entity,$accountSales);
    }

    private function insertSalesReturnDebit(SalesReturn $entity, AccountSales $accountSales)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setProcessHead('SalesReturn');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales Return Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
        $transaction->setAmount($entity->getTotal());
        $transaction->setDebit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertSalesReturnCredit(SalesReturn $entity, AccountSales $accountSales)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('SalesReturn');
        $transaction->setProcess('Cash');
        /* Cash - Sales Return Payment Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));
        $transaction->setAmount('-'.$entity->getTotal());
        $transaction->setCredit($entity->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function salesAdjustmentTransaction(AccountSalesAdjustment $entity)
    {
        $this->insertSalesAdjustmentDebit($entity);
        $this->insertSalesAdjustmentCredit($entity);
    }

    private function insertSalesAdjustmentDebit(AccountSalesAdjustment $entity)
    {

        $amount = $entity->getSales();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($entity->getGlobalOption());
            if(!empty($entity->getBranches())){
                $transaction->setBranches($entity->getBranches());
            }
            $transaction->setAccountRefNo($entity->getAccountRefNo());
            $transaction->setProcessHead('SalesAdjustment');
            $transaction->setUpdated($entity->getUpdated());
            /* Cash - Cash various */
            if($entity->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($entity->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($entity->getTransactionMethod()->getId() == 1 ){
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }

    }

    private function insertSalesAdjustmentCredit(AccountSalesAdjustment $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('SalesAdjustment');
        $transaction->setProcess('Inventory Assets');
        /* Cash - Sales Adjustment Payment Account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount('-'.$entity->getSales());
        $transaction->setCredit($entity->getSales());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }


	public function insertCustomerOutstandingTransaction(AccountSales $entity)
	{
		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setProcessHead('Sales');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setProcess('Current Asset');
		/* Current Current Asset - Account Receivable */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
		/* ==== Sub Account set ====*/
        $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCustomerAccount($entity->getCustomer());
        $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount($entity->getTotalAmount());
		$transaction->setDebit($entity->getTotalAmount());
        $this->_em->persist($transaction);
		$this->_em->flush();

		$transactionCredit = new Transaction();
        $transactionCredit->setGlobalOption($entity->getGlobalOption());
        $transactionCredit->setAccountRefNo($entity->getAccountRefNo());
        $transactionCredit->setProcessHead('Sales');
        $transactionCredit->setUpdated($entity->getUpdated());
		$transactionCredit->setProcess('Long Term Liabilities');
		/* Current Current Asset - Account Receivable */
		$transactionCredit->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(49));
        /* ==== Sub Account set ====*/
        $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCustomerAccount($entity->getCustomer());
        $transactionCredit->setSubAccountHead($subAccount);
		$transactionCredit->setAmount('-'.$entity->getTotalAmount());
		$transactionCredit->setCredit($entity->getTotalAmount());
		$this->_em->persist($transactionCredit);
		$this->_em->flush();

	}

	public function insertCustomerDiscountTransaction(AccountSales $entity)
	{
		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setProcessHead('Sales');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setProcess('Miscellaneous');
		/* Current Current Asset - Account Receivable */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(56));
		$transaction->setAmount($entity->getAmount());
		$transaction->setDebit($entity->getAmount());
		$this->_em->persist($transaction);
		$this->_em->flush();

		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setProcessHead('Sales');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setProcess('Current Asset');
		/* Current Current Asset - Account Receivable */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        /* ==== Sub Account set ====*/
        $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCustomerAccount($entity->getCustomer());
        $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount('-'.$entity->getAmount());
		$transaction->setCredit($entity->getAmount());
		$this->_em->persist($transaction);
		$this->_em->flush();

	}

	public function insertVendorDiscountTransaction(AccountPurchase $entity)
	{
		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setProcessHead('Discount form Vendor');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setProcess('Current Liabilities');
		/* Current Current Asset - Account Receivable */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
        /* ==== Sub Account set ====*/
        if($entity->getGlobalOption()->getMainApp()->getSlug() == 'miss'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($entity->getMedicineVendor());
        }elseif ($entity->getGlobalOption()->getMainApp()->getSlug() == 'inventory'){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($entity->getVendor());
        }else{
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($entity->getAccountVendor());
        }
        $transaction->setSubAccountHead($subAccount);
		$transaction->setAmount($entity->getPayment());
		$transaction->setDebit($entity->getPayment());
		$this->_em->persist($transaction);
		$this->_em->flush();

		$transaction = new Transaction();
		$transaction->setGlobalOption($entity->getGlobalOption());
		$transaction->setAccountRefNo($entity->getAccountRefNo());
		$transaction->setProcessHead('Discount form Vendor');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setProcess('Current Liabilities');
		/* Current Current Asset - Account Receivable */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(59));
		$transaction->setAmount('-'.$entity->getPayment());
		$transaction->setCredit($entity->getPayment());
		$this->_em->persist($transaction);
		$this->_em->flush();

	}


	public function onlineOrderTransaction($entity,$onlineOrder)
    {
        $this->insertOnlineOrderItem($entity,$onlineOrder);
        $this->insertOnlineOrderCash($entity,$onlineOrder);
        $this->insertOnlineOrderAccountReceivable($entity,$onlineOrder);
        $this->insertOnlineOrderAccountPayable($entity,$onlineOrder);
        $this->insertOnlineOrderVatAccountPayable($entity,$onlineOrder);

    }

    private function insertOnlineOrderItem($entity , AccountOnlineOrder $onlineOrder)
    {

        $amount =  $entity->getGrandTotalAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($onlineOrder->getGlobalOption());
        $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
        $transaction->setProcessHead('Online');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertOnlineOrderCash($entity,$onlineOrder)
    {
        $amount = $entity->getPaidAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');

            $transaction->setUpdated($entity->getUpdated());
            /* Cash - Cash various */
            if($entity->getTransactionMethod()->getId() == 1 ){
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }elseif($entity->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $transaction->setProcess('Current Assets');
            }if($entity->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $transaction->setProcess('Current Assets');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertOnlineOrderAccountReceivable($entity,$accountSales)
    {

        $amount = $entity->getDueAmount();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertOnlineOrderAccountPayable($entity,$onlineOrder)
    {

        $amount = $entity->getReturnAmount();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');
            $transaction->setProcess('AccountPayable');
            /* Assets Account - Account Payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(22));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertOnlineOrderVatAccountPayable($entity,$onlineOrder)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($onlineOrder->getGlobalOption());
            $transaction->setAccountRefNo($onlineOrder->getAccountRefNo());
            $transaction->setProcessHead('Online');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    public function insertAccountSalesTransaction(AccountSales $entity){

        $this->insertAccountSalesDebitTransaction($entity);
        $this->insertAccountSalesCreditTransaction($entity);

    }

    public function  insertAccountSalesDebitTransaction(AccountSales $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setUpdated($entity->getUpdated());

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');

        }
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertAccountSalesCreditTransaction(AccountSales $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setProcess('Current Asset');
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setProcessHead('Sales');
        /* Sales Revenue - Sales Due Payment credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        /* ==== Sub Account set ====*/
        $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCustomerAccount($entity->getCustomer());
        $transaction->setSubAccountHead($subAccount);
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertPettyCashTransaction($entity){

        $this->insertPettyCashDebitTransaction($entity);
        $this->insertPettyCashCreditTransaction($entity);

    }

    public function  insertPettyCashDebitTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash');
        $transaction->setProcess('Account Receivable');
        /* Cash - Petty Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function  insertPettyCashCreditTransaction($entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash');
        $transaction->setProcess('Cash Credit');
        /* Cash - Cash credit */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashTransaction($entity)
    {
        $this->returnPettyCashDebitTransaction($entity);
        $this->returnPettyCashCreditTransaction($entity);
        $this->_em->getRepository('AccountingBundle:AccountCash')->insertPettyCashReturn($entity);

    }

    public function returnPettyCashDebitTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash Return');
        $transaction->setProcess('Cash');
        /* Cash - Cash various */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function returnPettyCashCreditTransaction($entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Petty Cash Return');
        $transaction->setProcess('Account Receivable');
        /* Cash - Petty Cash */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(41));
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertExpenditureTransaction($entity)
    {
        $this->insertExpenditureDebitTransaction($entity);
        $this->insertExpenditureCreditTransaction($entity);
    }

    public function insertExpenditureDebitTransaction(Expenditure $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Expenditure');
        $transaction->setProcess('Operating Expense');
        /* Cash - Cash credit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertExpenditureCreditTransaction(Expenditure $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        if(!empty($entity->getBranches())){
            $transaction->setBranches($entity->getBranches());
        }
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('Expenditure');

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }

        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertPurchaseExpenditureTransaction($entity)
    {
        $this->insertPurchaseExpenditureDebitTransaction($entity);
        $this->insertPurchaseExpenditureCreditTransaction($entity);
    }

    public function insertPurchaseExpenditureDebitTransaction(AccountPurchase $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('PurchaseExpenditure');
        $transaction->setProcess('Operating Expense');
        /* Cash - Cash credit */
        $transaction->setAccountHead($entity->getAccountHead());
        $transaction->setAmount($entity->getPayment());
        $transaction->setDebit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertPurchaseExpenditureCreditTransaction(AccountPurchase $entity)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setProcessHead('PurchaseExpenditure');

        /* Cash - Cash various */
        if($entity->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($entity->getTransactionMethod()->getId() == 1 ){
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }

        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryTransaction(PaymentSalary $paymentSalary)
    {
            $this->insertSalaryDebitCashTransaction($paymentSalary);
            $this->insertSalaryCreditCashTransaction($paymentSalary);
    }

    public function insertSalaryDebitCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($paymentSalary->getGlobalOption());
        $transaction->setAccountRefNo($paymentSalary->getAccountRefNo());
        $transaction->setProcessHead('PaymentSalary');
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(25));
        $transaction->setProcess('General & Administrative expenses');
        /* Cash - Cash credit */
        $transaction->setAmount($paymentSalary->getTotalAmount());
        $transaction->setDebit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertSalaryCreditCashTransaction($paymentSalary)
    {
        $transaction = new Transaction();
        $transaction->setGlobalOption($paymentSalary->getGlobalOption());
        $transaction->setAccountRefNo($paymentSalary->getAccountRefNo());
        $transaction->setProcessHead('PaymentSalary');

        /* Cash - Cash various */
        if($paymentSalary->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($paymentSalary->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($paymentSalary->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($paymentSalary->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }else{
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }

        /* Cash - Cash various */
        $transaction->setAmount('-'.$paymentSalary->getTotalAmount());
        $transaction->setCredit($paymentSalary->getTotalAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    public function insertDamageTransaction(Damage $damage)
    {
        $this->insertDamageDebitTransaction($damage);
        $this->insertDamageCreditTransaction($damage);

    }

    public function insertDamageDebitTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(48);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Long Term Liabilities');
        /* Cash - Cash various */
        $transaction->setAmount($damage->getTotal());
        $transaction->setDebit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function insertDamageCreditTransaction($damage)
    {
        $transaction = new Transaction();
        $globalOption = $damage->getInventoryConfig()->getGlobalOption();
        $accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(47);
        $transaction->setGlobalOption($globalOption);
        $transaction->setAccountHead($accountHead);
        $transaction->setProcess('Inventory Assets');
        /* Cash - Long Term Liabilities	 */
        $transaction->setAmount('-'.$damage->getTotal());
        $transaction->setCredit($damage->getTotal());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    private  function getNetBalance($inventory)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->addSelect('e.balance AS balance');
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('e.id','desc');
        $qb->setMaxResults(1);
        $netTotal = $qb->getQuery()->getSingleResult();
        if(empty($netTotal) > 0 ){
            return 0;
        }else{
            return $netTotal;
        }

    }

    /** =========================== HOSPITAL MANAGEMENT SYSTEM    =========================== */


    public function hmsSalesTransaction(InvoiceTransaction $entity,$accountSales)
    {
        $this->insertHmsCashDebit($entity,$accountSales);
        $this->insertHmsCashCredit($entity,$accountSales);
        if($entity->getVat() > 0){
            $this->insertHmsSalesVatAccountPayable($entity,$accountSales);
        }
    }

    private function insertHmsCashDebit(InvoiceTransaction $entity , AccountSales $accountSales)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales Advance');
            $transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertHmsCashCredit(InvoiceTransaction $entity , AccountSales $accountSales)
    {

        $transaction = new Transaction();
	    $transaction->setGlobalOption($accountSales->getGlobalOption());
	    if(!empty($accountSales->getBranches())){
		    $transaction->setBranches($accountSales->getBranches());
	    }
	    $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales Advance');
        $transaction->setProcess('AccountPayable');
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }

    private function insertHmsSalesVatAccountPayable(InvoiceTransaction $entity, AccountSales $accountSales)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    public function hmsSalesFinal(Invoice $entity,$accountSales)
    {
        $this->insertHmsFinalCashDebit($accountSales);
        $this->insertHmsFinalCashCredit($accountSales);
    }

    private function insertHmsFinalCashDebit(AccountSales $accountSales)
    {
        $amount = $accountSales->getTotalAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($accountSales->getUpdated());
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertHmsFinalCashCredit( AccountSales $accountSales)
    {
        $amount = $accountSales->getTotalAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Operating Revenue');
        $transaction->setUpdated($accountSales->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }


    /** =========================== HOSPITAL MANAGEMENT SYSTEM    =========================== */

    public function restaurantSalesTransaction(\Appstore\Bundle\RestaurantBundle\Entity\Invoice $entity , $accountSales)
    {
        $this->insertRestaurantCashDebit($entity,$accountSales);
        $this->insertRestaurantCashCredit($entity,$accountSales);
        if($entity->getVat() > 0){
            $this->insertRestaurantSalesVatAccountPayable($entity,$accountSales);
        }
    }

    private function insertRestaurantCashDebit(\Appstore\Bundle\RestaurantBundle\Entity\Invoice $entity , AccountSales $accountSales)
    {
        $amount = $entity->getPayment();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertRestaurantCashCredit(\Appstore\Bundle\RestaurantBundle\Entity\Invoice $entity , AccountSales $accountSales)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Operating Revenue');
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }

    private function insertRestaurantSalesVatAccountPayable(\Appstore\Bundle\RestaurantBundle\Entity\Invoice $entity, AccountSales $accountSales)
    {

        $amount = $entity->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }


    /* ==================== GLOBAL SALES & PURCHASE =======================================*/


    public function salesGlobalTransaction(AccountSales $accountSales)
    {
        $this->insertGlobalCashDebit($accountSales);
        $this->insertGlobalGoodsCredit($accountSales);
        $this->insertGlobalSalesAccountReceivable($accountSales);
        if($accountSales->getVat() > 0){
            $this->insertGlobalSalesVatAccountPayable($accountSales);
        }
    }

    private function insertGlobalCashDebit(AccountSales $accountSales)
    {
        $amount = $accountSales->getAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($accountSales->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod() and $accountSales->getTransactionMethod()->getSlug() == "bank" ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                if($accountSales->getAccountBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod() and $accountSales->getTransactionMethod()->getSlug() == "mobile" ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                if($accountSales->getAccountMobileBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertGlobalGoodsCredit(AccountSales $accountSales)
    {

        $amount = $accountSales->getTotalAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Goods');
        /* Sales Revenue - Sales goods account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();

    }

    private function insertGlobalSalesAccountReceivable(AccountSales $accountSales)
    {

        $amount = ($accountSales->getTotalAmount() - $accountSales->getAmount());
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(4));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCustomerAccount($accountSales->getCustomer());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

    private function insertGlobalSalesVatAccountPayable(AccountSales $accountSales)
    {

        $amount = $accountSales->getVat();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Sales');
            $transaction->setProcess('AccountPayable');
            /* Current Liabilities - Sales Vat & Tax */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }

    }

	public function salesReturnGlobalCashTransaction(AccountJournal $accountJournal,$source='')
	{
		$this->insertGlobalSalesReturnCashAsset($accountJournal);
		$this->insertGlobalSalesReturnCash($accountJournal);
	}

	private function insertGlobalSalesReturnCashAsset(AccountJournal $account)
	{

		$amount =  $account->getAmount();
		$transaction = new Transaction();
		$transaction->setGlobalOption($account->getGlobalOption());
		$transaction->setAccountRefNo($account->getAccountRefNo());
		$transaction->setProcessHead('Sales Return');
		$transaction->setProcess('Goods');
		/* Sales Revenue - Sales Return Account */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
		$transaction->setAmount($amount);
		$transaction->setDebit($amount);
		$this->_em->persist($transaction);
		$this->_em->flush();


	}

	private function insertGlobalSalesReturnCash(AccountJournal $account)
	{

		$amount = $account->getAmount();
		if($amount > 0){

			$transaction = new Transaction();
			$transaction->setGlobalOption($account->getGlobalOption());
			$transaction->setAccountRefNo($account->getAccountRefNo());
			$transaction->setProcessHead('SalesReturn');
			$transaction->setProcess('Cash');
			/* Cash - Sales Return Payment Account */
			$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
			$transaction->setAmount('-'.$amount);
			$transaction->setCredit($amount);
			$this->_em->persist($transaction);
			$this->_em->flush();

		}
	}


	public function salesReturnGlobalPayableTransaction(AccountSales $accountSales,$source='')
	{
		$this->insertGlobalSalesReturnAsset($accountSales);
		$this->insertGlobalSalesReturnPayable($accountSales);
	}

	private function insertGlobalSalesReturnAsset(AccountSales $accountSales)
	{

		$amount =  $accountSales->getAmount();
		$transaction = new Transaction();
		$transaction->setGlobalOption($accountSales->getGlobalOption());
		$transaction->setAccountRefNo($accountSales->getAccountRefNo());
		$transaction->setProcessHead('Sales Return');
		$transaction->setProcess('Goods');
		/* Sales Revenue - Sales Return Account */
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(34));
		$transaction->setAmount($amount);
		$transaction->setDebit($amount);
		$this->_em->persist($transaction);
		$this->_em->flush();


	}

	private function insertGlobalSalesReturnPayable(AccountSales $accountSales)
	{

		$amount = $accountSales->getAmount();
		if($amount > 0){

			$transaction = new Transaction();
			$transaction->setGlobalOption($accountSales->getGlobalOption());
			$transaction->setAccountRefNo($accountSales->getAccountRefNo());
			$transaction->setProcessHead('SalesReturn');
			$transaction->setProcess('Current Liabilities');
			/* Cash - Sales Return Payment Account */
			$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(35));
			$transaction->setAmount('-'.$amount);
			$transaction->setCredit($amount);
			$this->_em->persist($transaction);
			$this->_em->flush();

		}
	}


	public function purchaseGlobalTransaction(AccountPurchase $accountPurchase,$source='')
    {
        $this->insertGlobalInventoryAsset($accountPurchase);
	    if(!empty($accountPurchase->getTransactionMethod()) and $accountPurchase->getPayment() > 0){
	        $this->insertGlobalPurchaseCash($accountPurchase);
        }
        $this->insertGlobalPurchaseAccountPayable($accountPurchase);
    }

    private function insertGlobalInventoryAsset(AccountPurchase $accountPurchase)
    {

        $amount = $accountPurchase->getPurchaseAmount();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchase->getGlobalOption());
        $transaction->setProcessHead('Purchase');
        $transaction->setProcess('Inventory Assets');
        $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
        $transaction->setUpdated($accountPurchase->getUpdated());
        /* Inventory Assets - Purchase Goods Received account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    private function insertGlobalPurchaseCash(AccountPurchase $accountPurchase)
    {

        $amount = $accountPurchase->getPayment();
        if($amount > 0) {

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountPurchase->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Cash');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());

            /* Cash - Cash various */

            /* Cash - Cash various */
            if($accountPurchase->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                if($accountPurchase->getAccountBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountPurchase->getAccountBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }elseif($accountPurchase->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                if($accountPurchase->getAccountMobileBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountPurchase->getAccountMobileBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount('-' . $amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    private function insertGlobalPurchaseAccountPayable(AccountPurchase $accountPurchase)
    {
        $amount = ($accountPurchase->getPurchaseAmount() - $accountPurchase->getPayment());
        if($amount > 0){
            $subAccount = NULL;
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountPurchase->getGlobalOption());
            $transaction->setProcessHead('Purchase');
            $transaction->setProcess('Current Liabilities');
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setUpdated($accountPurchase->getUpdated());
            /* Current Liabilities-Purchase Account payable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));
            if($accountPurchase->getGlobalOption()->getMainApp()->getSlug() == 'miss' and $accountPurchase->getMedicineVendor()){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($accountPurchase->getMedicineVendor());
            }elseif ($accountPurchase->getGlobalOption()->getMainApp()->getSlug() == 'inventory' and $accountPurchase->getVendor()){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($accountPurchase->getVendor());
            }elseif($accountPurchase->getAccountVendor()){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($accountPurchase->getAccountVendor());
            }
            $transaction->setSubAccountHead($subAccount);
            $transaction->setAmount('-'.$amount);
            $transaction->setCredit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function purchaseReturnGlobalTransaction($accountPurchase,$source='')
    {
        $this->insertGlobalInventoryReturnAsset($accountPurchase);
        $this->insertGlobalPurchaseAccountReceivable($accountPurchase);
    }

    private function insertGlobalInventoryReturnAsset(AccountPurchase $accountPurchase)
    {

        $amount =  $accountPurchase->getPayment();
        $transaction = new Transaction();
        $transaction->setGlobalOption($accountPurchase->getGlobalOption());
        $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
        $transaction->setProcessHead('Purchase Return');
        $transaction->setProcess('InventoryAssets');
        /* Sales Revenue - Purchase Return account */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(6));
        $transaction->setAmount('-'.$amount);
        $transaction->setCredit($amount);
        $this->_em->persist($transaction);
        $this->_em->flush();


    }

    private function insertGlobalPurchaseAccountReceivable(AccountPurchase $accountPurchase)
    {

        $amount = $accountPurchase->getPayment();
        if($amount > 0){

            $transaction = new Transaction();
            $transaction->setGlobalOption($accountPurchase->getGlobalOption());
            $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
            $transaction->setProcessHead('Purchase Return');
            $transaction->setProcess('AccountReceivable');
            /* Assets Account - Account Receivable */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(13));

            if($accountPurchase->getGlobalOption()->getMainApp()->getSlug() == 'miss'){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMedicineVendorAccount($accountPurchase->getMedicineVendor());
            }elseif ($accountPurchase->getGlobalOption()->getMainApp()->getSlug() == 'inventory'){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertInventoryVendorAccount($accountPurchase->getVendor());
            }else{
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertVendorAccount($accountPurchase->getAccountVendor());
            }
            $transaction->setSubAccountHead($subAccount);
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();

        }
    }


	public function insertGlobalDamageTransaction($global,$damage)
	{
		$this->insertGlobalDamageDebitTransaction($global,$damage);
		$this->insertGlobalDamageCreditTransaction($global,$damage);

	}

	public function insertGlobalDamageDebitTransaction($globalOption,$damage)
	{
		$transaction = new Transaction();
		$accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(48);
		$transaction->setGlobalOption($globalOption);
		$transaction->setAccountHead($accountHead);
		$transaction->setProcessHead('Damage');
		$transaction->setProcess('Administrative expenses');
		/* Cash - Cash various */
		$transaction->setAmount($damage->getSubTotal());
		$transaction->setDebit($damage->getSubTotal());
		$this->_em->persist($transaction);
		$this->_em->flush();
	}

	public function insertGlobalDamageCreditTransaction($globalOption,$damage)
	{
		$transaction = new Transaction();
		$accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(6);
		$transaction->setGlobalOption($globalOption);
		$transaction->setAccountHead($accountHead);
		$transaction->setProcessHead('Damage');
		$transaction->setProcess('Inventory Assets');
		/* Cash - Long Term Liabilities	 */
		$transaction->setAmount('-'.$damage->getSubTotal());
		$transaction->setCredit($damage->getSubTotal());
		$this->_em->persist($transaction);
		$this->_em->flush();

	}


    public function purchaseCommissionTransaction($global,AccountPurchaseCommission $commission)
	{
		$this->purchaseCommissionTransactionDebit($global,$commission);
		$this->purchaseCommissionTransactionCredit($global,$commission);

	}

	public function purchaseCommissionTransactionDebit($globalOption, AccountPurchaseCommission $commission)
	{
		$transaction = new Transaction();
		$transaction->setGlobalOption($globalOption);
		$transaction->setProcessHead('Purchase Commission');

        if($commission->getTransactionMethod()->getId() == 2 ){
            /* Current Asset Bank Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($commission->getAccountBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }elseif($commission->getTransactionMethod()->getId() == 3 ){
            /* Current Asset Mobile Account Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($commission->getAccountMobileBank());
            $transaction->setSubAccountHead($subAccount);
            $transaction->setProcess('Current Assets');
        }else{
            /* Cash - Cash Debit */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
            $transaction->setProcess('Cash');
        }
		$transaction->setAmount($commission->getAmount());
		$transaction->setDebit($commission->getAmount());
		$this->_em->persist($transaction);
		$this->_em->flush();
	}

	public function purchaseCommissionTransactionCredit($globalOption,AccountPurchaseCommission $commission)
	{
		$transaction = new Transaction();
		$accountHead = $this->_em->getRepository('AccountingBundle:AccountHead')->find(6);
		$transaction->setGlobalOption($globalOption);
		$transaction->setAccountHead($accountHead);
		$transaction->setProcessHead('Purchase Commission');
		$transaction->setProcess('Operating Revenue');
		/* Cash - Long Term Liabilities	 */
		$transaction->setAmount('-'.$commission->getAmount());
		$transaction->setCredit($commission->getAmount());
		$this->_em->persist($transaction);
		$this->_em->flush();

	}


    /** =========================== HOSPITAL MANAGEMENT SYSTEM  =========================== */

    public function approvedDeleteRecord($entity,$process){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:Transaction','e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $entity->getGlobalOption()->getId());
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        $qb->andWhere("e.accountRefNo = :accountRefNo");
        $qb->setParameter('accountRefNo', $entity->getAccountRefNo());
        $result = $qb->getQuery()->getResult();
        foreach ($result as $row){
            $this->_em->remove($row);
            $this->_em->flush();
        }

    }

    /** ======================== DMS ===============================*/

    public function dmsTransaction(DmsTreatmentPlan $treatmentPlan)
    {
        $this->insertDmsSalesCashDebit($treatmentPlan);
        $this->insertDmsCashCredit($treatmentPlan);
    }

    private function insertDmsSalesCashDebit(DmsTreatmentPlan $entity)
    {
        $amount = $entity->getPayment();
        $invoice = $entity->getDmsInvoice();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($invoice->getDmsConfig()->getGlobalOption());
            $transaction->setAccountRefNo($invoice->getInvoice());
            $transaction->setProcessHead('Sales');
            $transaction->setUpdated($entity->getUpdated());

            if($entity->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($entity->getAccountBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }elseif($entity->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($entity->getAccountMobileBank());
                $transaction->setSubAccountHead($subAccount);
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }

    public function insertDmsCashCredit(DmsTreatmentPlan $entity)
    {

        $invoice = $entity->getDmsInvoice();
        $transaction = new Transaction();
        $transaction->setGlobalOption($invoice->getDmsConfig()->getGlobalOption());
        $transaction->setAccountRefNo($invoice->getInvoice());

        $transaction->setProcessHead('Sales');
        $transaction->setProcess('Operating Revenue');
        $transaction->setAccountRefNo($invoice->getInvoice());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
        $transaction->setAmount('-'.$entity->getPayment());
        $transaction->setCredit($entity->getPayment());
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }


	/** =========================== HOSPITAL MANAGEMENT SYSTEM    =========================== */
	public function hotelSalesTransaction(HotelInvoiceTransaction $entity,$accountSales)
	{
		$this->insertHotelCashDebit($entity,$accountSales);
		$this->insertHotelCashCredit($entity,$accountSales);
		if($entity->getVat() > 0){
			$this->insertHotelSalesVatAccountPayable($entity,$accountSales);
		}
	}

	private function insertHotelCashDebit(HotelInvoiceTransaction $entity , AccountSales $accountSales)
	{
		$amount = $entity->getPayment();
		if($amount > 0) {
			$transaction = new Transaction();
			$transaction->setGlobalOption($accountSales->getGlobalOption());
			if(!empty($accountSales->getBranches())){
				$transaction->setBranches($accountSales->getBranches());
			}
			$transaction->setAccountRefNo($accountSales->getAccountRefNo());
			$transaction->setProcessHead('Sales');
			$transaction->setUpdated($entity->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                if($accountSales->getAccountBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                if($accountSales->getAccountMobileBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Cash');
            }

			$transaction->setAmount($amount);
			$transaction->setDebit($amount);
			$this->_em->persist($transaction);
			$this->_em->flush();
		}
	}

	public function insertHotelCashCredit(HotelInvoiceTransaction $entity , AccountSales $accountSales)
	{

		$transaction = new Transaction();
		$transaction->setGlobalOption($accountSales->getGlobalOption());
		if(!empty($accountSales->getBranches())){
			$transaction->setBranches($accountSales->getBranches());
		}
		$transaction->setAccountRefNo($accountSales->getAccountRefNo());
		$transaction->setProcessHead('Sales');
		$transaction->setProcess('Operating Revenue');
		$transaction->setUpdated($entity->getUpdated());
		$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
		$transaction->setAmount('-'.$entity->getPayment());
		$transaction->setCredit($entity->getPayment());
		$this->_em->persist($transaction);
		$this->_em->flush();
		return $transaction;

	}

	private function insertHotelSalesVatAccountPayable(HotelInvoiceTransaction $entity, AccountSales $accountSales)
	{

		$amount = $entity->getVat();
		if($amount > 0){

			$transaction = new Transaction();
			$transaction->setGlobalOption($accountSales->getGlobalOption());
			if(!empty($accountSales->getBranches())){
				$transaction->setBranches($accountSales->getBranches());
			}
			$transaction->setAccountRefNo($accountSales->getAccountRefNo());
			$transaction->setProcessHead('Sales');
			$transaction->setProcess('AccountPayable');
			/* Current Liabilities - Sales Vat & Tax */
			$transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(16));
			$transaction->setAmount('-'.$amount);
			$transaction->setCredit($amount);
			$this->_em->persist($transaction);
			$this->_em->flush();

		}

	}

    public function itemDistributionTransaction($purchase,$accountPurchase,$source='')
    {

        $this->insertGlobalPurchaseAccountPayable($accountPurchase);
        $this->insertFixedAssets($purchase,$accountPurchase);
    }

    public function insertFixedAssets(Receive $purchase,$accountPurchase)
    {
        /* @var $receiveItem ReceiveItem */

        foreach ($purchase->getReceiveItems() as $receiveItem) {
            $item = $receiveItem->getPurchaseItem();
            if($item->getItem()->getCategory()->getCategoryType() == "Assets"){

                $accountHead = $item->getItem()->getCategory()->getAccountHead();
                $transaction = new Transaction();
                $transaction->setGlobalOption($accountPurchase->getGlobalOption());
                $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
                $transaction->setProcessHead('Assets');
                $transaction->setProcess('Depreciation');
                /* Assets Account - Capital Assets */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find($accountHead));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCapitalAssetsAccount($accountPurchase->getGlobalOption(),$item);
                $transaction->setSubAccountHead($subAccount);
                $transaction->setAmount($item->getSubTotal());
                $transaction->setDebit($item->getSubTotal());
                $this->_em->persist($transaction);
                $this->_em->flush();

            }elseif($item->getItem()->getCategory()->getCategoryType() == "Inventory"){

                $accountHead = $item->getItem()->getCategory()->getAccountHead();
                $transaction = new Transaction();
                $transaction->setGlobalOption($accountPurchase->getGlobalOption());
                $transaction->setAccountRefNo($accountPurchase->getAccountRefNo());
                $transaction->setProcessHead('Expense');
                $transaction->setProcess('Expense');
                /* Assets Account - Capital Assets */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find($accountHead));
                $transaction->setAmount($item->getSubTotal());
                $transaction->setDebit($item->getSubTotal());
                $this->_em->persist($transaction);
                $this->_em->flush();
            }

        }

    }

    public function openingItemDistributionTransaction($purchase,$journal)
    {
        $this->insertOpeningFixedAssets($purchase,$journal);
        $this->insertPurchaseItemJournalCreditTransaction($journal);
    }


    public function insertOpeningFixedAssets(\Appstore\Bundle\AssetsBundle\Entity\PurchaseItem $item,AccountJournal $journal)
    {

        if($item->getItem()->getCategory()->getCategoryType() == "Assets"){

            $accountHead = $item->getItem()->getCategory()->getAccountHead();
            $transaction = new Transaction();
            $transaction->setGlobalOption($journal->getGlobalOption());
            $transaction->setAccountRefNo($journal->getAccountRefNo());
            $transaction->setProcessHead('Assets');
            $transaction->setProcess('Depreciation');
            /* Assets Account - Capital Assets */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find($accountHead));
            if($item->getStakeholder()){
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertCapitalAssetsAccount($journal->getGlobalOption(),$item);
                $transaction->setSubAccountHead($subAccount);
            }
            $transaction->setAmount($item->getSubTotal());
            $transaction->setDebit($item->getSubTotal());
            $this->_em->persist($transaction);
            $this->_em->flush();

        }elseif($item->getItem()->getCategory()->getCategoryType() == "Inventory"){

            $accountHead = $item->getItem()->getCategory()->getAccountHead();
            $transaction = new Transaction();
            $transaction->setGlobalOption($journal->getGlobalOption());
            $transaction->setAccountRefNo($journal->getAccountRefNo());
            $transaction->setProcessHead('Expense');
            $transaction->setProcess('Expense');
            /* Assets Account - Capital Assets */
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find($accountHead));
            $transaction->setAmount($item->getSubTotal());
            $transaction->setDebit($item->getSubTotal());
            $this->_em->persist($transaction);
            $this->_em->flush();
        }

    }

    public function insertPurchaseItemJournalCreditTransaction(AccountJournal $entity)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setProcessHead('Journal');
        $transaction->setProcess($entity->getAccountHeadCredit()->getParent()->getName());
        $transaction->setAccountRefNo($entity->getAccountRefNo());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAccountHead($entity->getAccountHeadCredit());
        $transaction->setAmount('-'.$entity->getAmount());
        $transaction->setCredit($entity->getAmount());

        /* Current Asset Capital Investment */
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(49));
        if($entity->getToUser()){
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertUserAccount($entity->getToUser()->getprofile());
            $transaction->setSubAccountHead($subAccount);
        }
        $this->_em->persist($transaction);
        $this->_em->flush();
        return $transaction;

    }

    public function insertDepreciation(DepreciationBatch $entity,$data)
    {
        $option = $entity->getConfig()->getGlobalOption();
        $em = $this->_em;
        $transaction = new Transaction();
        $transaction->setGlobalOption($option);
        $transaction->setProcessHead('Depreciation');
        $transaction->setProcess('Depreciation');
        $transaction->setAccountRefNo($entity->getId());
        $transaction->setUpdated($entity->getUpdated());
        $transaction->setAmount($entity->getAmount());
        $transaction->setDebit($entity->getAmount());
        $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->find(42));
        $em->persist($transaction);
        $em->flush();

        foreach ($data as  $value){

            $item = $em->getRepository('AssetsBundle:Item')->find($value['itemId']);
            $accountHead = $item->getCategory()->getAccountHead();

            $transaction = new Transaction();
            $transaction->setGlobalOption($option);
            $transaction->setProcessHead('Fixed Assets');
            $transaction->setProcess($accountHead->getParent()->getName());
            $transaction->setAccountRefNo($entity->getId());
            $transaction->setUpdated($entity->getUpdated());
            $transaction->setAccountHead($accountHead);
            $transaction->setAmount('-'.$value['amount']);
            $transaction->setCredit($value['amount']);
            /* Fixed Assets */
            $transaction->setSubAccountHead($item->getAccountHead());
            $em->persist($transaction);
            $em->flush();
        }
    }
    /** =========================== SERVICE MANAGEMENT SYSTEM    =========================== */

    public function serviceTransaction($accountSales)
    {
        $this->insertServiceCashDebit($accountSales);
        $this->insertServiceCashCredit($accountSales);
        $this->insertGlobalSalesAccountReceivable($accountSales);
    }

    private function insertServiceCashDebit(AccountSales $accountSales)
    {
        $amount = $accountSales->getAmount();
        if($amount > 0) {
            $transaction = new Transaction();
            $transaction->setGlobalOption($accountSales->getGlobalOption());
            if(!empty($accountSales->getBranches())){
                $transaction->setBranches($accountSales->getBranches());
            }
            $transaction->setAccountRefNo($accountSales->getAccountRefNo());
            $transaction->setProcessHead('Service');
            $transaction->setUpdated($accountSales->getUpdated());

            /* Cash - Cash various */
            if($accountSales->getTransactionMethod()->getId() == 2 ){
                /* Current Asset Bank Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(3));
                if($accountSales->getAccountBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankAccount($accountSales->getAccountBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }elseif($accountSales->getTransactionMethod()->getId() == 3 ){
                /* Current Asset Mobile Account Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(10));
                if($accountSales->getAccountMobileBank()){
                    $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertMobileBankAccount($accountSales->getAccountMobileBank());
                    $transaction->setSubAccountHead($subAccount);
                }
                $transaction->setProcess('Current Assets');
            }else{
                /* Cash - Cash Debit */
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(30));
                $transaction->setProcess('Current Assets');
            }
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $this->_em->persist($transaction);
            $this->_em->flush();
        }
    }
    public function insertServiceCashCredit(AccountSales $accountSales)
    {

        $transaction = new Transaction();
        $transaction->setGlobalOption($accountSales->getGlobalOption());
        if(!empty($accountSales->getBranches())){
            $transaction->setBranches($accountSales->getBranches());
        }
        $transaction->setAccountRefNo($accountSales->getAccountRefNo());
        $transaction->setProcessHead('Service');
        $transaction->setProcess('Operating Revenue');
        $transaction->setUpdated($accountSales->getUpdated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->find(8));
        $transaction->setAmount('-'.$accountSales->getAmount());
        $transaction->setCredit($accountSales->getAmount());
        $this->_em->persist($transaction);
        $this->_em->flush();
    }

    public function dailyProcessHead(User $user , $head = '', $data = [])
    {
        $option = $user->getGlobalOption()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(invoice.updated,'%d-%m-%Y') as date ,COALESCE(SUM(invoice.debit),0) as debit,COALESCE(SUM(invoice.credit),0) as credit
                FROM Transaction as invoice
                WHERE invoice.globalOption_id = :option AND MONTHNAME(invoice.updated) =:month AND YEAR(invoice.updated) =:year AND invoice.processHead =:process 
                GROUP BY date";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('option', $option);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->bindValue('process', $head);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = array();
        foreach ($results as $result){
            $arrays[$result['date']] = $result;
        }
        return $arrays;
    }

    public function insertPurchaseMonthlyTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        /* Inventory Assets*/
        $transaction = new Transaction();
        $transaction->setProcess("purchase");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'inventory')));
        $total = round($data['total']);
        $transaction->setAmount($total);
        $transaction->setDebit($total);
        $em->persist($transaction);
        $em->flush();

        /* Cash */

        if($data['amount'] > 0){

            $transaction = new Transaction();
            $transaction->setProcess("purchase");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            /* Cash - Cash various */
            if ($data['method'] == 2) {
                $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
                $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 3) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
                $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 1) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
            }
            $amount = round($data['amount']);
            $transaction->setAmount("-{$amount}");
            $transaction->setCredit($amount);
            $em->persist($transaction);
            $em->flush();
        }

        /* Payable */

        if($data['total'] > $data['amount']){
            $payable = round($data['total'] - $data['amount']);
            $em = $this->_em;
            $transaction = new Transaction();
            $transaction->setProcess("purchase");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-payable'));
            $transaction->setAccountHead($head);
            $transaction->setAmount('-'.$payable);
            $transaction->setCredit($payable);
            $em->persist($transaction);
            $em->flush();
        }
    }

    public function insertPurchaseAdvanceMonthlyTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("purchase-advance");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-payable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($amount);
        $transaction->setDebit("-{$amount}");
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("purchase-advance");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Cash - Cash various */
        if ($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertPurchaseMonthlyDueTransaction(AccountProfit $entity,$data)
    {

        $em = $this->_em;
        $amount = round($data['amount']);

        $transaction = new Transaction();
        $transaction->setProcess("purchase-due");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Cash - Cash various */
        if ($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();


        $transaction = new Transaction();
        $transaction->setProcess("purchase-due");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-payable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertPurchaseMonthlyOpeningTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $total = round($data['total']);
        $transaction = new Transaction();
        $transaction->setProcess("purchase-outstanding");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Liabilities - Account Payable Payment */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-payable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount("-{$total}");
        $transaction->setCredit($total);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("purchase-outstanding");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Liabilities - Account Payable Payment */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'inventory'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($total);
        $transaction->setDebit($total);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertPurchaseMonthlyDiscountTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("purchase-discount");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Current Asset - Account Receivable */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'account-payable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("purchase-discount");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Current Asset - Account Receivable */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'discount-received'));
        $transaction->setAccountHead($head);
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();
    }

    public function insertSalesMonthlyTransaction(AccountProfit $entity,$data)
    {

        $em = $this->_em;
        $amount = round($data['amount']);
        if($amount > 0){
            $transaction = new Transaction();
            $transaction->setProcess("sales");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            /* Cash - Cash various */
            if ($data['method'] == 2) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
                $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 3) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
                $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 1) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
            }
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $em->persist($transaction);
            $em->flush();
        }

        /* Payable */

        if($data['total'] > $data['amount']){
            $receivable = round($data['total'] - $data['amount']);
            $em = $this->_em;
            $transaction = new Transaction();
            $transaction->setProcess("sales");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-receivable'));
            $transaction->setAccountHead($head);
            $transaction->setAmount($receivable);
            $transaction->setDebit($receivable);
            $em->persist($transaction);
            $em->flush();
        }

    }

    public function insertSalesHospitalMonthlyTransaction(AccountProfit $entity,$data)
    {

        $em = $this->_em;
        $amount = round($data['amount']);
        if($amount > 0){
            $transaction = new Transaction();
            $transaction->setProcess("sales");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());

            /* Cash - Cash various */

            if ($data['method'] == 2) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
                $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 3) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
                $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
                $transaction->setSubAccountHead($subAccount);
            } elseif ($data['method'] == 1) {
                $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
            }
            $transaction->setAmount($amount);
            $transaction->setDebit($amount);
            $em->persist($transaction);
            $em->flush();
        }

    }

    public function insertMonthlySalesAccountReceivable(AccountProfit $entity,$data)
    {
        $receivable = round($data['total'] - $data['amount']);
        $em = $this->_em;
        $transaction = new Transaction();
        $transaction->setProcess("sales");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-receivable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($receivable);
        $transaction->setDebit($receivable);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertSalesAdjustmentMonthlyTransaction(AccountProfit $entity,$data)
    {
        if($data['purchase']) {

            $em = $this->_em;
            $sales = round($data['sales']);
            $transaction = new Transaction();
            $transaction->setProcess("sales-adjustment");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand'));
            $transaction->setAccountHead($head);
            $transaction->setAmount($sales);
            $transaction->setDebit($sales);
            $em->persist($transaction);
            $em->flush();

            $purchase = round($data['purchase']);
            $transaction = new Transaction();
            $transaction->setProcess("sales-adjustment");
            $transaction->setGlobalOption($entity->getGlobalOption());
            $transaction->setAccountProfit($entity);
            $transaction->setCreated($entity->getCreated());
            $transaction->setUpdated($entity->getCreated());
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'inventory'));
            $transaction->setAccountHead($head);
            $transaction->setAmount("-{$purchase}");
            $transaction->setCredit($purchase);
            $em->persist($transaction);
            $em->flush();
        }

    }

    public function insertSalesMonthlyPurchaseTransaction(AccountProfit $entity,$total){

        $em = $this->_em;
        /* Inventory Assets*/
        $transaction = new Transaction();
        $transaction->setProcess("sales-purchase");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'inventory')));
        $total = round($total);
        $transaction->setAmount("-{$total}");
        $transaction->setCredit($total);
        $em->persist($transaction);
        $em->flush();
    }

    public function insertSalesMonthlyDueTransaction(AccountProfit $entity,$data)
    {

        $em = $this->_em;
        $transaction = new Transaction();
        $transaction->setProcess("sales-due");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Cash - Cash various */
        if($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        }elseif($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        }elseif($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $amount = round($data['amount']);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();


        $transaction = new Transaction();
        $transaction->setProcess("sales-due");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-receivable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertSalesMonthlyOpeningTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $total = round($data['total']);
        $transaction = new Transaction();
        $transaction->setProcess("sales-outstanding");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-receivable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($total);
        $transaction->setDebit($total);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("sales-outstanding");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        if(!empty($entity->getGlobalOption()->getAccountingConfig()->getCapitalInvestor())){
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'capital-investment'));
            $transaction->setAccountHead($head);
            $transaction->setSubAccountHead($entity->getGlobalOption()->getAccountingConfig()->getCapitalInvestor());
        }else{
            $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'inventory'));
            $transaction->setAccountHead($head);
        }
        $transaction->setAmount("-{$total}");
        $transaction->setCredit($total);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertSalesMonthlyDiscountTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("sales-discount");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Current Asset - Account Receivable */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'account-receivable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("sales-discount");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Current Asset - Account Receivable */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'sales-discount'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertSalesAdvanceMonthlyTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("sales-advance");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'account-payable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount($amount);
        $transaction->setCredit("-{$amount}");
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("sales-advance");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Cash - Cash various */
        if ($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("{$amount}");
        $transaction->getDebit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertSalesMonthlyMedicineReturnTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("sales");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        /* Current Current Asset - Account Receivable */
        $head = $em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'account-receivable'));
        $transaction->setAccountHead($head);
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit(abs($amount));
        $em->persist($transaction);
        $em->flush();

        $em = $this->_em;
        /* Inventory Assets*/
        $transaction = new Transaction();
        $transaction->setProcess("sales-return");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug'=>'inventory')));
        $transaction->setAmount(abs($amount));
        $transaction->setDebit(abs($amount));
        $em->persist($transaction);
        $em->flush();


    }

    public function insertPurchaseExpenseMonthlyTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $transaction = new Transaction();
        $amount = round($data['round']);
        $transaction->setProcess("bill-expenditure");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());

        /* Cash - Cash credit */

        $accountHead = $em->getRepository('AccountingBundle:AccountHead')->find($data['head']);
        $transaction->setAccountHead($accountHead);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("bill-expenditure");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        if ($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertExpenseMonthlyTransaction(AccountProfit $entity,$data)
    {
        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("expenditure");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        $accountHead = $em->getRepository('AccountingBundle:AccountHead')->find($data['head']);
        $transaction->setAccountHead($accountHead);
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();

        $transaction = new Transaction();
        $transaction->setProcess("expenditure");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        if ($data['method'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['bank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['mobile']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['method'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();

    }

    public function insertContraMonthlyTransaction(AccountProfit $entity,$data)
    {

        $em = $this->_em;
        $amount = round($data['amount']);
        $transaction = new Transaction();
        $transaction->setProcess("contra");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        if ($data['fromMethod'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['fromBank']);
            $transaction->setSubAccountHead($subAccount);
        }elseif ($data['fromMethod'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['fromMobileBank']);
            $transaction->setSubAccountHead($subAccount);
        }elseif ($data['fromMethod'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount("-{$amount}");
        $transaction->setCredit($amount);
        $em->persist($transaction);
        $em->flush();


        $transaction = new Transaction();
        $transaction->setProcess("contra");
        $transaction->setGlobalOption($entity->getGlobalOption());
        $transaction->setAccountProfit($entity);
        $transaction->setCreated($entity->getCreated());
        $transaction->setUpdated($entity->getCreated());
        if ($data['toMethod'] == 2) {
            $transaction->setAccountHead($this->_em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'bank-account')));
            $subAccount = $this->_em->getRepository('AccountingBundle:AccountHead')->insertBankSubHead($data['toBank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['toMethod'] == 3) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'mobile-account')));
            $subAccount = $em->getRepository('AccountingBundle:AccountHead')->insertMobileSubHead($data['toMobileBank']);
            $transaction->setSubAccountHead($subAccount);
        } elseif ($data['toMethod'] == 1) {
            $transaction->setAccountHead($em->getRepository('AccountingBundle:AccountHead')->findOneBy(array('slug' => 'cash-in-hand')));
        }
        $transaction->setAmount($amount);
        $transaction->setDebit($amount);
        $em->persist($transaction);
        $em->flush();
    }

    public function monthlyProfitReconcialtionProcess(GlobalOption $option,$process,$data)
    {
        $config = $option->getId();
        $compare = new \DateTime($data);
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $sql = "SELECT trans.process as process,COALESCE(SUM(trans.debit),0) as debit, COALESCE(SUM(trans.credit),0) as credit
                FROM Transaction as trans
                WHERE trans.globalOption_id = :config AND trans.process = :process AND  MONTHNAME(trans.created) =:month AND YEAR(trans.created) =:year";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('config', $config);
        $stmt->bindValue('process', $process);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $result =  $stmt->fetch();
        return $result;
    }

    public function getTransactionSalesReturn(GlobalOption $option,$data)
    {
        $config = $option->getId();
        $compare = new \DateTime($data);
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $sql = "SELECT COALESCE(SUM(trans.debit),0)
                FROM Transaction as trans
                WHERE trans.globalOption_id = :config AND trans.process = :process AND  MONTHNAME(trans.created) =:month AND YEAR(trans.created) =:year";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('config', $config);
        $stmt->bindValue('process', 'sales-return');
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $result =  $stmt->fetch();
        return $result;
    }

}
