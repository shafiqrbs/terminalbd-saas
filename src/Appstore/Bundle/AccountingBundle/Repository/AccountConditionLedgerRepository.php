<?php
namespace Appstore\Bundle\AccountingBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountConditionLedger;
use Appstore\Bundle\AccountingBundle\Entity\AccountLoan;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\AccountingBundle\Entity\AccountVendor;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoice;
use Appstore\Bundle\MedicineBundle\Entity\MedicineVendor;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * VendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountConditionLedgerRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        if(!empty($data))
        {
            $startDate =  isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate =    isset($data['endDate'])  ? $data['endDate'] : '';
            $condition =  isset($data['condition'])? $data['condition'] :'';
            $process =    isset($data['process'])? $data['process'] :'';
            $user =    isset($data['user'])? $data['user'] :'';
            if (!empty($condition)) {
                $qb->andWhere("e.condition = :condition")->setParameter('condition', $condition);
            }
            if (!empty($process)) {
                $qb->andWhere("e.mode = :process")->setParameter('process', $process);
            }
            if (!empty($user)) {
                $qb->andWhere("e.createdBy = :user")->setParameter('user', $user);
            }
            if (!empty($startDate) ) {
                $start = date('Y-m-d 00:00:00',strtotime($data['startDate']));
                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $start);
            }
            if (!empty($endDate)) {
                $end = date('Y-m-d 23:59:59',strtotime($data['endDate']));
                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate',$end);
            }
        }

    }

    public function getLedgerLists($globalOption,$data)
    {

        $sort = isset($data['sort'])? $data['sort'] :'e.created';
        $direction = isset($data['direction'])? $data['direction'] :'DESC';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.condition','customer');
        $qb->leftJoin('e.transactionMethod','transactionMethod');
        $qb->leftJoin('e.accountMobileBank','mobile');
        $qb->leftJoin('e.accountBank','bank');
        $qb->leftJoin('e.createdBy','user');
        $qb->select('customer.name as customerName','customer.mobile as customerMobile');
        $qb->addSelect('transactionMethod.name as method');
        $qb->addSelect('mobile.name as mobileName');
        $qb->addSelect('user.username as username');
        $qb->addSelect('bank.name as bankName');
        $qb->addSelect('e.id as id','e.mode as mode','e.created as updated','e.debit as debit','e.credit as credit','e.amount as amount','e.balance as balance','e.process as process','e.remark');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $qb->addOrderBy("{$sort}",$direction);
        $result = $qb->getQuery();
        return $result;

    }

    public function getLastBalance(GlobalOption $global)
    {
        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('(COALESCE(SUM(e.amount),0)) AS balance');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $global->getId());
        $qb->andWhere("e.process = 'approved'");
        $balance = $qb->getQuery()->getSingleScalarResult();
        return round($balance);

    }


    public function dailyLedger($user,$data)
    {
        $globalOption = $user->getGlobalOption()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->select('u.name as name','u.mobile as mobile','SUM(e.debit) as debit','SUM(e.credit) as credit','(SUM(e.credit) + SUM(e.debit)) as balance');
        $qb->join('e.condition','u');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $globalOption);
        $qb->andWhere("e.process = 'approved'");
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('p.name');
        $qb->orderBy('p.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function outstanding($option)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('u.name as name','u.mobile as mobile','SUM(e.debit) as debit','SUM(e.credit) as credit','(SUM(e.credit) + SUM(e.debit)) as balance');
        $qb->join('e.condition','u');
        $qb->where("e.globalOption = :globalOption")->setParameter('globalOption', $option);
        $qb->andWhere("e.process = 'approved'");
        $qb->groupBy('u.name');
        $qb->orderBy('u.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function updateConditionBalance(AccountConditionLedger $accountSales){
        $em = $this->_em;
        $customer = $accountSales->getCondition()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->select('(COALESCE(SUM(e.debit),0) - COALESCE(SUM(e.credit),0)) AS balance, COALESCE(SUM(e.amount),0) AS receiveAmount, COALESCE(SUM(e.amount),0) AS dueAmount, COALESCE(SUM(e.amount),0) AS returnAmount ');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $accountSales->getGlobalOption()->getId());
        $qb->andWhere("e.process = 'approved'");
        $qb->andWhere("e.condition = :customer");
        $qb->setParameter('customer', $customer);
        $result = $qb->getQuery()->getSingleResult();
        $balance = $result['balance'];
        $accountSales->setBalance($balance);
        $accountSales->setUpdated($accountSales->getCreated());
        $em->persist($accountSales);
        $em->flush();
        return $accountSales;

    }


    /* =============  Business Module ================= */


    public function insertBusinessConditionInvoice(BusinessInvoice $entity)
    {
        $em = $this->_em;
        $exist = $this->findOneBy(array('invoice'=>$entity,'process' =>"Sales"));
        if($exist){
            $accountSales = $exist;
            $accountSales->setAccountBank($entity->getAccountBank());
            $accountSales->setAccountMobileBank($entity->getAccountMobileBank());
            $accountSales->setGlobalOption($entity->getBusinessConfig()->getGlobalOption());
            $accountSales->setCondition($entity->getCondition());
            $accountSales->setInvoice($entity);
            $amount = ($entity->getTotal() - $entity->getPayment());
            $accountSales->setDebit($amount);
            $accountSales->setAmount($amount);
            $accountSales->setUpdated($entity->getUpdated());
            $em->persist($accountSales);
            $em->flush();
            $this->updateConditionBalance($accountSales);
        }else{
            $accountSales = new AccountConditionLedger();
            $accountSales->setAccountBank($entity->getAccountBank());
            $accountSales->setAccountMobileBank($entity->getAccountMobileBank());
            $accountSales->setGlobalOption($entity->getBusinessConfig()->getGlobalOption());
            $accountSales->setCondition($entity->getCondition());
            $accountSales->setInvoice($entity);
            $amount = ($entity->getTotal() - $entity->getPayment());
            $accountSales->setDebit($amount);
            $accountSales->setAmount($amount);
            $accountSales->setApprovedBy($entity->getCreatedBy());
            $accountSales->setCreatedBy($entity->getCreatedBy());
            $accountSales->setMode('Sales');
            $accountSales->setProcess('approved');
            $accountSales->setCreated($entity->getUpdated());
            $accountSales->setUpdated($entity->getUpdated());
            $em->persist($accountSales);
            $em->flush();
            $this->updateConditionBalance($accountSales);
        }

    }

    public function insertConditionInvoiceReceive(BusinessInvoice $entity)
    {
        $em = $this->_em;
        $exist = $this->findOneBy(array('invoice'=>$entity,'process' =>"Receive"));
        if(empty($exist)) {
            $accountSales = new AccountConditionLedger();
            $accountSales->setAccountBank($entity->getAccountBank());
            $accountSales->setAccountMobileBank($entity->getAccountMobileBank());
            $accountSales->setGlobalOption($entity->getBusinessConfig()->getGlobalOption());
            $accountSales->setCondition($entity->getCondition());
            $accountSales->setInvoice($entity);
            $amount = ($entity->getTotal() - $entity->getPayment());
            $accountSales->setCredit($amount);
            $accountSales->setAmount('-'.$amount);
            $accountSales->setApprovedBy($entity->getCreatedBy());
            $accountSales->setCreatedBy($entity->getCreatedBy());
            $accountSales->setMode('Receive');
            $accountSales->setProcess('approved');
            $accountSales->setCreated($entity->getUpdated());
            $accountSales->setUpdated($entity->getUpdated());
            $em->persist($accountSales);
            $em->flush();
            $this->updateConditionBalance($accountSales);
        }

    }

    public function insertConditionInvoiceReturn(BusinessInvoice $entity)
    {
        $em = $this->_em;
        $exist = $this->findOneBy(array('invoice'=>$entity,'process' =>"Sales-Return"));
        if(empty($exist)) {
            $accountSales = new AccountConditionLedger();
            $accountSales->setAccountBank($entity->getAccountBank());
            $accountSales->setAccountMobileBank($entity->getAccountMobileBank());
            $accountSales->setGlobalOption($entity->getBusinessConfig()->getGlobalOption());
            $accountSales->setCondition($entity->getCondition());
            $accountSales->setInvoice($entity);
            $amount = ($entity->getTotal() - $entity->getPayment());
            $accountSales->setCredit($amount);
            $accountSales->setAmount('-'.$amount);
            $accountSales->setApprovedBy($entity->getCreatedBy());
            $accountSales->setCreatedBy($entity->getCreatedBy());
            $accountSales->setMode('Sales-Return');
            $accountSales->setProcess('approved');
            $accountSales->setCreated($entity->getUpdated());
            $accountSales->setUpdated($entity->getUpdated());
            $em->persist($accountSales);
            $em->flush();
            $this->updateConditionBalance($accountSales);
        }

    }

    public function accountLedgerReverse(AccountConditionLedger $entity)
    {
        $em = $this->_em;
        $accountCash = $em->createQuery("DELETE AccountingBundle:AccountCash e WHERE e.conditionLedger = {$entity->getId()}");
        $accountCash->execute();
    }

    public function accountInvoiceReverse(BusinessInvoice $entity)
    {
        $em = $this->_em;
        $accountCash = $em->createQuery("DELETE AccountingBundle:AccountConditionLedger e WHERE e.invoice = {$entity->getId()}");
        $accountCash->execute();
    }

}
