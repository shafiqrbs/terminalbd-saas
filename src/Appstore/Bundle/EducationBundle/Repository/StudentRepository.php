<?php

namespace Appstore\Bundle\EducationBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\NotificationConfig;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * NotificationConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StudentRepository extends EntityRepository
{
    public function checkDuplicateCustomer(EducationConfig $config, $mobile)
    {
        $em = $this->_em;
        $entity = $em->getRepository('ElectionBundle:ElectionMember')->findOneBy(array('config' => $config,'mobile' => $mobile));
        if($entity) {
            return false;
        }else{
            return true;
        }

    }

    public function getBarcodeForPrint($config,$data)
    {
        $qb = $this->createQueryBuilder('item');
        $qb->select('item');
        $qb->where($qb->expr()->in("item.id", $data ));
        $qb->andWhere("item.EducationConfig = :config");
        $qb->setParameter('config', $config->getId());
        $qb->orderBy('item.memberId','ASC');
        return $qb->getQuery()->getResult();

    }

    public function getImportCount(EducationConfig $config,$process){
        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.id) as countId');
        $qb->where('e.EducationConfig='.$config->getId());
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        $results = $qb->getQuery()->getOneOrNullResult();
        return $results['countId'];
    }

    public function getLocationBaseMembers(ElectionCommittee $committee)
    {
        /* @var $location ElectionLocation */
        $location = $committee->getLocation();

        $config = $committee->getEducationConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $orX = $qb->expr()->orX();
        $orX->add("node.path like '%" .$location->getId(). "/%'");
        $orX->add("center.path like '%" .$location->getId(). "/%'");
        $qb->leftJoin('e.location','node');
        $qb->leftJoin('e.voteCenter','center');
        $qb->orderBy('node.level, node.name', 'ASC');
        $qb->where('e.EducationConfig='.$config);
        $qb->andWhere($orX);
        $results = $qb->getQuery()->getResult();
        $choices = [];
        foreach ($results as $product) {
            $choices[$product->getId()] =  $product->getName().' [ '.$product->getLocation()->villageName().' ]';
        }
        return $choices;
    }

    public function findWithSearch( $config , $data , $type = '')
    {
        $sort = isset($data['sort'])? $data['sort'] :'e.name';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.educationConfig = :config");
        $qb->setParameter('config', $config);
        $qb->leftJoin('e.location','l');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $qb->getQuery();
        return  $qb;

    }

    public function findWithArchive( $config , $data , $type = '')
    {
        $sort = isset($data['sort'])? $data['sort'] :'e.name';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.location','l');
        $qb->where("e.educationConfig = :config")->setParameter('config', $config);
        $qb->where("e.isArchive = 1");
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $qb->getQuery();
        return  $qb;

    }

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $mobile         =   isset($data['member'])? $data['member'] :'';
            $keyword        =   isset($data['keyword'])? $data['keyword'] :'';
            $location       =   isset($data['location'])? $data['location'] :'';

            if (!empty($mobile)) {
                $qb->andWhere("e.mobile = :mobile");
                $qb->setParameter('mobile', $mobile);
            }

            if (!empty($keyword)) {
                $qb->andWhere("e.name LIKE :name");
                $qb->setParameter('name','%'. $keyword.'%');
                $qb->orWhere("e.mobile LIKE :mobile");
                $qb->setParameter('mobile','%'. $keyword.'%');
            }

            if (!empty($location)) {
                $qb->andWhere("l.name LIKE :locationName");
                $qb->setParameter('locationName','%'.$location.'%');
            }

        }
    }


    public function insertSMSCustomer($data)
    {
        $em = $this->_em;
        $entity = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('config'=>$data['config'],'mobile' => $data['mobile']));
        if($entity){
            return $entity;
        }else{
            $entity = new Customer();
            $config = $this->_em->getRepository('SettingToolBundle:GlobalOption')->find($data['config']);
            $entity->setMobile($data['mobile']);
            $entity->setName($data['name']);
            $entity->setGlobalOption($config);
            $entity->setCustomerType('sms');
            $em->persist($entity);
            $em->flush();
            return $entity;
        }

    }

    public function searchAutoComplete(EducationConfig $config, $q , $type='member')
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.mobile as id');
        $query->addSelect('CONCAT(e.mobile, \' - \', e.name) AS text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->orWhere($query->expr()->like("e.name", "'%$q%'"  ));
        $query->andWhere("e.EducationConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->andWhere("e.memberType = :type");
        $query->setParameter('type', $type);
        $query->orderBy('e.name', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '20' );
        return $query->getQuery()->getResult();

    }

    public function searchMobileAutoComplete(GlobalOption $config, $q, $type = 'member')
    {
        $query = $this->createQueryBuilder('e');

        $query->select('e.mobile as id');
        $query->addSelect('e.id as e');
        $query->addSelect('CONCAT(e.mobile, \'-\', e.name) AS text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->andWhere("e.memberType = :type");
        $query->setParameter('type', $type);
        $query->orderBy('e.mobile', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchCustomerAutoComplete(GlobalOption $config, $q, $type = 'member')
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.id as name');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.mobile", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->andWhere("e.memberType = :type");
        $query->setParameter('type', $type);
        $query->orderBy('e.name', 'ASC');
        $query->groupBy('e.mobile');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoCompleteName(GlobalOption $config, $q)
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.id as e');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoCompleteCode(GlobalOption $config, $q)
    {
        $query = $this->createQueryBuilder('e');

        $query->select('e.mobile as id');
        $query->addSelect('e.id as e');
        $query->addSelect('e.eId as text');
        //$query->addSelect('CONCAT(e.eId, " - ", e.name) AS text');
        $query->where($query->expr()->like("e.eId", "'$q%'"  ));
        $query->andWhere("e.config = :config");
        $query->setParameter('config', $config->getId());
        $query->orderBy('e.eId', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();
    }

    public function voterData(ElectionMember $entity )
    {
        $voter = '';
        if($entity->getVoteCenter()){
            $voter = $entity->getVoteCenter()->getName();
        }
        $data ="";
        if(!empty($entity->getLocation())){
            $data .="<div class='portlet-body flip-scroll'><table class='table table-bordered table-striped table-condensed flip-content '>";
            $data .=" <thead class='flip-content'><tr class='head-grey'><th>ID</th><th>Name</th><th>Mobile</th><th>Village</th><th>Vote Center</th><th>Ward</th><th>Union/Purashava</th><th>Thana/Upazila</th></tr></thead>";
            $data .= "<tbody>";
            $data .= "<tr>";
            $data .= "<td>{$entity->getMemberId()}</td>";
            $data .= "<td>{$entity->getName()}</td>";
            $data .= "<td><a href='tel:+88 {$entity->getMobile()}'>{$entity->getMobile()}</a></td>";
            $data .= "<td>{$entity->getLocation()->getName()}</td>";
            $data .= "<td>{$voter}</td>";
            $data .= "<td>{$entity->getLocation()->wardName()}</td>";
            $data .= "<td>{$entity->getLocation()->unionName()}</td>";
            $data .= "<td>{$entity->getLocation()->thanaName()}</td>";
            $data .= "</tr>";
            $data .= "</tbody>";
            $data .= "</table></div>";

        }else{
            $data .="<p class='text-center'>There is no available information. </p>";
        }

        return $data;

    }

}
