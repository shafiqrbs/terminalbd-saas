<?php

namespace Appstore\Bundle\ElectionBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\NotificationConfig;
use Appstore\Bundle\ElectionBundle\Entity\ElectionConfig;
use Appstore\Bundle\ElectionBundle\Entity\ElectionSetup;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * ElectionCommitteeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElectionCommitteeRepository extends EntityRepository
{

	protected function handleSearchBetween($qb,$data)
	{

		$startDate = isset($data['startDate'])  ? $data['startDate'] : '';
		$endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
		$type = isset($data['locationType'])? $data['locationType'] :'';
		$location = isset($data['location'])? $data['location'] :'';
		$keyword = isset($data['keyword'])? $data['keyword'] :'';

		if (!empty($startDate) ) {
			$start = date('Y-m-d 00:00:00',strtotime($data['startDate']));
			$qb->andWhere("e.updated >= :startDate");
			$qb->setParameter('startDate', $start);
		}
		if (!empty($endDate)) {
			$end = date('Y-m-d 23:59:59',strtotime($data['endDate']));
			$qb->andWhere("e.updated <= :endDate");
			$qb->setParameter('endDate',$end);
		}

		if (!empty($keyword)) {
			$qb->andWhere($qb->expr()->like("e.name", "'%$keyword%'"  ));
		}
		if (!empty($type)) {
			$qb->andWhere("l.locationType = :type");
			$qb->setParameter('type', $type);

		}
		if (!empty($location)) {
			$val = explode(',',$location);
			$name = $val[0];
			$parent = $val[1];
			$qb->andWhere($qb->expr()->like("l.name", "'%$name%'"  ));
			$qb->join('l.parent','p');
			$qb->andWhere($qb->expr()->like("p.name", "'%$parent%'"  ));
			$qb->andWhere($qb->expr()->like("p.name", "'%$parent%'"  ));
		}


	}

	public function findWithSearch(ElectionConfig $config , $data)
	{

		$qb = $this->createQueryBuilder('e');
		$qb->leftJoin('e.location','l');
		$qb->where("e.electionConfig = :config");
		$qb->setParameter('config', $config->getId());
		$qb->andWhere("e.mode = :mode")->setParameter('mode', $data['mode']);
		$this->handleSearchBetween($qb,$data);
		$qb->orderBy('e.created','ASC');
		$qb->getQuery();
		return  $qb;

	}

	public function getCommittees(ElectionSetup  $setup){

		$qb = $this->createQueryBuilder('e');
		$qb->select('e');
		$qb->where('e.electionSetup='.$setup->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->orderBy("e.updated",'DESC');
		$qb->getMaxResults(0,5);
		$results = $qb->getQuery()->getResult();
		return $results;
	}

	public function getTypeBaseCommittee(ElectionSetup  $setup){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.electionSetup','t');
		$qb->join('t.electionType','type');
		$qb->select('type.name as committeeName , COUNT(e.id) as countId');
		$qb->where('e.electionSetup='.$setup->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('type.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function getLocationBaseCommittee(ElectionSetup  $setup){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.location','t');
		$qb->join('t.parent','p');
		$qb->select('t.id as id,t.name as locationName ,p.name as parentLocationName , COUNT(e.id) as committeeCount');
		$qb->where('e.electionSetup='.$setup->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('t.name');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function getLocationGroupBaseCommittee(ElectionSetup  $setup){

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.location','location');
		$qb->join('location.locationType','type');
		$qb->select('type.id as id, type.name as locationName , COUNT(e.location) as committeeCount');
		$qb->where('e.electionSetup='.$setup->getId());
		$qb->andWhere("e.status = :status");
		$qb->setParameter('status', 1);
		$qb->groupBy('type.name');
		$qb->orderBy('type.id');
		$results = $qb->getQuery()->getArrayResult();
		return $results;
	}

	public function searchAutoComplete(ElectionConfig $config, $q)
	{
		$query = $this->createQueryBuilder('e');
		$query->select('e.id as id');
		$query->addSelect('e.name AS text');
		$query->where($query->expr()->like("e.name", "'$q%'"  ));
		$query->andWhere("e.electionSetup = :config");
		$query->setParameter('config', $config->getSetup()->getId());
		$query->orderBy('e.name', 'ASC');
		$query->setMaxResults( '10' );
		return $query->getQuery()->getResult();

	}



}
