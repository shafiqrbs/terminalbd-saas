<?php

namespace Appstore\Bundle\ElectionBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\NotificationConfig;
use Appstore\Bundle\ElectionBundle\Entity\ElectionCandidate;
use Appstore\Bundle\ElectionBundle\Entity\ElectionSetup;
use Appstore\Bundle\ElectionBundle\Entity\ElectionVoteCenter;
use Appstore\Bundle\ElectionBundle\Entity\ElectionVoteMatrix;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * ElectionVoteCountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElectionVoteMatrixRepository extends EntityRepository
{
	public function setupMatrix(ElectionSetup $setup){


		foreach ($setup->getCandidates() as $candidate){

			foreach ($setup->getVotecenters() as $center ){

				$exist = $this->findOneBy(array('electionSetup' => $setup, 'candidate' => $candidate,'voteCenter' => $center));
				if(empty($exist)){
					$entity = new ElectionVoteMatrix();
					$entity->setElectionSetup($setup);
					$entity->setCandidate($candidate);
					$entity->setVoteCenter($center);
					$this->_em->persist($entity);
					$this->_em->flush();
				}
			}
		}
	}

	public function getMatrixValue(ElectionSetup $setup)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.voteCenter','v');
		$qb->join('e.candidate','c');
		$qb->select('v.id as centerId');
		$qb->addSelect('c.id as candidateId');
		$qb->addSelect('e.id as matrixId');
		$qb->addSelect('e.maleVoter as maleVoter');
		$qb->addSelect('e.femaleVoter as femaleVoter');
		$qb->addSelect('e.otherVoter as otherVoter');
		$qb->addSelect('e.totalVoter as totalVoter');
		$qb->where('e.electionSetup ='.$setup->getId());
		$result  = $qb->getQuery()->getArrayResult();
		return $result;
	}

	public function getMatrixTotalValue(ElectionSetup $setup)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.voteCenter','v');
		$qb->join('e.candidate','c');
		$qb->select('v.id as centerId');
		$qb->addSelect('c.id as candidateId');
		$qb->addSelect('e.id as matrixId');
		$qb->addSelect('e.maleVoter as maleVoter');
		$qb->addSelect('e.femaleVoter as femaleVoter');
		$qb->addSelect('e.otherVoter as otherVoter');
		$qb->addSelect('e.totalVoter as totalVoter');
		$qb->where('e.electionSetup ='.$setup->getId());
		$result  = $qb->getQuery()->getArrayResult();
		return $result;
	}


	public function updateTotalVote(ElectionCandidate $candidate)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->addSelect('SUM(e.maleVoter) as maleVoter');
		$qb->addSelect('SUM(e.femaleVoter) as femaleVoter');
		$qb->addSelect('SUM(e.otherVoter) as otherVoter');
		$qb->addSelect('SUM(e.totalVoter) as totalVoter');
		$qb->where('e.candidate ='.$candidate->getId());
		$result  = $qb->getQuery()->getOneOrNullResult();
		return $result;
	}

	public function getCenterTotalCastVote(ElectionVoteCenter $center){

		$qb = $this->createQueryBuilder('e');
		$qb->select('SUM(e.totalVoter) as castVote');
		$qb->where('e.voteCenter ='.$center->getId());
		$result  = $qb->getQuery()->getOneOrNullResult();
		return $result['castVote'];
	}
}
