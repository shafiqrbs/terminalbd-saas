<?php

namespace Appstore\Bundle\AssetsBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountPurchase;
use Appstore\Bundle\AssetsBundle\Entity\VoucherItem;
use Appstore\Bundle\AssetsBundle\Entity\ProductGroup;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * ExpenditureItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoucherItemRepository extends EntityRepository
{

    protected function handleSearchBetween($qb,$data)
    {

        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $business = isset($data['name'])? $data['name'] :'';
        $brand = isset($data['brandName'])? $data['brandName'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $vendorId = isset($data['vendorId'])? $data['vendorId'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';

        if (!empty($grn)) {
            $qb->andWhere($qb->expr()->like("e.grn", "'%$grn%'"  ));
        }
        if(!empty($business)){
            $qb->andWhere($qb->expr()->like("ms.name", "'%$business%'"  ));
        }
        if(!empty($brand)){
            $qb->andWhere($qb->expr()->like("ms.brandName", "'%$brand%'"  ));
        }
        if(!empty($mode)){
            $qb->andWhere($qb->expr()->like("ms.mode", "'%$mode%'"  ));
        }
        if(!empty($vendor)){
            $qb->join('e.vendor','v');
            $qb->andWhere($qb->expr()->like("v.companyName", "'%$vendor%'"  ));
        }
        if(!empty($vendorId)){
            $qb->join('e.vendor','v');
            $qb->andWhere("v.id = :vendorId")->setParameter('vendorId', $vendorId);
        }
        if (!empty($startDate) ) {
            $datetime = new \DateTime($data['startDate']);
            $start = $datetime->format('Y-m-d 00:00:00');
            $qb->andWhere("e.receiveDate >= :startDate");
            $qb->setParameter('startDate', $start);
        }

        if (!empty($endDate)) {
            $datetime = new \DateTime($data['endDate']);
            $end = $datetime->format('Y-m-d 23:59:59');
            $qb->andWhere("e.receiveDate <= :endDate");
            $qb->setParameter('endDate', $end);
        }
    }

    public function findWithSearch(GlobalOption $globalOption, $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.globalOption = :config')->setParameter('config', $globalOption->getId()) ;
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return  $result;
    }

    public function updatePurchaseTotalPrice(AccountPurchase $entity)
    {
        $em = $this->_em;
        $total = $this->createQueryBuilder('si')
            ->join('si.purchase','e')
            ->select('sum(si.subTotal) as total')
            ->where('e.id = :entity')
            ->setParameter('entity', $entity ->getId())
            ->getQuery()->getOneOrNullResult();

        if($total['total'] > 0){
            $subTotal = $total['total'];
            $entity->setTotalAmount($subTotal);
            $entity->setPurchaseAmount($subTotal);
        }else{
            $entity->setTotalAmount(0);
            $entity->setPurchaseAmount(0);
        }

        $em->persist($entity);
        $em->flush();
        return $entity;

    }


    public function insertPurchaseItems($invoice, $data)
    {

        $em = $this->_em;
        $entity = new VoucherItem();
        $product = $data['productGroup'];
        $entity->setPurchase($invoice);
        $product = $this->_em->getRepository('AssetsBundle:ProductGroup')->find($product);
        $entity->setProductGroup($product);
        $entity->setName($data['name']);
        $entity->setPrice($data['price']);
        $entity->setQuantity($data['quantity']);
        $entity->setSubTotal($data['quantity'] * $data['price']);
        $em->persist($entity);
        $em->flush();

    }


    public function getPurchaseItems(AccountPurchase $sales)
    {
        $entities = $sales->getVoucherItems();
        $data = '';
        $i = 1;

        /* @var $entity VoucherItem */

        foreach ($entities as $entity) {

            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td>{$i}</td>";
            $data .= "<td>{$entity->getProductGroup()->getName()}</td>";
            $data .= "<td>{$entity->getName()}</td>";
            $data .= "<td>{$entity->getPrice()}</td>";
            $data .= "<td>{$entity->getQuantity()}</td>";
            $data .= "<td>{$entity->getSubTotal()}</td>";
            $data .= "<td><a id='{$entity->getId()}'  data-url='/accounting/account-voucher/{$sales->getId()}/{$entity->getId()}/item-delete' href='javascript:' class='btn red mini item-delete' ><i class='icon-trash'></i></a></td>";
            $data .= '</tr>';
            $i++;

        }
        return $data;
    }

    public function stockPurchaseItemPrice($percentage,$price)
    {
        $discount = (($price * $percentage )/100);
        $purchasePrice = ($price - $discount);
        return $purchasePrice;

    }

    public function purchaseItemUpdate(VoucherItem $item,$fieldName)
    {
        $qb = $this->createQueryBuilder('e');
        if($fieldName == 'sales'){
            $qb->select('e.salesQuantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }else{
            $qb->select('SUM(e.quantity) AS quantity');
        }
        $qb->addSelect('e.remainingQuantity AS remainingQuantity');
        $qb->where('e.id = :item')->setParameter('item', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt;
    }

    public function purchaseStockItemUpdate(ProductGroup $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.productGroup', 'mp');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.productGroup = :productGroup')->setParameter('productGroup', $stockItem->getId());
        $qb->andWhere('mp.process = :process')->setParameter('process', 'Approved');
        $qb->andWhere('e.mode = :mode')->setParameter('mode', 'purchase');
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

     public function openingStockItemUpdate(ProductGroup $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.productGroup', 'mp');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.productGroup = :productGroup')->setParameter('productGroup', $stockItem->getId());
        $qb->andWhere('mp.process = :process')->setParameter('process', 'Approved');
        $qb->andWhere('e.mode = :mode')->setParameter('mode', 'opening');
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function generateSerialNo(VoucherItem $entity){

        /* @var $product ProductGroup */

        $em = $this->_em;
        $product = $entity->getProductGroup();

        $prefix = !empty($product->getItemPrefix()) ? $product->getItemPrefix().'-':'';
        $format = $product->getSerialFormat();
        $generation = $product->getSerialGeneration();

        if($generation == 'auto'){
            $serialNos = array();
            for($qnt = 1; $entity->getQuantity() >= $qnt; $qnt++ ){
                $generate = str_pad($qnt,$format, '0', STR_PAD_LEFT);
                $serialNos[] = $prefix.$entity->getBarcode().'/'.$generate;
            }
            $entity->setInternalSerial($serialNos);
            $comma_separated = implode(",", $serialNos);
            $entity->setExternalSerial($comma_separated);
            $em->persist($entity);
            $em->flush($entity);

        }
    }
}
