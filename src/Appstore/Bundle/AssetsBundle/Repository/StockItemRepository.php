<?php

namespace Appstore\Bundle\AssetsBundle\Repository;
use Appstore\Bundle\AssetsBundle\Entity\Item;
use Appstore\Bundle\AssetsBundle\Entity\Sales;
use Appstore\Bundle\AssetsBundle\Entity\StockItem;
use Appstore\Bundle\AssetsBundle\Entity\AssetsConfig;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * ItemStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockItemRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {
            $startDate = isset($data['startDate'])  ? date('Y-m-d',strtotime($data['startDate'])) : '';
            $endDate =   isset($data['endDate'])  ? date('Y-m-d',strtotime($data['endDate'])) : '';
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';

            if (!empty($data['startDate']) ) {
                $qb->andWhere("p.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {
                $qb->andWhere("p.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {

                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);

            }
        }

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $unit = isset($data['unit'])? $data['unit'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {

                $qb->join('e.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('m.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }

            if (!empty($unit)) {
                $qb->join('m.productUnit','u');
                $qb->andWhere("b.name = :unit");
                $qb->setParameter('unit', $unit);
            }

        }

    }

    protected function handleSearchDateBetween($qb,$data)
    {

        $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
        $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
        if (!empty($startDate)) {
            $start = date('Y-m-d 00:00:00',strtotime($startDate));
            $qb->andWhere("sales.created >= :startDate");
            $qb->setParameter('startDate',$start);
        }

        if (!empty($endDate)) {
            $end = date('Y-m-d 23:59:59',strtotime($startDate));
            $qb->andWhere("sales.created <= :endDate");
            $qb->setParameter('endDate',$end);
        }

    }

    public function findWithSearch($config,$data)
    {

        $item = isset($data['item'])? $data['item'] :'';
        $branch = isset($data['branch'])? $data['branch'] :'';
        $category = isset($data['category'])? $data['category'] :'';
        $parent = isset($data['parent'])? $data['parent'] :'';
        $depreciation = isset($data['depreciation'])? $data['depreciation'] :'';


        $qb = $this->createQueryBuilder('item');
        $qb->join("item.item",'iItem');
        $qb->join("item.purchaseItem",'purchaseItem');
        $qb->select("SUM(item.openingQuantity) as openingQuantity","SUM(item.quantity) as remainingQuantity","SUM(item.purchaseQuantity) as purchaseQuantity","SUM(item.damageQuantity) as damageQuantity","SUM(item.salesQuantity) as salesQuantity","SUM(item.salesReturnQuantity) as salesReturnQuantity","SUM(item.purchaseReturnQuantity) as purchaseReturnQuantity");
        $qb->addSelect("purchaseItem.id as id","purchaseItem.barcode as barcode");
        $qb->addSelect("iItem.name as productName");
        $qb->where("item.process='Approved'");
        $qb->andWhere("item.config = :config")->setParameter('config', $config);
        if (!empty($item)) {
            $qb->andWhere("item.name = :name");
            $qb->setParameter('name', $item);
        }

        if (!empty($category)) {
            $qb->join('item.category', 'c');
            $qb->andWhere("c.name = :category");
            $qb->setParameter('category', $category);
        }

        if (!empty($parent)) {
            $qb->join('item.parentCategory', 'pc');
            $qb->andWhere("pc.name = :parent");
            $qb->setParameter('parent', $parent);
        }

        if (!empty($depreciation)) {
            $qb->join('item.depreciation', 'd');
            $qb->andWhere("d.id = :depreciation");
            $qb->setParameter('depreciation', $depreciation);
        }

        if (!empty($vendor)) {
            $qb->join('item.vendor', 'v');
            $qb->andWhere("v.companyName = :vendor");
            $qb->setParameter('vendor', $vendor);
        }

        if (!empty($branch)) {

            $qb->join('item.branch', 'b');
            $qb->andWhere("b.name = :branch");
            $qb->setParameter('branch', $branch);

        }
        $qb->groupBy('item.purchaseItem');
        $qb->orderBy('iItem.name','ASC');
        $qb->getQuery();
        return  $qb;
    }

    public function processStockQuantity(AssetsConfig $config , $id = 0 , $fieldName = ''){

        $em = $this->_em;
        $entity = new StockItem();
        if($fieldName == 'sales'){
          //  $entity->setSalesQuantity($qnt);
        }elseif($fieldName == 'sales-return'){

        }elseif($fieldName == 'purchase-return'){

        }elseif($fieldName == 'assets'){

        }elseif($fieldName == 'assets-return'){

        }elseif($fieldName == 'damage'){

        }elseif($fieldName == 'opening'){

            /* @var $item PurchaseItem */

            $item = $em->getRepository('AssetsBundle:PurchaseItem')->find($id);

            $exist = $this->findOneBy(array('config' => $config,'purchaseItem' => $id ,'mode' => 'opening'));
            if($exist){
                $entity = $exist;
            }
            $entity->setQuantity($item->getQuantity());
            $entity->setOpeningQuantity($item->getQuantity());
            $entity->setItem($item->getItem());
            if($item->getItem()->getBrand()){
                $entity->setBrand($item->getItem()->getBrand());
            }
            if($item->getItem()->getCategory()){
                $entity->setCategory($item->getItem()->getCategory());
            }
            $entity->setPurchaseItem($item);
            $entity->setPrice($item->getPrice());
            $entity->setPurchasePrice($item->getPurchasePrice());
            $entity->setSalesPrice($item->getSalesPrice());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getSubTotal());
            $entity->setMode('opening');

        }elseif($fieldName == 'purchase'){

            $receiveItem = $em->getRepository('AssetsBundle:ReceiveItem')->find($id);
            $item = $receiveItem->getPurchaseItem();
            $exist = $this->findOneBy(array('config' => $config,'receiveItem' => $id ,'mode' => 'opening'));
            if($exist){
                $entity = $exist;
            }
            $entity->setQuantity($receiveItem->getQuantity());
            $entity->setOpeningQuantity($receiveItem->getQuantity());
            $entity->setItem($item->getItem());
            if($item->getItem()->getBrand()){
                $entity->setBrand($item->getItem()->getBrand());
            }
            if($item->getItem()->getCategory()){
                $entity->setCategory($item->getItem()->getCategory());
            }
            $entity->setReceiveItem($receiveItem);
            $entity->setPurchaseItem($item);
            $entity->setPurchase($item->getAssetsPurchase());
            $entity->setVendor($item->getAssetsPurchase()->getVendor());
            $entity->setPrice($item->getPrice());
            $entity->setPurchasePrice($item->getPurchasePrice());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getSubTotal() + $entity->getTotalTaxIncidence());
        }
        $entity->setConfig($config);
        $entity->setProcess('Approved');
        $em->persist($entity);
        $em->flush();
    }

    public function getItemUpdateQuantity($item , $fieldName = '')
    {

        $qb = $this->createQueryBuilder('e');
        if($fieldName == 'sales'){
            $qb->select('SUM(e.salesQuantity) AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('SUM(e.salesReturnQuantity) AS quantity');
        }elseif($fieldName == 'purchase'){
            $qb->select('SUM(e.purchaseQuantity) AS quantity');
        }elseif($fieldName == 'purchase-return'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'damage'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'opening'){
            $qb->select('SUM(e.openingQuantity) AS quantity');
        }elseif($fieldName == 'assets'){
            $qb->select('SUM(e.assetsQuantity) AS quantity');
        }elseif($fieldName == 'assets-return'){
            $qb->select('SUM(e.assetsReturnQuantity) AS quantity');
        }
        $qb->where("e.item ={$item->getId()}");
        $qb->andWhere("e.process = :process")->setParameter('process','Approved');
        $quantity = $qb->getQuery()->getOneOrNullResult();
        return $quantity['quantity'];

    }

    private function getTaxTariffCalculation($subTotal,$tariff)
    {
        $value = 0;
        $value = (($subTotal * $tariff)/100);
        return $value;
    }

    public function getSalesItemUpdate(Sales $entity){

        $em = $this->_em;

        /** @var $item StockItem  */

        if($entity->getStockItems()){

            /* @var $item StockItem */

            foreach($entity->getStockItems() as $item ){
                $item->setProcess('Approved');
                $item->setAssetsQuantity($item->getSalesQuantity());
                $item->setSalesQuantity(0);
                $em->persist($entity);
                $em->flush();
            }
        }
    }


    public function getPurchaseInsertQnt(Receive $entity){

        $em = $this->_em;

        /** @var $item ReceiveItem  */

        if($entity->getReceiveItems()){
            foreach($entity->getReceiveItems() as $item ){
                $this->processStockQuantity($entity->getConfig(),$item,'purchase');
            }
        }
    }

    public function getStockPriceOverview($inventory,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchaseItem','pi');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
    //    $qb->andWhere("e.process = :process");
     //   $qb->setParameter('process', 'process');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function modeWiseStockItem($inventory,$mode ='purchase',$data)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->join('stock.category', 'category');
        $qb->leftJoin('item.productUnit', 'u');
        $qb->select("item.id AS itemId","item.name AS name","item.sku AS sku","u.name AS unit");
        $qb->addSelect("SUM(stock.assetsQuantity) AS assetsQuantity","SUM(stock.salesQuantity) AS salesQuantity");
        $qb->addSelect('category.name');
        $qb->addSelect('u.name as unit');
        $qb->where("stock.config = :inventory")->setParameter('inventory', $inventory);
        $qb->andWhere("stock.mode = :mode")->setParameter('mode', $mode);
        $this->handleWithSearch($qb,$data);
        $qb->orderBy('item.name','ASC');
        $qb->groupBy('item.id');
        $qb->getQuery()->getArrayResult();
        return  $qb;

    }

    public function  getPreviousItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.co = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }

    public function tillStockItem($mode,$inventory,$data)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));

            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');

            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }
        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function periodicStockItem($mode,$inventory,$data)
    {
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.config = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) and !empty($endDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
            if (!empty($startDate) and !empty($endDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function operationalStockItem($inventory,$data)
    {
        $mode = isset($data['mode'])? $data['mode'] :'';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('stock.product', 'm');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.config = :inventory");
        $qb->setParameter('inventory', $inventory);

        if(!empty($mode)){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : '';
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : '';
        if (!empty($startDate and !empty($endDate)) ) {
            $qb->andWhere("stock.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("stock.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function stockGroupItemName($inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'product';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.'.$group, 'item');
        $qb->select("item.name AS name");
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('stock.'.$group);
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function groupStockItem($mode,$inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'product';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.'.$group, 'item');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.config = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if(!empty($mode) and  $mode != 'previous'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }
        $qb->groupBy('stock.'.$group);
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;


    }

    public function getGroupStock($inventory,$group)
    {

        $vendor         = $group == 'vendor' ? $group :'';
        $masterItem     = $group == 'product' ? $group :'';
        $brand          = $group == 'brand' ? $group :'';
        $color          = $group == 'color' ? $group :'';
        $size           = $group == 'size' ? $group :'';
        $category       = $group == 'category' ? $group :'';


        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('e.item AS itemId');
        $qb->addSelect('SUM(e.quantity) AS quantity');

        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($masterItem)) {
            $qb->addSelect('m.name AS masterItem');
            $qb->leftJoin('item.masterItem', 'm');
            $qb->groupBy('item.masterItem');
            $qb->orderBy('m.name','ASC');
        }

        if (!empty($brand)) {
            $qb->addSelect('b.name AS brand');
            $qb->join('item.brand', 'b');
            $qb->groupBy('item.brand');
            $qb->orderBy('b.name','ASC');
        }
        if (!empty($color)) {
            $qb->addSelect('c.name AS color');
            $qb->join('item.color', 'c');
            $qb->groupBy('item.color');
            $qb->orderBy('c.name','ASC');
        }
        if (!empty($size)) {
            $qb->addSelect('s.name AS size');
            $qb->join('item.size', 's');
            $qb->groupBy('item.size');
            $qb->orderBy('s.name','ASC');
        }
        if (!empty($vendor)) {
            $qb->addSelect('v.companyName AS vendor');
            $qb->addSelect('v.mobile AS mobile');
            $qb->join('item.vendor', 'v');
            $qb->groupBy('item.vendor');
            $qb->orderBy('v.companyName','ASC');
        }
        if (!empty($category)) {
            $qb->addSelect('cat.name AS category');
            $qb->join('item.masterItem', 'm');
            $qb->join('m.category','cat');
            $qb->groupBy("m.category");
            $qb->orderBy('cat.name','ASC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getProcessStock($inventory,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->join('e.purchaseItem', 'pi');
        $qb->join('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id AS itemId');
        $qb->addselect('item.name AS name');
        $qb->addselect('item.sku AS sku');
        $qb->addselect('m.name AS masterItem');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.name AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function  getGroupPurchaseItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }

    public function getSizeStock($inventory,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.stockItem','e');
        $qb->join('pi.purchase','p');
        $qb->join('pi.item','item');
        $qb->join('item.masterItem','m');
        $qb->join('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->join('item.vendor', 'v');
        $qb->select('m.name AS masterItem');
        $qb->addselect('p.grn AS grn');
        $qb->addselect('p.updated AS created');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.companyName AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(pi.quantity) AS purchaseQuantity');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $qb->groupBy('pi.purchase');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getItemBaseStock($inventory)
    {

        $process    = isset($data['process'])? $data['process'] :'purchase';
        $startDate  = isset($data['startDate'])? $data['startDate'] :'';
        $endDate    = isset($data['endDate'])? $data['endDate'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($startDate)) {
            $qb->andWhere("e.created = :created");
            $qb->setParameter('created', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.created = :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->groupBy('e.item');
        $qb->getQuery();
        return  $qb;


    }


    public  function getStockOverview($inventory,$data=''){

        $purchase = $this->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $this->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $this->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $this->getSumStock($inventory,'sales',$data);
        $salesReturn = $this->getSumStock($inventory,'salesReturn',$data);
        $damage = $this->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>        $purchase,
            'purchaseReturn'=>  $purchaseReturn,
            'purchaseReplace'=> $purchaseReplace,
            'sales'=>           $sales,
            'salesReturn'=>     $salesReturn,
            'damage'=>          $damage,
            'remaining'=>       $remaining
        );
        return $data;

    }

    private function getSumStock($inventory, $process ='' , $data)
    {
        $item = isset($data['item'])? $data['item'] :'';
        $color = isset($data['color'])? $data['color'] :'';
        $size = isset($data['size'])? $data['size'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);

        if (!empty($item)) {

            $qb->join('item.masterItem', 'm');
            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($color)) {

            $qb->join('item.color', 'c');
            $qb->andWhere("c.name = :color");
            $qb->setParameter('color', $color);
        }
        if (!empty($size)) {

            $qb->join('item.size', 's');
            $qb->andWhere("s.name = :size");
            $qb->setParameter('size', $size);
        }
        if (!empty($vendor)) {
            $qb->join('item.vendor', 'v');
            $qb->andWhere("v.companyName = :vendor");
            $qb->setParameter('vendor', $vendor);
        }
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }

    private function getStockBarcodeWise($process, $inventory, $data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public function purchaseItemStockRemoveQnt(Purchase $purchase){

        $em = $this->_em;
        foreach($purchase->getPurchaseItems() as $purchaseItem ){

            $stockItem = $this->_em->getRepository('InventoryBundle:StockItem')->findOneBy(array('purchaseItem' => $purchaseItem));
            if(!empty($stockItem)){
                $em->remove($stockItem);
                $em->flush();
            }
        }
    }

    public function barcodeWiseStock($user , $purchaseItem)
    {
        $table = '';
        $em = $this->_em;
        /* @var GlobalOption $globalOption */
        $globalOption = $user->getGlobalOption();
        $inventory = $globalOption->getconfig()->getId();
        if($purchaseItem){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $table .= '<thead class="flip-content ">';
            $table .= '<tr class="head-blue" >';
            $table .= '<td>Barcode</td>';
            $table .= '<td>Item Name</td>';
            $table .= '<th>(+)Purchase</th>';
            $table .= '<th>(-)P.Return</th>';
            $table .= '<th>(-)Sales</th>';
            $table .= '<th>(+)S.Return</th>';
            $table .= '<th>(-)Damage</th>';
            $table .= '<th>Remaining</th>';
            $table .='</tr>';
            $table .= '</thead>';

            foreach ($purchaseItem as $row){
                $table .='<tr>';
                $table .= '<td>'.$row['barcode'].'</td>';
                $table .= '<td>'.$row['name'].'</td>';
                    $data = array('barcode' => $row['barcode']);
                    $purchase = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($process ='purchase',$inventory,$data);
                    $purchaseReturn = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='purchaseReturn',$inventory,$data);
                    $sales = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='sales',$inventory,$data);
                    $salesReturn = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='salesReturn',$inventory,$data);
                    $damage = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='damage',$inventory,$data);

                    $purchase = !empty($purchase) ? (int)$purchase['quantity'] :0;
                    $purchaseReturn = !empty($purchaseReturn) ? (int)$purchaseReturn['quantity'] :0;
                    $sales = !empty($sales) ? (int)$sales['quantity'] :0;
                    $salesReturn = !empty($salesReturn) ? (int)$salesReturn['quantity'] :0;
                    $damage = !empty($damage) ? (int)$damage['quantity'] :0;

                    $remainingQnt=  ($purchase + $salesReturn ) + ( $purchaseReturn + $sales + $damage );

                $table .= '<td>'.$purchase.'</td>';
                $table .= '<td>'.$purchaseReturn.'</td>';
                $table .= '<td>'.$sales.'</td>';
                $table .= '<td>'.$salesReturn.'</td>';
                $table .= '<td>'.$damage.'</td>';
                $table .= '<td><b>'.$remainingQnt.'</b></td>';
                $table .='</tr>';
            }
            $table .='</table>';

            return $table;

        }else{

            return false;
        }

    }

    public function barcodeWiseBranchItem($user , $purchaseItem)
    {
        $table = '';
        $em = $this->_em;
        $globalOption = $user->getGlobalOption();
        if($purchaseItem){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $table .= '<thead class="flip-content ">';
            $table .= '<tr class="head-blue" >';
            $table .= '<td>Barcode</td>';
            $table .= '<td>Item Name</td>';
            $table .= '<td>Central Stock</td>';
            $branches = $globalOption->getBranches();
            foreach ($branches as $branch) {
                $table .= '<td>' .$branch->getName().'</td>';
            }
            $table .= '<td>Remaining Stock</td>';
            $table .='</tr>';
            $table .= '</thead>';

            foreach ($purchaseItem as $row){
                $table .='<tr>';
                $table .= '<td>'.$row['barcode'].'</td>';
                $table .= '<td>'.$row['name'].'</td>';
                $table .= '<td>'.$row['quantity'].'</td>';
                $branchQnt = 0;
                $branchTotalReceiveQnt = 0;
                foreach ($branches as $branch) {

                    $data = array('barcode' => $row['barcode']);
                    $receiveItem =  $em->getRepository('InventoryBundle:Delivery')->getStockOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $returnItem =  $em->getRepository('InventoryBundle:Delivery')->getReturnOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $ongoingItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOngoingOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $salesItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $salesReturnItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesReturnOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);

                    $receiveItemQnt = !empty($receiveItem) ? (int)$receiveItem['quantity'] :0;
                    $returnItemQnt = !empty($returnItem) ? (int)$returnItem['quantity'] :0;
                    $ongoingItemQnt = !empty($ongoingItem) ? (int)$ongoingItem['quantity'] :0;
                    $salesItemQnt = !empty($salesItem) ? (int)$salesItem['quantity'] :0;
                    $salesReturnItemQnt = !empty($salesReturnItem) ? (int)$salesReturnItem['quantity'] :0;

                    $branchSalesQnt = ( $ongoingItemQnt + $salesItemQnt + $returnItemQnt) - $salesReturnItemQnt;
                    $branchRemainingQnt =  $receiveItemQnt - $branchSalesQnt ;
                    $currentBranchQnt = ($receiveItemQnt - $returnItemQnt);
                    $branchTotalReceiveQnt += $currentBranchQnt;

                    if($receiveItemQnt > 0){
                        $table .= '<td>'.$receiveItemQnt.' - '.$branchSalesQnt.' = <b>'.$branchRemainingQnt.'</b></td>';
                    }else{
                        $table .= '<td>&nbsp;</td>';
                    }

                }
                $remainingQnt = ($row['quantity'] - $branchTotalReceiveQnt);
                $table .= '<td><b>'.$remainingQnt.'</b></td>';
                $table .='</tr>';
            }
            $table .='</table>';

            return $table;

        }else{

            return false;
        }
    }

    public function singleBarcodeWiseBranchItem($user , $row)
    {
        $table = '';
        $em = $this->_em;
        $globalOption = $user->getGlobalOption();
        if($row){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $branches = $globalOption->getBranches();
                $table .='<tr>';
                $table .= '<td>Central Stock</td>';
                $table .= '<td>'.$row['quantity'].'</td>';
                $table .='</tr>';
                $totalRemainingQnt = 0;
                foreach ($branches as $branch) {

                    $table .='<tr>';
                    $table .= '<td>'.$branch->getName().'</td>';
                    $data = array('barcode' => $row['barcode']);
                    $receiveItem =  $em->getRepository('InventoryBundle:Delivery')->getStockOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $returnItem =  $em->getRepository('InventoryBundle:Delivery')->getReturnOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $ongoingItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOngoingOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $salesItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);
                    $salesReturnItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesReturnOverview( $globalOption->getconfig()->getId(), $branch->getId() , $data);

                    $receiveItemQnt = !empty($receiveItem) ? (int)$receiveItem['quantity'] :0;
                    $returnItemQnt = !empty($returnItem) ? (int)$returnItem['quantity'] :0;
                    $ongoingItemQnt = !empty($ongoingItem) ? (int)$ongoingItem['quantity'] :0;
                    $salesItemQnt = !empty($salesItem) ? (int)$salesItem['quantity'] :0;
                    $salesReturnItemQnt = !empty($salesReturnItem) ? (int)$salesReturnItem['quantity'] :0;

                    $branchSalesQnt = ( $ongoingItemQnt + $salesItemQnt + $returnItemQnt) - $salesReturnItemQnt;
                    $branchRemainingQnt = $receiveItemQnt  - $branchSalesQnt ;
                    if($receiveItemQnt > 0){
                        $totalRemainingQnt += $branchRemainingQnt;
                        $table .= '<td>'.$receiveItemQnt.' - '.$branchSalesQnt.' = <b>'.$branchRemainingQnt.'</b></td>';
                    }else{
                        $table .= '<td>&nbsp;</td>';
                    }
                    $table .='</tr>';

                }
                $table .='<tr>';
                $table .= '<td>Central Rmn. Stock</td>';
                $table .= '<td>'.( $row['quantity'] - (int)$totalRemainingQnt) .'</td>';
                $table .='</tr>';

            $table .='</table>';

            return $table;

        }else{

            return false;
        }



    }

    public  function getSalesItemOverview($inventory, $data = array()){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.item','item');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('COUNT(stock.id) AS totalItem');
        $qb->addSelect('SUM(stock.quantity * stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.quantity * stock.salesPrice) AS salesPrice');
        $qb->addSelect('item.name AS name');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public  function reportStockItemPurchaseSales(User $user, $data = array()){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';
        $inventory = $user->getGlobalOption()->getconfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.item','item');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('COUNT(stock.id) AS totalItem');
        $qb->addSelect('SUM(stock.quantity * stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.quantity * stock.salesPrice) AS salesPrice');
        $qb->addSelect('item.name AS name');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public  function getSales($inventory, $data='' ){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Sales','e');
        $qb->select('e');
        $qb->where("e.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }

        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public  function getSalesReturnItem($inventory, $group ='item', $data=''){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $process = isset($data['process']) ? $data['process'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','e');
        $qb->join('e.salesReturn','salesreturn');
        $qb->join('e.salesItem','stock');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.salesPrice) AS salesPrice');
        $qb->where("salesreturn.config = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('stock.'.$group);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }


    public function stockItemUpdateQuantity(Item $item , $mode = "")
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.item = :item')->setParameter('item', $item->getId());
        $qb->andWhere('e.process = :process')->setParameter('process', 'Approved');
        $qb->andWhere('e.mode = :mode')->setParameter('mode', $mode);
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }


    public function saleaItemStockReverse(Sales $sales)
    {
        $em = $this->_em;
        /* @var $item StockItem */
        foreach ($sales->getStockItems() as $item ){
            $StockItem = $em->createQuery('DELETE InventoryBundle:StockItem e WHERE e.salesItem = '.$item->getId());
            $StockItem->execute();
        }
    }

    public function getItemQuantity($item,$process = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.item='.$item);
        $qb->andWhere("e.process =:process")->setParameter('process',$process);
        $quantity = $qb->getQuery()->getOneOrNullResult()['quantity'];
        return abs($quantity);
    }

    public function getPurchaseItemQuantity(PurchaseItem $item,$process = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.purchaseItem='.$item->getId());
        $qb->andWhere("e.process IN (:process)")->setParameter('process',$process);
        $quantity = $qb->getQuery()->getOneOrNullResult()['quantity'];
        return abs($quantity);
    }



    /* ========================= Sales ==================================================== */

    public function checkSalesQuantity($purchaseItem)
    {
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.sales','sales');
        $qb->addSelect('SUM(stock.salesQuantity) as quantity ');
        $qb->where("stock.purchaseItem = :purchaseItem");
        $qb->setParameter('purchaseItem', $purchaseItem);
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier','Hold')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        if(!empty($quantity['quantity'])){
            return $quantity['quantity'];
        }else{
            return 0;
        }
    }

    public function checkSalesStockQuantity($item)
    {
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.sales','sales');
        $qb->addSelect('SUM(stock.salesQuantity) as quantity ');
        $qb->where("stock.item = :item")->setParameter('item', $item);
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier','Hold')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        if(!empty($quantity['quantity'])){
            return $quantity['quantity'];
        }else{
            return 0;
        }
    }

    public function updateSalesItemPrice(StockItem $entity)
    {
        $em = $this->_em;
        $subTotal = ($entity->getSalesPrice() * $entity->getSalesQuantity());
        $entity->setSubTotal($subTotal);
        if($entity->getItem()->getVatProduct()){

            /* @var $vat TaxTariff */
            $vat = $entity->getItem()->getVatProduct();
            $subTotal = $entity->getSubTotal();
            $entity->setHsCode($entity->getItem()->getVatProduct());
            if($vat->getSupplementaryDuty() > 0){
                $entity->setSupplementaryDutyPercent($vat->getSupplementaryDuty());
                $amount = $this->getTaxTariffCalculation($subTotal,$vat->getSupplementaryDuty());
                $entity->setSupplementaryDuty($amount);
            }

            if($vat->getValueAddedTax() > 0){
                $entity->setValueAddedTaxPercent($vat->getValueAddedTax());
                $amount = $this->getTaxTariffCalculation($subTotal,$vat->getValueAddedTax());
                $entity->setValueAddedTax($amount);
            }

            if($vat->getAdvanceIncomeTax() > 0){
                $entity->setAdvanceIncomeTaxPercent($vat->getAdvanceIncomeTax());
                $cd = $this->getTaxTariffCalculation($subTotal,$vat->getAdvanceIncomeTax());
                $entity->setAdvanceIncomeTax($cd);
            }

            if($vat->getRecurringDeposit() > 0){
                $entity->setRecurringDepositPercent($vat->getRecurringDeposit());
                $cd = $this->getTaxTariffCalculation($subTotal,$vat->getRecurringDeposit());
                $entity->setRecurringDeposit($cd);
            }

            if($vat->getAdvanceTradeVat() > 0){
                $entity->setAdvanceTradeVatPercent($vat->getAdvanceTradeVat());
                $cd = $this->getTaxTariffCalculation($subTotal,$vat->getAdvanceTradeVat());
                $entity->setAdvanceTradeVat($cd);
            }

            $TTI = ($entity->getCustomsDuty() + $entity->getSupplementaryDuty() + $entity->getValueAddedTax() + $entity->getAdvanceIncomeTax() + $entity->getRecurringDeposit() + $entity->getAdvanceTradeVat());
            $entity->setTotalTaxIncidence($TTI);
        }
        $entity->setTotal($entity->getSubTotal() + $entity->getTotalTaxIncidence());
        if($entity->getPurchaseItem()->getAssuranceToCustomer()){
            $entity->setAssuranceType($entity->getPurchaseItem()->getAssuranceType());
            $entity->setAssuranceFromVendor($entity->getPurchaseItem()->getAssuranceFromVendor()->getName());
            $entity->setAssuranceToCustomer($entity->getPurchaseItem()->getAssuranceToCustomer()->getName());
            if($entity->getPurchaseItem()->getAssuranceToCustomer() and $entity->getPurchaseItem()->getAssuranceToCustomer()->getDays() > 0){
                $effected = $entity->getUpdated();
                $datetime = $effected->add(new \DateInterval("P{$entity->getPurchaseItem()->getAssuranceToCustomer()->getDays()}D"));
                $entity->setExpiredDate($datetime);
            }
        }
        $em->persist($entity);
        $em->flush();
    }

    public function insertSalesItems(Sales $sales, $purchaseItem)
    {
        $em = $this->_em;

        $item = $em->getRepository('AssetsBundle:PurchaseItem')->find($purchaseItem);

        /* @var $item PurchaseItem */

        $entity = $this->findOneBy(array('mode'=>'sales','sales'=> $sales,'purchaseItem'=> $purchaseItem));

        if(!empty($entity)){

            $qnt = ($entity->getSalesQuantity()+1);
            $entity->setQuantity('-'.$qnt);
            $entity->setSalesQuantity($qnt);
            $entity->setSubTotal($item->getSalesPrice() * $entity->getSalesQuantity());
            $this->updateSalesItemPrice($entity);
        }else{
            $entity = new StockItem();
            $entity->setQuantity('-1');
            $entity->setSalesQuantity(1);
            $entity->setPurchaseItem($item);
            $entity->setSales($sales);
            $entity->setItem($item->getItem());
            $entity->setSalesPrice($item->getSalesPrice());
            $entity->setPrice($item->getSalesPrice());
            $entity->setSubTotal($item->getSalesPrice());
            $this->updateSalesItemPrice($entity);
            if($item->getItem()->getBrand()){
                $entity->setBrand($item->getItem()->getBrand());
            }
            if($item->getItem()->getCategory()){
                $entity->setCategory($item->getItem()->getCategory());
            }
            if($item->getPurchase()) {
                $entity->setPurchase($item->getPurchase());
                $entity->setVendor($item->getPurchase()->getVendor());
            }
            $entity->setPurchasePrice($item->getPurchasePrice());
        }
        $entity->setConfig($sales->getConfig());
        $entity->setMode('sales');
        $em->persist($entity);
        $em->flush();
    }



    public function getSalesItems(Sales $sales , $device = '' )
    {
        $isAttribute = $sales->getConfig()->isAttribute();
        $entities = $sales->getStockItems();

        $data = '';
        $i = 1;
        /* @var $entity StockItem */

        foreach( $entities as $entity){

            $option = '';
            if(!empty($entity->getPurchaseItem()->getExternalSerial())){

                $salesSerials = explode(",",$entity->getSerialNo());
                $serials = explode(",",$entity->getPurchaseItem()->getExternalSerial());
                $option .="<select class='serial-no m-wrap inputs span12' id='serialNo-{$entity->getId()}' name='serialNo[]' multiple='multiple'>";
                $option .="<option>--Serial no--</option>";
                foreach ($serials as $serial){
                    $selected = in_array($serial,$salesSerials) ? 'selected=selected':'';
                    $option.="<option {$selected} value='{$serial}'>{$serial}</option>";
                }
                $option .="</select>";
            }

            if (!empty($entity->getItem()) and !empty($entity->getItem()->getProductUnit())){
                $unit = '-'.$entity->getItem()->getProductUnit()->getName();
            } else{
                $unit = '';
            }

            if($entity->getPurchaseItem()->getName()){
                $itemName = $entity->getItem()->getName().'-'.$entity->getPurchaseItem()->getName();
            }else{
                $itemName = $entity->getItem()->getName();
            }
            $hsCode = ($entity->getItem()->getVatProduct()) ? $entity->getItem()->getVatProduct()->getHsCode():'';

            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td>{$i}</td>";
            $data .= "<td>{$entity->getPurchaseItem()->getBarcode()}</td>";
            $data .= "<td>{$itemName}</td>";
            $data .= "<td>{$hsCode}</td>";
            if ($isAttribute == 1){
                $data .= "<td>{$option}</td>";
            }
            $data .="<td>";
            $data .="<input type='text' name='quantity[]' rel='{$entity->getId()}'  id='salesQuantity-{$entity->getId()}' class='td-inline-input quantity' value='{$entity->getSalesQuantity()}' min=1 max={$entity->getPurchaseItem()->getQuantity()} placeholder='{$entity->getPurchaseItem()->getQuantity()}'>";
            $data .="</td>";
            $data .="<td>";
            $data .="<input type='text' name='price[]' rel='{$entity->getId()}'  id='salesPrice-{$entity->getId()}' class='td-inline-input salesPrice' value='{$entity->getSalesPrice()}' placeholder='{$entity->getSalesPrice()}'>";
            $data .="</td>";
            $data .="<td><span id='itemSubTotal-{$entity->getId()}' >{$entity->getSubTotal()}</td>";
            $data .="<td>{$entity->getValueAddedTaxPercent()}</td>";
            $data .="<td><span id='itemVat-{$entity->getId()}' >{$entity->getValueAddedTax()}</td>";
            $data .="<td><span id='itemTotalTaxIncidence-{$entity->getId()}' >{$entity->getTotalTaxIncidence()}</td>";
            $data .="<td><span id='itemTotal-{$entity->getId()}' >{$entity->getTotal()}</td>";
            $data .="<td>";
            if ($isAttribute == 1 and !empty($entity->getPurchaseItem()->getExternalSerial())) {
                $data .= "<a id='{$entity->getId()}'  data-url='/tally/sales/{$entity->getId()}/update-serial-no' href='javascript:' class='btn blue mini serialSave' ><i class='icon-save'></i></a>";
            }
            $data .="<a id='{$entity->getId()}'  rel='/tally/item-sales/{$entity->getSales()->getId()}/{$entity->getId()}/delete' href='javascript:' class='btn red mini delete' ><i class='icon-trash'></i></a>";
            $data .="</td>";
            $data .='</tr>';
            $i++;
        }
        return $data;
    }

    public function itemPurchaseDetails(AssetsConfig $inventory,$item)
    {

        $data ='';
        $qb = $this->createQueryBuilder('stock');
        $qb->leftJoin('stock.purchase','purchase');
        $qb->join('stock.purchaseItem','purchaseItem');
        $qb->select('SUM(stock.quantity) as quantity ');
        $qb->addSelect('purchase.grn as grn');
        $qb->addSelect('purchaseItem.name as name','purchaseItem.barcode as barcode','purchaseItem.id as id','purchaseItem.salesPrice as salesPrice','purchaseItem.externalSerial as externalSerial','stock.updated as receiveDate');
        $qb->where("stock.item = :item")->setParameter('item', $item);
        $qb->andWhere("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->having("SUM(stock.quantity) > 0");
        $qb->groupBy("stock.purchaseItem");

        $results =  $qb->getQuery()->getArrayResult();

        foreach($results as $purchaseItem  ) {

            $grn = $purchaseItem['grn'];
            $received = $purchaseItem['receiveDate']->format('d-m-Y');
            $isAttribute = $inventory->isAttribute();
            $option ="";
            if(!empty($purchaseItem['externalSerial'])){
                $serials = explode(",",$purchaseItem['externalSerial']);
                $option .="<select class='serial-no' id='serialNo-{$purchaseItem['id']}' name='serialNo' multiple='multiple'>";
                $option .="<option>--Serial no--</option>";
                foreach ($serials as $serial){
                    $option.="<option value='{$serial}'>{$serial}</option>";
                }
                $option .="</select>";
            }
            $ongoingSalesQnt = $this->_em->getRepository('AssetsBundle:StockItem')->checkSalesQuantity($purchaseItem['id']);
            $remaining = $purchaseItem['quantity'] - $ongoingSalesQnt;
            $data .= "<tr>";
            $data .= "<td>{$purchaseItem['barcode']}</td>";
            $data .= "<td>{$purchaseItem['name']}</td>";
            $data .= "<td>{$received}/{$grn}</td>";
            $data .= "<td>{$ongoingSalesQnt}</td>";
            $data .= "<td>{$remaining}</td>";
            $data .= "<td>{$option}</td>";
            $data .= "<td><input type='number'   id='purchaseSalesPrice-{$purchaseItem['id']}' class='td-inline-input' value='{$purchaseItem['salesPrice']}' placeholder='Enter sales price'></td>";
            $data .= "<td><div class='input-appned'><input type='number'  id='purchaseQuantity-{$purchaseItem['id']}' class='td-inline-input quantity' value='1' min=1 max={$remaining} placeholder='{$remaining}'><a class='btn mini blue addSales' href='javascript:' id='{$purchaseItem['id']}'><i class='icon-shopping-cart'></i> Add</a></div></td>";
            $data .= "</tr>";
        }
        return $data;

    }


}