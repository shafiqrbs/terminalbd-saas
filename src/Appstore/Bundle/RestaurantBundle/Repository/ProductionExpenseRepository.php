<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Appstore\Bundle\RestaurantBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionBatch;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionElement;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionExpense;
use Doctrine\ORM\EntityRepository;



/**
 * ProductionElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionExpenseRepository extends EntityRepository
{

    public function productionExpenseStockItemUpdate(Particular  $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.particular = :particular')->setParameter('particular', $stockItem->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function productionElementExpense(ProductionBatch $batch)
    {
        $em = $this->_em;

        /* @var $elm ProductionElement */

        foreach ($batch->getProductionItem()->getProductionItems() as $elm):

            $expense = new ProductionExpense();
            $exist = $this->findOneBy(array('productionBatch' => $batch ,'productionElement' => $elm));
            if($exist){ $expense = $exist; }
            $expense->setProductionItem($batch->getProductionItem());
            $expense->setProductionBatch($batch);
            $expense->setProductionElement($elm);
            $expense->setParticular($elm->getMaterial());
            $expense->setQuantity($elm->getQuantity()  * $batch->getQuantity());
            $em->persist($expense);
            $em->flush();
            $em->getRepository('RestaurantBundle:Particular')->updateRemoveStockQuantity($expense->getParticular(),"production");
            if($elm->getMaterial()->getRestaurantConfig()->isStockHistory() == 1 ) {
                $em->getRepository('RestaurantBundle:RestaurantStockHistory')->processInsertProductionItem($expense);
            }

        endforeach;

    }

    public function salesProductionElementExpense(InvoiceParticular $batch)
    {
        $em = $this->_em;

        /* @var $elm ProductionElement */

        foreach ($batch->getParticular()->getProductionItems() as $elm):

            $expense = new ProductionExpense();
            $exist = $this->findOneBy(array('salesItem' => $batch ,'productionElement' => $elm));
            if($exist){ $expense = $exist; }
            $expense->setProductionItem($batch->getParticular());
            $expense->setSalesItem($batch);
            $expense->setProductionElement($elm);
            $expense->setParticular($elm->getMaterial());
            $expense->setQuantity($elm->getQuantity()  * $batch->getQuantity());
            $em->persist($expense);
            $em->flush();
            $em->getRepository('RestaurantBundle:Particular')->updateRemoveStockQuantity($expense->getParticular(),"production");
            if($elm->getMaterial()->getRestaurantConfig()->isStockHistory() == 1 ) {
                $em->getRepository('RestaurantBundle:RestaurantStockHistory')->processInsertProductionItem($expense);
            }

        endforeach;

    }



}
