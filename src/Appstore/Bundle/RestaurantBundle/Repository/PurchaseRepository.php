<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\Purchase;
use Appstore\Bundle\RestaurantBundle\Entity\PurchaseItem;
use Doctrine\ORM\EntityRepository;


/**
 * PurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRepository extends EntityRepository
{

    public function updatePurchaseTotalPrice(Purchase $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('RestaurantBundle:PurchaseItem','si')
            ->select('sum(si.purchaseSubTotal) as total')
            ->where('si.purchase = :entity')
            ->setParameter('entity', $entity ->getId())
            ->getQuery()->getSingleResult();

        if($total['total'] > 0){

            $entity->setSubTotal($total['total']);
            $entity->setNetTotal($entity->getSubTotal() - $entity->getDiscount());
            $entity->setDue($entity->getNetTotal() - $entity->getPayment() );

        }else{

            $entity->setSubTotal(0);
            $entity->setNetTotal(0);
            $entity->setDue(0);
            $entity->setDiscount(0);
        }

        $em->persist($entity);
        $em->flush();

        return $entity;

    }

    public function purchaseTransactionReverse(Purchase $entity){

        $em = $this->_em;
        $accountCash = $em->createQuery("DELETE AccountingBundle:AccountPurchase e WHERE e.restaurantPurchase = {$entity->getId()}");
        if(!empty($accountCash)){
            $accountCash->execute();
        }

    }

    public function reversePurchaseParticularUpdate(Purchase $invoice)
    {
        $em = $this->_em;

        /** @var PurchaseItem $item */
        foreach($invoice->getPurchaseItems() as $item ){
            /** @var Particular  $particular */
            $particular = $item->getParticular();
            $qnt = ($particular->getPurchaseQuantity() - $item->getQuantity());
            $particular->setPurchaseQuantity($qnt);
            $em->persist($particular);
            $em->flush();
            $em->getRepository('RestaurantBundle:Particular')->remainingQnt($particular);
        }
    }


}
