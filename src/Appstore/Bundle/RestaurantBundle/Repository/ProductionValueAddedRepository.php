<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionValueAdded;
use Doctrine\ORM\EntityRepository;


/**
 * DamageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionValueAddedRepository extends EntityRepository
{

    public function getProductionAdded(Particular $item)
    {
        $productionValueAddeds = $this->findBy(array('productionItem'=>$item));
        if(empty($productionValueAddeds)){
           $this->initialValueAdded($item);
        }

    }

    private function initialValueAdded(Particular $item){

        $em = $this->_em;
        $values = $em->getRepository('RestaurantBundle:Particular')->findWithSearch($item->getRestaurantConfig(),array('value-added'));
        foreach ($values as $value){
           //$valueAdded = $em->getRepository('RestaurantBundle:Particular')->find($value['id']);
            if($value->getStatus() == 1){
                $entity = new ProductionValueAdded();
                $entity->setValueAdded($value);
                $entity->setProductionItem($item);
                $entity->setAmount(0);
                $em->persist($entity);
                $em->flush($entity);
            }

        }
    }

    public function insertItemKeyValue(Particular $item , $data)
    {

        $em = $this->_em;
        $i = 0;
        foreach ($data['valueAddedId'] as $value) {
            $amount = $data['amount'][$i];
            $metaId = isset($data['valueAddedId'][$i]) ? $data['valueAddedId'][$i] : 0;

            /* @var  $itemKeyValue ProductionValueAdded */

            $itemKeyValue = $this->find($metaId);
            if ($itemKeyValue and $amount > 0) {
                $itemKeyValue->setAmount($amount);
                $em->flush();
            }
            $i ++;
        }
        $qb = $this->createQueryBuilder('item');
        $qb->select('SUM(item.amount) as amount');
        $qb->where("item.productionItem = :item")->setParameter('item', $item->getId());
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'] > 0 ? $result['amount']:0;

    }

    public function totalValues(Particular $item)
    {
        $em = $this->_em;
        $i = 0;
        $qb = $this->createQueryBuilder('item');
        $qb->select('SUM(item.amount) as amount');
        $qb->where("item.productionItem = :item")->setParameter('item', $item->getId());
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'] > 0 ? $result['amount']:0;

    }

    public function updateProductionValueAddedParticular(Particular $particular)
    {
        $id = $particular->getId();
        $elem = "UPDATE `restaurant_value_added` as sub
SET sub.amount = 0)
WHERE sub.valueAdded_id =:material";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
        $qb1->bindValue('material', $id);
        $qb1->execute();
    }

}
