<?php

namespace Appstore\Bundle\RestaurantBundle\Repository;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionElement;
use Appstore\Bundle\RestaurantBundle\Entity\Purchase;
use Appstore\Bundle\RestaurantBundle\Entity\PurchaseItem;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\RestaurantConfig;
use Doctrine\ORM\EntityRepository;


/**
 * ProductionElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionElementRepository extends EntityRepository
{
    public function insertProductionElement($particular, $data)
    {
        $em = $this->_em;
        $existParticular = $this->_em->getRepository('RestaurantBundle:ProductionElement')->findOneBy(array('item'=> $particular,'material' => $data['particularId']));
        if(empty($existParticular)){
            $entity = new ProductionElement();
            $entity->setItem($particular);
            $material = $this->_em->getRepository('RestaurantBundle:Particular')->find($data['particularId']);
            $entity->setMaterial($material);
            $entity->setPrice($data['price']);
            $entity->setQuantity($data['quantity']);
            $entity->setSubTotal($data['quantity'] * $data['price']);
            $em->persist($entity);
            $em->flush();

        }else{

            /* @var $existParticular ProductionElement */

           $existParticular->setPrice($data['price']);
           $existParticular->setQuantity($data['quantity']);
           $existParticular->setSubTotal($data['quantity'] * $data['price']);
           $em->flush();

        }
    }

    public function copyElement($newEntity,$oldEntity)
    {
        /* @var $newEntity Particular */
        /* @var $oldEntity Particular */

        $em = $this->_em;

        /* @var $element ProductionElement */

        foreach ($oldEntity->getProductionItems() as $element):
            $entity = new ProductionElement();
            $entity->setItem($newEntity);
            $entity->setMaterial($element->getMaterial());
            $entity->setPrice($element->getPrice());
            $entity->setQuantity($element->getQuantity());
            $entity->setSubTotal($element->getSubTotal());
            $em->persist($entity);
            $em->flush();

        endforeach;
    }



    public function getProductionPrice(Particular $particular)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('sum(e.price * e.quantity) as purchasePrice');
        $qb->where('e.item = :particular');
        $qb->setParameter('particular', $particular);
        return $qb->getQuery()->getOneOrNullResult()['purchasePrice'];
    }

    public function particularProductionElements(Particular $particular)
    {
        $entities = $particular->getProductionItems();
        $data = '';
        $i = 1;

        /* @var $entity ProductionElement */

        foreach ($entities as $entity) {

            $subPrice = $entity->getPrice() * $entity->getQuantity();
            $unit = !empty($entity->getMaterial()->getUnit() && !empty($entity->getMaterial()->getUnit()->getName())) ? $entity->getMaterial()->getUnit()->getName():'Unit';
            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td class='span1' >{$i}</td>";
            $data .= "<td class='span3' >{$entity->getMaterial()->getName()}</td>";
            $data .= "<td class='span1' >{$entity->getQuantity()}</td>";
            $data .= "<td class='span1' >{$unit}</td>";
            $data .= "<td class='span1' >{$entity->getPrice()}</td>";
            $data .= "<td class='span1' >{$subPrice}</td>";
            $data .= "<td class='span1' ><a id='{$entity->getId()}' data-url='/restaurant/production/{$particular->getId()}/{$entity->getId()}/delete' href='javascript:' class='btn red mini delete' ><i class='icon-trash'></i></a></td>";
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function updatePurchaseItemPrice(Purchase $purchase)
    {

        /* @var $item PurchaseItem */

        foreach ($purchase->getPurchaseItems()  as $item ){

            $id = $item->getId();
            $price = $item->getPurchasePrice();
            $elem = "UPDATE `restaurant_production_element` as sub
SET sub.price = $price , sub.subTotal = (sub.quantity * $price)
WHERE sub.material_id =:material";
            $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
            $qb1->bindValue('material', $id);
            $qb1->execute();

        }

    }


}
