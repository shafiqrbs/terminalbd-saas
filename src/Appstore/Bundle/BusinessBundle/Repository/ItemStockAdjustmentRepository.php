<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessConfig;
use Appstore\Bundle\BusinessBundle\Entity\BusinessParticular;
use Appstore\Bundle\InventoryBundle\Entity\Item;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Appstore\Bundle\MedicineBundle\Entity\MedicineVendor;
use Doctrine\ORM\EntityRepository;


/**
 * HmsVendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemStockAdjustmentRepository extends EntityRepository
{

   public function findWithSearch($config,$data)
   {
       $name = isset($data['name'])? $data['name'] :'';
       $brand = isset($data['brandName'])? $data['brandName'] :'';
       $qb = $this->createQueryBuilder('e');
       $qb->select('e');
       $qb->join('e.item','item');
       $qb->where('e.config = :config')->setParameter('config', $config);
       if (!empty($sku)) {
           $qb->andWhere($qb->expr()->like("item.sku", "'%$sku%'"  ));
       }
       if (!empty($brand)) {
           $qb->andWhere($qb->expr()->like("item.brandName", "'%$brand%'"  ));
       }
       if (!empty($name)) {
           $qb->andWhere($qb->expr()->like("item.name", "'%$name%'"  ));
       }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return $result;
   }


    public function adjustmentStockItemUpdate(BusinessParticular $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity','SUM(e.bonus) AS bonus');
        $qb->where('e.item = :stock')->setParameter('stock', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt;
    }


}
