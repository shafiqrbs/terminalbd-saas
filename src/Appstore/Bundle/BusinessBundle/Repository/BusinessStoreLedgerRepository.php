<?php

namespace Appstore\Bundle\BusinessBundle\Repository;

use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoice;
use Appstore\Bundle\BusinessBundle\Entity\BusinessStore;
use Appstore\Bundle\BusinessBundle\Entity\BusinessStoreLedger;
use Appstore\Bundle\RestaurantBundle\Entity\Invoice;
use Appstore\Bundle\RestaurantBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\Purchase;
use Appstore\Bundle\RestaurantBundle\Entity\PurchaseItem;
use Appstore\Bundle\RestaurantBundle\Entity\RestaurantConfig;
use Doctrine\ORM\EntityRepository;


/**
 * WearHouseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessStoreLedgerRepository extends EntityRepository
{

    protected function handleSearchBetween($qb,$data)
    {


        $customer = isset($data['customer'])? $data['customer'] :'';
        $store = isset($data['store'])? $data['store'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';
        if (!empty($customer)) {
            $qb->join('e.store','sr');
            $qb->join('sr.customer','c');
            $qb->andWhere("c.id = :user")->setParameter('user', $customer);
        }
        if (!empty($store)) {
            $qb->join('e.store','sr');
            $qb->andWhere("sr.id = :sr")->setParameter('sr', $store);
        }
        if (!empty($startDate)) {
            $compareTo = new \DateTime($startDate);
            $created =  $compareTo->format('Y-m-d 00:00:00');
            $qb->andWhere("e.created >= :created");
            $qb->setParameter('created', $created);
        }
        if (!empty($endDate)) {
            $compareTo = new \DateTime($endDate);
            $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
            $qb->andWhere("e.created <= :createdEnd");
            $qb->setParameter('createdEnd', $createdEnd);
        }

    }

    public function invoiceLists($config, $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config) ;
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function getStoreBalance($store)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('COALESCE(SUM(e.debit),0) AS debit,COALESCE(SUM(e.credit),0) AS credit');
        $qb->where("e.store = :store");
        $qb->setParameter('store', $store);
        $qb->andWhere("e.status = 1");
        $result = $qb->getQuery()->getOneOrNullResult();
        $balance =($result['debit']- $result['credit']);
        return $balance;
    }

    public function approveStorePayment(BusinessStoreLedger $ledger,$user)
    {
        $em = $this->_em;
        $ledger->setApprovedBy($user);
        $ledger->setStatus(1);
        $em->flush();
        $balance = $this->getStoreBalance($ledger->getStore()->getId());
        $ledger->setBalance($balance);
        $store = $ledger->getStore();
        $store->setBalance($balance);
        $em->flush();
    }

    public function storeInvoiceReverse(BusinessInvoice $entity)
    {
        $em = $this->_em;
        /* @var $ledger BusinessStoreLedger */
        foreach ($entity->getStoreLedgers() as $ledger):
            $ledger->setApprovedBy(NULL);
            $ledger->setStatus(false);
            $em->persist($ledger);
            $em->flush();
            $balance = $this->getStoreBalance($ledger->getStore()->getId());
            $ledger->setBalance($balance);
            $store = $ledger->getStore();
            $store->setBalance($balance);
            $em->flush();
        endforeach;
    }

}
