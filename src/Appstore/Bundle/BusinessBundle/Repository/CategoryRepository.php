<?php

namespace Appstore\Bundle\BusinessBundle\Repository;

use Appstore\Bundle\BusinessBundle\Entity\Category;
use Appstore\Bundle\RestaurantBundle\Entity\Invoice;
use Appstore\Bundle\RestaurantBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\Purchase;
use Appstore\Bundle\RestaurantBundle\Entity\PurchaseItem;
use Appstore\Bundle\RestaurantBundle\Entity\RestaurantConfig;
use Doctrine\ORM\EntityRepository;
use EnhancedProxy7cd10d21_8ff6cbabb6f6412f670558de8644bea16421ae5d\__CG__\Appstore\Bundle\BusinessBundle\Controller\BusinessCategoryController;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * ParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{

    public function setCategorySorting($data)
    {
        $i = 1;
        $em = $this->_em;
        foreach ($data as $key => $value){
            $particular = $this->findOneBy(array('status'=> 1,'id' => $value));
            $particular->setSorting($i);
            $em->persist($particular);
            $em->flush();
            $i++;
        }
    }


    public function getApiCategory(GlobalOption $option)
    {

        $config = $option->getBusinessConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('e.status = :status')->setParameter('status',1) ;
        $qb->orderBy('e.sorting','ASC');
        $result = $qb->getQuery()->getResult();

        $data = array();

        /* @var $row Category */

        foreach($result as $key => $row) {

            $data[$key]['global_id']        = (int) $option->getId();
            $data[$key]['category_id']      = (int) $row->getId();
            $data[$key]['name']             = $row->getName();
            $data[$key]['slug']             = $row->getSlug();

        }

        return $data;
    }

}
