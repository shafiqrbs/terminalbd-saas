<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessDistributionReturnItem;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoice;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoiceParticular;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoiceReturnItem;
use Appstore\Bundle\BusinessBundle\Entity\BusinessParticular;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchaseReturn;
use Appstore\Bundle\BusinessBundle\Entity\BusinessPurchaseReturnItem;
use Doctrine\ORM\EntityRepository;

/**
 * MedicinePurchaseReturnItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessDistributionReturnItemRepository extends EntityRepository
{

    public function findWithSearch($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity','SUM(e.damageQnt) AS damageQnt','SUM(e.spoilQnt) AS spoilQnt');
        $qb->addSelect('s.id AS id','s.name AS name','s.purchasePrice AS purchasePrice');
        $qb->join('e.businessParticular','s');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config) ;
        $datetime = new \DateTime("now");
        $end = $datetime->format('Y-m-d 00:00:00');
        $qb->andWhere("e.created < :endDate");
        $qb->setParameter('endDate', $end);
        $qb->groupBy('s.name');
        $qb->orderBy('s.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;


    }
    public function todayReturnItems($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity','SUM(e.damageQnt) AS damageQnt','SUM(e.spoilQnt) AS spoilQnt');
        $qb->addSelect('s.id AS id','s.name AS name','s.purchasePrice AS purchasePrice');
        $qb->join('e.businessParticular','s');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config) ;
        $datetime = new \DateTime("now");
        $start = $datetime->format('Y-m-d 00:00:00');
        $end = $datetime->format('Y-m-d 23:59:59');
        $qb->andWhere("e.created >= :start")->setParameter('start', $start);
        $qb->andWhere("e.created <= :endDate")->setParameter('endDate', $end);
        $qb->groupBy('s.name');
        $qb->orderBy('s.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach ($result as $row){
            $data[$row['id']] = $row;
        }
        return  $data;


    }

    public function returnRemainingStock($config)
    {
        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.remainingQnt) AS quantity');
        $qb->addSelect('s.id AS id');
        $qb->join('e.businessParticular','s');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config);
        $qb->having('quantity > 0');
        $qb->groupBy('s.id');
        $result = $qb->getQuery()->getArrayResult();
        $remains = $em->getRepository('BusinessBundle:BusinessPurchaseReturnItem')->remainingStock($config);
        $data = array();
        foreach ($result as $row){
            if($remains and isset($remains[$row['id']]) and $remains[$row['id']]['quantity'] > 0){
                $data[$row['id']] = (int) ($row['quantity'] - $remains[$row['id']]['quantity']);
            }else{
                $data[$row['id']] = (int) $row['quantity'];
            }
        }
        return  $data;

    }

    public function returnRemainingStockItem($config,$item)
    {
        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.remainingQnt) AS quantity');
        $qb->join('e.businessParticular','s');
        $qb->where('e.businessConfig = :config')->setParameter('config', $config);
        $qb->andWhere('e.businessParticular = :item')->setParameter('item', $item);
        $row = $qb->getQuery()->getSingleScalarResult();
        $remains = $em->getRepository('BusinessBundle:BusinessPurchaseReturnItem')->remainingStockItem($config,$item);
        if($remains  > 0){
            $quantity = (int) ($row - $remains);
        }else{
            $quantity = (int) $row;
        }
        return  $quantity;

    }

    public function purchaseReturnStockUpdate(BusinessParticular $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.businessParticular = :businessParticular')->setParameter('businessParticular', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function insertPurchaseReturnItem(BusinessPurchaseReturn $entity, $data)
    {
        $em = $this->_em;

        $itemIds = $data['itemId'];
        $quantity= $data['quantity'];
        $price = $data['price'];
        foreach ($itemIds as $key  => $itemId):

            if($quantity[$key] > 0 ){

                $product = $em->getRepository('BusinessBundle:BusinessParticular')->find($itemId);
                $item = new BusinessPurchaseReturnItem();
                $item->setBusinessPurchaseReturn($entity);
                $item->setBusinessParticular($product);
                $item->setQuantity($quantity[$key]);
                $item->setPurchasePrice($price[$key]);
                $item->setSubTotal($price[$key] * $quantity[$key]);
                $em->persist($item);
                $em->flush();

            }

        endforeach;
    }

    public function insertSalesDamageReturnItem(BusinessInvoiceReturnItem $entity)
    {
        $em = $this->_em;
        $exist = $em->getRepository('BusinessBundle:BusinessDistributionReturnItem')->findOneBy(array('invoiceReturnItem' => $entity));
        if(empty($exist)){
            $item = new BusinessDistributionReturnItem();
            $item->setBusinessConfig($entity->getParticular()->getBusinessConfig());
            $item->setInvoiceReturnItem($entity);
            $item->setBusinessParticular($entity->getParticular());
            $item->setQuantity($entity->getQuantity());
            $item->setDamageQnt($entity->getQuantity());
            $item->setPurchasePrice($entity->getParticular()->getPurchasePrice());
            $item->setSubTotal($entity->getQuantity() * $entity->getParticular()->getPurchasePrice());
            $em->persist($item);
            $em->flush();
        }

    }

    public function deleteSalesDamageReturnItem(BusinessInvoiceReturnItem $invoiceParticular)
    {
        $em = $this->_em;
        $entity = $this->findOneBy(array('invoiceReturnItem' => $invoiceParticular->getId()));
        if($entity){
            $em->remove($entity);
            $em->flush();
        }

    }

    public function deletePurchaseReturnItem(BusinessInvoiceParticular $invoiceParticular)
    {
       $em = $this->_em;
       $entity = $this->findOneBy(array('salesInvoiceItem' => $invoiceParticular->getId()));
       if($entity){
           $em->remove($entity);
           $em->flush();
           $em->getRepository('BusinessBundle:BusinessParticular')->updateRemoveStockQuantity($invoiceParticular->getBusinessParticular(), "purchase-return");
       }

    }

    public function removePurchaseReturn(BusinessInvoice $entity)
    {
        $em = $this->_em;
        foreach ($entity->getBusinessInvoiceParticulars() as $particular){
            $this->deletePurchaseReturnItem($particular);
        }
        $entity = $em->getRepository('BusinessBundle:BusinessPurchaseReturn')->findOneBy(array('businessConfig' => $entity->getBusinessConfig(),'salesInvoice' => $entity->getInvoice()));
        if($entity){
            $em->remove($entity);
            $em->flush();
        }
    }

    public function insertUpdateDistributionReturnItem( BusinessInvoice $invoice)
    {
        $em = $this->_em;

        /* @var $item BusinessInvoiceParticular */

        foreach ($invoice->getBusinessInvoiceParticulars() as $item):

            $item->getId();
            $exist = $em->getRepository('BusinessBundle:BusinessDistributionReturnItem')->findOneBy(array('businessConfig' => $invoice->getId(),'salesInvoice'=>$invoice->getId(), 'salesInvoiceItem' => $item->getId()));

            /* @var $purchaseItem BusinessPurchaseReturnItem */

            if($exist){
                $purchaseItem = $exist;
                $purchaseItem->setBusinessConfig($invoice->getBusinessConfig());
                $purchaseItem->setSalesInvoice($invoice->getId());
                $purchaseItem->setSalesInvoiceItem($item->getId());
                $purchaseItem->setBusinessParticular($item->getBusinessParticular());
                $purchaseItem->setDamageQnt($item->getDamageQnt());
                $purchaseItem->setSpoilQnt($item->getSpoilQnt());
                $purchaseItem->setQuantity($item->getDamageQnt() + $item->getSpoilQnt());
                $purchaseItem->setRemainingQnt($purchaseItem->getQuantity());
                $purchaseItem->setPurchasePrice($item->getBusinessParticular()->getPurchasePrice());
                $purchaseItem->setSubTotal($item->getBusinessParticular()->getPurchasePrice() * $purchaseItem->getQuantity());
                $em->persist($purchaseItem);
                $em->flush();
                $em->getRepository('BusinessBundle:BusinessParticular')->updateRemoveStockQuantity($item->getBusinessParticular(),"purchase-return");
            }elseif($item->getDamageQnt() > 0 or $item->getSpoilQnt() ) {
                $purchaseItem = new BusinessDistributionReturnItem();
                $purchaseItem->setBusinessConfig($invoice->getBusinessConfig());
                $purchaseItem->setSalesInvoice($invoice->getId());
                $purchaseItem->setSalesInvoiceItem($item->getId());
                $purchaseItem->setBusinessParticular($item->getBusinessParticular());
                $purchaseItem->setDamageQnt($item->getDamageQnt());
                $purchaseItem->setSpoilQnt($item->getSpoilQnt());
                $purchaseItem->setQuantity($item->getDamageQnt() + $item->getSpoilQnt());
                $purchaseItem->setRemainingQnt($purchaseItem->getQuantity());
                $purchaseItem->setPurchasePrice($item->getBusinessParticular()->getPurchasePrice());
                $purchaseItem->setSubTotal($item->getBusinessParticular()->getPurchasePrice() * $purchaseItem->getQuantity());
                $em->persist($purchaseItem);
                $em->flush();
            }
        endforeach;
    }


    public  function reportDamageStockItem($stocks){

        $ids = array();
        foreach ($stocks as $stock){
            $ids[] =  $stock->getId();
        }
        $qb = $this->createQueryBuilder('si');
        $qb->join('si.businessParticular','mds');
        $qb->select('SUM(si.remainingQnt) AS quantity');
        $qb->addSelect('mds.id AS mdsId');
        $qb->where('mds.id IN (:mids)');
        $qb->setParameter('mids', $ids);
        $qb->groupBy('mds.id');
        $qb->orderBy('mds.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $arras = array();
        foreach ($result as $row){
            $arras[$row['mdsId']] = $row['quantity'];
        }
        return $arras;
    }
}
