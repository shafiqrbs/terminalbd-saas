<?php

namespace Appstore\Bundle\BusinessBundle\Repository;
use Appstore\Bundle\BusinessBundle\Entity\BusinessConfig;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoice;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoiceAccessories;
use Appstore\Bundle\BusinessBundle\Entity\BusinessInvoiceParticular;
use Appstore\Bundle\BusinessBundle\Entity\BusinessParticular;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * BusinessInvoiceParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessInvoiceAccessoriesRepository extends EntityRepository
{

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $startDate = $datetime->format('Y-m-d 00:00:00');
            $endDate = $datetime->format('Y-m-d 23:59:59');
        }elseif(!empty($data['startDate']) and !empty($data['endDate'])){
            $start = new \DateTime($data['startDate']);
            $startDate = $start->format('Y-m-d 00:00:00');
            $end = new \DateTime($data['endDate']);
            $endDate = $end->format('Y-m-d 23:59:59');
        }
        if (!empty($startDate) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
    }

    public function findInvoiceAccessories($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.dmsConfig = :config')->setParameter('config', $config);
        $qb->orderBy('e.updated','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public function insertInvoiceAccessories(BusinessInvoice $invoice, $data)
    {
        $em = $this->_em;
        $entity = new BusinessInvoiceParticular();
        $quantity = !empty($data['quantity']) ? $data['quantity'] :1;
        $accessoriesId = $data['accessories'];
        $accessories = $em->getRepository('BusinessBundle:BusinessParticular')->find($accessoriesId);
        $entity->setBusinessParticular($accessories);
        $entity->setParticular($accessories->getName());
        $entity->setPrice($accessories->getPurchasePrice());
        $entity->setQuantity($quantity);
        if($accessories->getUnit()){
            $entity->setUnit($accessories->getUnit()->getName());
        }
        $entity->setPrice($accessories->getPrice());
        $entity->setSubTotal($quantity * $accessories->getPrice());
        $entity->setBusinessInvoice($invoice);
        $em->persist($entity);
        $em->flush();
    }

    public function reportAccessoriesOut(BusinessConfig $config , $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.subTotal) as subTotal');
        $qb->where('e.dmsConfig = :config')->setParameter('config', $config);
        $this->handleDateRangeFind($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['subTotal'];
    }

    public function getAccessoriesItemOut(BusinessConfig $config , $data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.dmsParticular','particular');
        $qb->select('SUM(e.subTotal) as subTotal');
        $qb->addSelect('SUM(e.quantity) as quantity');
        $qb->addSelect('particular.name as particularName');
        $qb->addSelect('particular.id');
        $qb->where('particular.dmsConfig = :config')->setParameter('config', $config);
        $this->handleDateRangeFind($qb,$data);
        $qb->groupBy('particular.id');
        $results = $qb->getQuery()->getArrayResult();
        return $results;

    }




}
