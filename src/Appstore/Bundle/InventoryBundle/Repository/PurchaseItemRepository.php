<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Item;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseItem;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseVendorItem;
use Doctrine\ORM\EntityRepository;
use Appstore\Bundle\InventoryBundle\Entity\SalesItem;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PurchaseItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseItemRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {

            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {
                $qb->andWhere("pi.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->join('item.masterItem', 'mProduct');
                $qb->andWhere("mProduct.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }

            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }

            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('item.masterItem', 'product');
                $qb->join('product.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }
        }

    }

    public function findWithSearch($inventory,$data)
    {
        $item = isset($data['item'])? $data['item'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $brand = isset($data['brand'])? $data['brand'] :'';
        $barcode = isset($data['barcode'])? $data['barcode'] :'';

        $assuranceType = isset($data['assuranceType'])? $data['assuranceType'] :'';
        $assuranceToCustomer = isset($data['assuranceToCustomer'])? $data['assuranceToCustomer'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';
        $serialNo = isset($data['serialNo'])? $data['serialNo'] :'';

        $qb = $this->createQueryBuilder('pi');
        $qb->join("pi.purchase",'purchase');
        $qb->join("pi.item",'item');
        $qb->where("purchase.inventoryConfig = :inventoryConfig");
        $qb->setParameter('inventoryConfig', $inventory);

        if (!empty($item)) {
            $qb->join('item.masterItem', 'm');
            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($brand)) {
            $qb->join('item.brand', 'b');
            $qb->andWhere("b.name = :brand");
            $qb->setParameter('brand', $brand);
        }

        if (!empty($grn)) {
            $qb->andWhere("purchase.grn = :grn");
            $qb->setParameter('grn', $grn);
        }
        if (!empty($barcode)) {
            $qb->andWhere("pi.barcode = :barcode");
            $qb->setParameter('barcode', $barcode);
        }
        if (!empty($assuranceType)) {
            $qb->andWhere("pi.assuranceType = :assuranceType");
            $qb->setParameter('assuranceType', $assuranceType);
        }
        if (!empty($assuranceToCustomer)) {
            $qb->andWhere("pi.assuranceToCustomer = :assuranceToCustomer");
            $qb->setParameter('assuranceToCustomer', $assuranceToCustomer);
        }
        if(!empty($startDate) and !empty($endDate)){
            $start = new \DateTime($endDate);
            $startDate = $start->format('Y-m-d 00:00:00');
            $end = new \DateTime($endDate);
            $endDate = $end->format('Y-m-d 23:59:59');
            $qb->andWhere("pi.expiredDate >= :startDate");
            $qb->setParameter('startDate', $startDate);
            $qb->andWhere("pi.expiredDate <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if (!empty($serialNo)) {
            $qb->andWhere($qb->expr()->like("pi.serialNo", "'%$serialNo%'"  ));
        }
        $qb->orderBy('item.name','ASC');
        $sql = $qb->getQuery();
        return $sql;

    }

    public function getPurchaseItems(GlobalOption $globalOption , $data)
    {
        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.purchase','e');
        $qb->join('pi.item','item');
        $qb->select('pi.barcode');
        $qb->addSelect('pi.quantity');
        $qb->addSelect('item.name');
        $qb->addSelect('pi.serialNo');
        $qb->addSelect('pi.expiredDate');
        $qb->addSelect('pi.assuranceType');
        $qb->addSelect('pi.assuranceFromVendor');
        $qb->addSelect('pi.assuranceToCustomer');
        $qb->where("e.inventoryConfig = :inventoryConfig");
        $qb->setParameter('inventoryConfig', $globalOption->getInventoryConfig()->getId());
        $this->handleWithSearch($qb,$data);
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery();
        return $result;
    }

    public function getPurchaseItemCount($item)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(pi.id)');
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->where("pi.item = :item");
        $qb->setParameter('item', $item->getId());
        $count = $qb->getQuery()->getSingleScalarResult();
        if($count > 0 ){
            return $count+1;
        }else{
            return 1;
        }
        return $item;
    }


    public function getPurchaseItemQuantity($purchase,$purchaseVendorItem = 0 )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('sum(e.quantity)  as totalQnt', 'count(e.id)  as totalItem');
        $qb->from('InventoryBundle:PurchaseItem', 'e');
        $qb->where("e.purchase = :purchase");
        $qb->setParameter('purchase', $purchase->getId());
        if ($purchaseVendorItem > 0){
            $qb->andWhere("e.purchaseVendorItem = :purchaseVendorItem");
            $qb->setParameter('purchaseVendorItem', $purchaseVendorItem );
        }
        $qb = $qb->getQuery()->getSingleResult();
        return $qb;
    }

    public function findBarcode($item)
    {
        $avg = $this->getItemAveragePrice($item->getItem());
        $data  = '';
        $data .='<div class="span4">';
        $data .='<ul class="unstyled">';
        $data .='<li><strong>Vendor #:</strong> '.$item->getPurchase()->getVendor()->getCompanyName().'</li>';
        $data .='<li><strong>Received:</strong> xxx</li>';
        $data .='</ul>';
        $data .='</div>';
        $data .='<div class="span4">';
        $data .='<ul class="unstyled">';
        $data .='<li><strong>Purchase:</strong> '.$item->getPurchasePrice().'</li>';
        $data .='<li><strong>Sales:</strong> '.$item->getSalesPrice().'</li>';
        $data .='</ul>';
        $data .='</div>';
        $data .='<div class="span4">';
        $data .='<ul class="unstyled">';
        $data .='<li><strong>Purse.average:</strong> '.number_format($avg['purchaseAvg']).'</li>';
        $data .='<li><strong>Sls.average:</strong> '.number_format($avg['salesAvg']).'</li>';
        $data .='</ul>';
        $data .='</div>';

        return $data;
    }

    public function getItemAveragePrice($item)
    {
             return $qbAvg = $this->createQueryBuilder('pi')
            ->select("avg(pi.salesPrice) as salesAvg, avg(pi.purchasePrice) as purchaseAvg")
            ->where('pi.item = :item')
            ->setParameter('item', $item->getId())
            ->getQuery()->getSingleResult();
    }

    public function getItemList($purchase)
    {
        $entities = $purchase->getPurchaseItems();
        $data = '';
        foreach( $entities as $entity){
           $data .=' <tr id="remove-'.$entity->getId().'">';
            $data .='<td class="numeric" >'.$entity->getName().'</td>';
            $data .='<td class="numeric" >'.$entity->getItem()->getSkuSlug().'</td>';
            $data .='<td class="numeric" >'.$entity->getQuantity().'</td>';
            $data .='<td class="numeric" >'.$entity->getPurchasePrice().'</td>';
            $data .='<td class="numeric" >'.$entity->getPurchaseSubTotal().'</td>';
            $data .='<td class="numeric" >'.$entity->getSalesPrice().'</td>';
            $data .='<td class="numeric" >'.$entity->getSalesSubTotal().'</td>';
            $data .='<td class="numeric" >'.$entity->getWebPrice().'</td>';
            $data .='<td class="numeric" >'.$entity->getWebSubTotal().'</td>';
            $data .='<td class="numeric" >
                     <a id="'.$entity->getId().'" title="Are you sure went to delete ?" rel="/inventory/purchaseitem/'.$entity->getId().'/delete" href="javascript:" class="btn red mini delete" ><i class="icon-trash"></i></a>
                     </td>';
            $data .='</tr>';
        }
        return $data;

    }

    public function getBarcodeForPrint($inventory,$data)
    {

        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.item', 'item');
        $qb->join('item.inventoryConfig', 'ic');
        $qb->select('pi');
        $qb->where($qb->expr()->in("pi.id", $data ));
        $qb->andWhere("ic.id = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('item.name','ASC');
        return $qb->getQuery()->getResult();
    }

    public function getManualSalesItem($inventory,$data)
    {

        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.item', 'item');
        $qb->join('pi.purchase', 'purchase');
        $qb->join('purchase.inventoryConfig', 'ic');
        $qb->select('pi');
        $qb->where($qb->expr()->in("pi.id", $data ));
        $qb->andWhere("ic.id = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('item.name','ASC');
        return $qb->getQuery()->getResult();

    }

    public function returnPurchaseItemDetails($inventory,$barcode)
    {
        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.item', 'item');
        $qb->join('pi.purchase', 'p');
        $qb->select('pi');
        $qb->where("pi.barcode = :barcode" );
        $qb->setParameter('barcode', $barcode);
        $qb->andWhere("p.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $row = $qb->getQuery()->getOneOrNullResult();
        if($row){
            return $row;
        }
        return false;
    }

    public function searchAutoComplete($item, InventoryConfig $inventory)
    {

        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.purchase', 'p');
        $qb->join('pi.stockItem', 'stockitem');
        $qb->select('pi.barcode as id');
        $qb->addSelect('pi.barcode as text');
        $qb->addSelect('SUM(stockitem.quantity) as item_name');
        $qb->where($qb->expr()->like("pi.barcode", "'$item%'"  ));
        $qb->andWhere("p.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('p.updated', 'ASC');
        $qb->setMaxResults( '10' );
        return $qb->getQuery()->getResult();

    }

    public function generatePurchaseVendorItem(Purchase $purchase)
    {
        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.purchase', 'p');
        $qb->join('pi.item','item');
        $qb->join('item.masterItem','product');
        $qb->select('SUM(pi.quantity) as quantity');
        $qb->addSelect('product.id as productId');
        $qb->addSelect('product.name as productName');
        $qb->addSelect('AVG(pi.purchasePrice) as purchase');
        $qb->addSelect('AVG(pi.salesPrice) as sales');
        $qb->where("p.id = :id");
        $qb->setParameter('id', $purchase->getId());
        $qb->groupBy('item.masterItem');
        $data = $qb->getQuery()->getArrayResult();
        foreach ($data as $row){

           $purchaseVendorItem = $this->_em->getRepository('InventoryBundle:PurchaseVendorItem')->findOneBy(array('purchase' => $purchase ,'masterItem' => $row['productId']));
           $entity = new PurchaseVendorItem();
           if(!empty($purchaseVendorItem)){
               $entity = $purchaseVendorItem;
           }
           $product = $this->_em->getRepository('InventoryBundle:Product')->find($row['productId']);
           $entity->setPurchase($purchase);
           $entity->setInventoryConfig($purchase->getInventoryConfig());
           $entity->setMasterItem($product);
           $entity->setName($row['productName']);
           $entity->setPurchasePrice($row['purchase']);
           $entity->setSalesPrice($row['sales']);
           $entity->setWebPrice($row['sales']);
           $entity->setQuantity($row['quantity']);
           $entity->setMasterQuantity($row['quantity']);
           $this->_em->persist($entity);
           $this->_em->flush($entity);

       }

        /* @var PurchaseItem $item */

        foreach ($purchase->getPurchaseItems() as $item){

            $masterItem = $item->getItem()->getMasterItem();
            $purchaseVendorItem = $this->_em->getRepository('InventoryBundle:PurchaseVendorItem')->findOneBy(array('purchase' => $purchase ,'masterItem' => $masterItem));
            $item->setPurchaseVendorItem($purchaseVendorItem);
            $this->_em->persist($item);
            $this->_em->flush($item);
        }


    }


    public function insertPurchaseItemAttribute($data){

        $em = $this->_em;

        foreach($data['purchaseItem'] as $key => $val ){
            $entity = $this->find($val);
            $entity->setAssuranceFromVendor($data['assuranceFromVendor'][$key]);
            $entity->setAssuranceToCustomer($data['assuranceToCustomer'][$key]);
            $entity->setAssuranceType($data['assuranceType'][$key]);
            $entity->setSerialNo($data['serialNo'][$key]);
            if($data['expiredDate'][$key]){
                $datetime = (new \DateTime($data['expiredDate'][$key]));
                $entity->setExpiredDate($datetime);
            }else{

            }
            $em->flush();
        }

    }

    public function itemPurchaseQuantitySum(InventoryConfig $inventory,Item $entity )
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchase', 'p');
        $qb->select('sum(e.quantity)  as quantity');
        $qb->where("e.item = :item");
        $qb->setParameter('item', $entity->getId());
        $qb->andWhere("p.process = 'approved'");
        $qb->andWhere("p.inventoryConfig = :purchase");
        $qb->setParameter('purchase', $inventory->getId());
        $result = $qb->getQuery()->getOneOrNullResult();
        $quantity = $result['quantity'] > 0 ? $result['quantity']:0;
        return $quantity;

    }

    public function getPurchaseItemRemainingProduct(Item $entity, $purchaseItem = "")
    {
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.salesItems','si');
        $qb->select('e.id  as id','e.barcode  as barcode','e.quantity  as quantity');
        $qb->addSelect('COALESCE(SUM(e.quantity),0) AS salesQuantity');
        $qb->where("e.item = :item")->setParameter('item', $entity->getId());
        $qb->groupBy('e.id');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function getPurchaseItemRemaining($purchaseItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.salesItems','si');
        $qb->select('e.id  as id','e.barcode  as barcode','e.quantity  as quantity');
        $qb->addSelect('COALESCE(SUM(e.quantity),0) AS salesQuantity');
        $qb->where("e.id = :item")->setParameter('item', $purchaseItem);
        $result = $qb->getQuery()->getOneOrNullResult();
        $quantity = ($result['quantity'] - $result['salesQuantity']);
        return $quantity;

    }

    public function findItemWithPurchaseQuantity(InventoryConfig $inventory)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchase', 'p');
        $qb->join('e.item', 'item');
        $qb->select('sum(e.quantity)  as quantity');
	    $qb->addSelect('SUM(e.quantity * e.purchasePrice) AS purchasePrice');
        $qb->addSelect('item.id  as itemId');
        $qb->where("p.process = 'approved'");
        $qb->andWhere("p.inventoryConfig = :purchase");
        $qb->setParameter('purchase', $inventory->getId());
        $qb->groupBy('item.id');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function getExistingSerialNo($id)
    {

        $purchaseItem = $this->find($id);
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.salesItems','s');
        $qb->select('e.serialNo as serialNo');
        $qb->addSelect('GROUP_CONCAT(s.serialNo) as salesSerialNo');
        $qb->where("e.id = {$id}");
        $qb->groupBy('e.id');
        $result = $qb->getQuery()->getOneOrNullResult();
        $array1 = explode(',', $result['serialNo']);
        $array2 = explode(',', $result['salesSerialNo']);
        $array = array_diff($array1, $array2);
        return $array;

    }


    public function  getApiPurchaseItem(GlobalOption $option , $data = '')
    {

        $config = $option->getInventoryConfig()->getId();
        $qb = $this->createQueryBuilder('si');
        $qb->join('si.stockItem','e');
        $qb->join('e.masterItem','m');
        $qb->join('m.category','c');
        $qb->leftJoin('m.productUnit','u');
        $qb->select('si.id as id','e.id as stockId','si.barcode as barcode','e.name as name','e.remainingQnt as quantity','e.salesPrice as salesPrice','e.purchaseAvgPrice as purchasePrice','e.path as path');
        $qb->addSelect('u.id as unitId','u.name as unitName');
        $qb->addSelect('c.id as categoryId','c.name as categoryName');
        $qb->where('e.inventoryConfig = :config');
        $qb->setParameter('config',$config);
        if(isset($data['category']) and !empty($data['category'])){
            $catid = $data['category'];
            $qb->andWhere('c.id = :catid');
            $qb->setParameter('catid',$catid);
        }
        $qb->orderBy('e.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($result as $key => $row) {

            $data[$key]['global_id']            = (int) $option->getId();
            $data[$key]['item_id']              = (int) $row['stockId'];

            $data[$key]['category_id']          = $row['categoryId'];
            $data[$key]['categoryName']         = $row['categoryName'];
            if ($row['unitId']){
                $data[$key]['unit_id']          = $row['barcode'];
                $data[$key]['unit']             = $row['unitName'];
            }else{
                $data[$key]['unit_id']          = $row['barcode'];
                $data[$key]['unit']             = '';
            }
            $data[$key]['name']                 = $row['name'];
            $data[$key]['printName']            = $row['name'];
            $data[$key]['quantity']             = $row['quantity'];
            $data[$key]['salesPrice']           = $row['salesPrice'];
            $data[$key]['purchasePrice']        = $row['purchasePrice'];
            $data[$key]['printHidden']          = "";

        }
        return $data;
    }


    public function  processSerialNo($config){

        $serilaNos = $this->getAllSerialNo();
        foreach ($serilaNos as $row){
            $data = explode(",",$row['serialNo']);
            $id = $row['id'];
            $item = $row['item'];
            $config = $row['config'];
            foreach ($data as $serial){
                $elem = "INSERT INTO inv_purchase_item_serial(`inventoryConfig_id`,`item_id`,`purchaseItem_id`,barcode,status) VALUES ($config,$item,$id,trim('$serial'),0)";
                $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
                $qb1->execute();
            }
        }
    }

    public function getAllSerialNo()
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','i');
        $qb->join('e.purchase','p');
        $qb->join('p.inventoryConfig','c');
        $qb->select('e.id as id','c.id as config','i.id as item','e.serialNo as serialNo');
        $qb->where("e.serialNo !=''");
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }



}
