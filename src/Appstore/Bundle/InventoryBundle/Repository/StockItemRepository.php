<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Order;
use Appstore\Bundle\EcommerceBundle\Entity\OrderItem;
use Appstore\Bundle\InventoryBundle\Entity\Damage;
use Appstore\Bundle\InventoryBundle\Entity\Item;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseItem;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseReturnItem;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesItem;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturnItem;
use Appstore\Bundle\InventoryBundle\Entity\StockItem;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * ItemStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockItemRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $startDate = isset($data['startDate'])  ? date('Y-m-d',strtotime($data['startDate'])) : '';
            $endDate =   isset($data['endDate'])  ? date('Y-m-d',strtotime($data['endDate'])) : '';
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';

            if (!empty($data['startDate']) ) {
                $qb->andWhere("p.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {
                $qb->andWhere("p.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {

                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);

            }
        }

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $unit = isset($data['unit'])? $data['unit'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {

                $qb->join('e.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('m.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }

            if (!empty($unit)) {
                $qb->join('m.productUnit','u');
                $qb->andWhere("b.name = :unit");
                $qb->setParameter('unit', $unit);
            }

        }

    }

    protected function handleSearchDateBetween($qb,$data)
    {

        $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
        $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
        if (!empty($startDate)) {
            $start = date('Y-m-d 00:00:00',strtotime($startDate));
            $qb->andWhere("sales.created >= :startDate");
            $qb->setParameter('startDate',$start);
        }

        if (!empty($endDate)) {
            $end = date('Y-m-d 23:59:59',strtotime($startDate));
            $qb->andWhere("sales.created <= :endDate");
            $qb->setParameter('endDate',$end);
        }

    }


    public function getStockPriceOverview($inventory,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchaseItem','pi');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
    //    $qb->andWhere("e.process = :process");
     //   $qb->setParameter('process', 'process');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function stockItem($inventory,$data)
    {


        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select("item.name AS name");
        $qb->addSelect("item.id AS itemId");
        $qb->addSelect("item.sku AS sku");
        $qb->addSelect("u.name AS unit");
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleWithSearch($qb,$data);
        $qb->orderBy('item.name','ASC');
        $qb->groupBy('item.id');
        $qb->getQuery()->getArrayResult();
        return  $qb;

    }

    public function  getPreviousItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }

    public function tillStockItem($mode,$inventory,$data)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));

            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');

            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }
        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $tillDate = !empty($data['tillDate']) ? date('Y-m-d',strtotime($data['tillDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $tillDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $tillDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function periodicStockItem($mode,$inventory,$data)
    {
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('item.masterItem', 'm');
        $qb->leftJoin('m.productUnit', 'u');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if($mode == 'purchase'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','onlineReturn')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) and !empty($endDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        if($mode == 'sales'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('sales','damage','purchaseReturn','online')));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
            if (!empty($startDate) and !empty($endDate) ) {
                $qb->andWhere("stock.created >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }

        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function operationalStockItem($inventory,$data)
    {
        $mode = isset($data['mode'])? $data['mode'] :'';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item', 'item');
        $qb->leftJoin('stock.product', 'm');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if(!empty($mode)){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : '';
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : '';
        if (!empty($startDate and !empty($endDate)) ) {
            $qb->andWhere("stock.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("stock.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;

    }

    public function stockGroupItemName($inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'product';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.'.$group, 'item');
        $qb->select("item.name AS name");
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('stock.'.$group);
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function groupStockItem($mode,$inventory,$data)
    {
        $group = isset($data['group'])? $data['group'] :'product';

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.'.$group, 'item');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('item.id AS itemId');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if($mode == 'previous'){
            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array('purchase','salesReturn','sales','damage','purchaseReturn','online','onlineReturn')));
            $tillDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            if (!empty($tillDate) ) {
                $qb->andWhere("stock.created < :created");
                $qb->setParameter('created', $tillDate.' 00:00:00');
            }
        }

        if(!empty($mode) and  $mode != 'previous'){

            $qb->andWhere('stock.process IN(:process)');
            $qb->setParameter('process',array_values(array($mode)));
            $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
            $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');

            if (!empty($startDate) ) {
                $qb->andWhere("stock.created > :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
                $qb->andWhere("stock.created < :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }
        }
        $qb->groupBy('stock.'.$group);
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['quantity'];
        }
        return $data;


    }

    public function getGroupStock($inventory,$group)
    {

        $vendor         = $group == 'vendor' ? $group :'';
        $masterItem     = $group == 'product' ? $group :'';
        $brand          = $group == 'brand' ? $group :'';
        $color          = $group == 'color' ? $group :'';
        $size           = $group == 'size' ? $group :'';
        $category       = $group == 'category' ? $group :'';


        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('e.item AS itemId');
        $qb->addSelect('SUM(e.quantity) AS quantity');

        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($masterItem)) {
            $qb->addSelect('m.name AS masterItem');
            $qb->leftJoin('item.masterItem', 'm');
            $qb->groupBy('item.masterItem');
            $qb->orderBy('m.name','ASC');
        }

        if (!empty($brand)) {
            $qb->addSelect('b.name AS brand');
            $qb->join('item.brand', 'b');
            $qb->groupBy('item.brand');
            $qb->orderBy('b.name','ASC');
        }
        if (!empty($color)) {
            $qb->addSelect('c.name AS color');
            $qb->join('item.color', 'c');
            $qb->groupBy('item.color');
            $qb->orderBy('c.name','ASC');
        }
        if (!empty($size)) {
            $qb->addSelect('s.name AS size');
            $qb->join('item.size', 's');
            $qb->groupBy('item.size');
            $qb->orderBy('s.name','ASC');
        }
        if (!empty($vendor)) {
            $qb->addSelect('v.companyName AS vendor');
            $qb->addSelect('v.mobile AS mobile');
            $qb->join('item.vendor', 'v');
            $qb->groupBy('item.vendor');
            $qb->orderBy('v.companyName','ASC');
        }
        if (!empty($category)) {
            $qb->addSelect('cat.name AS category');
            $qb->join('item.masterItem', 'm');
            $qb->join('m.category','cat');
            $qb->groupBy("m.category");
            $qb->orderBy('cat.name','ASC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getProcessStock($inventory,$data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->join('e.purchaseItem', 'pi');
        $qb->join('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id AS itemId');
        $qb->addselect('item.name AS name');
        $qb->addselect('item.sku AS sku');
        $qb->addselect('m.name AS masterItem');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.name AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function  getGroupPurchaseItemStock($inventory,$data)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.purchase', 'purchase');
        $qb->leftJoin('pi.item', 'item');
        $qb->leftJoin('item.masterItem','m');
        $qb->leftJoin('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->leftJoin('item.vendor', 'v');
        $qb->select('item.id  as itemId');
        $qb->addSelect('sum(pi.quantity)  as purchaseQuantity');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['itemId']] = $row['purchaseQuantity'];
        }
        return $data;
    }

    public function getSizeStock($inventory,$data)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem','pi');
        $qb->join('pi.stockItem','e');
        $qb->join('pi.purchase','p');
        $qb->join('pi.item','item');
        $qb->join('item.masterItem','m');
        $qb->join('item.size', 's');
        $qb->leftJoin('item.color', 'c');
        $qb->leftJoin('item.brand', 'b');
        $qb->join('item.vendor', 'v');
        $qb->select('m.name AS masterItem');
        $qb->addselect('p.grn AS grn');
        $qb->addselect('p.updated AS created');
        $qb->addselect('s.name AS size');
        $qb->addselect('c.name AS color');
        $qb->addselect('v.companyName AS vendor');
        $qb->addselect('b.name AS brand');
        $qb->addSelect('SUM(pi.quantity) AS purchaseQuantity');
        $qb->addSelect('SUM(e.quantity) AS remainingQuantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('item.id');
        $qb->groupBy('pi.purchase');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getItemBaseStock($inventory)
    {

        $process    = isset($data['process'])? $data['process'] :'purchase';
        $startDate  = isset($data['startDate'])? $data['startDate'] :'';
        $endDate    = isset($data['endDate'])? $data['endDate'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        if (!empty($startDate)) {
            $qb->andWhere("e.created = :created");
            $qb->setParameter('created', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.created = :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->groupBy('e.item');
        $qb->getQuery();
        return  $qb;


    }

    public function insertPurchaseStockItem(Purchase $purchase){

        $em = $this->_em;

        /* @var $purchaseItem PurchaseItem */

        foreach($purchase->getPurchaseItems() as $purchaseItem ) {

            if (empty($this->_em->getRepository('InventoryBundle:StockItem')->findBy(array('purchaseItem' => $purchaseItem->getId(),'process'=>'purchase')))) {

                $entity = new StockItem();
                $entity->setInventoryConfig($purchase->getInventoryConfig());
                $entity->setPurchaseItem($purchaseItem);
                $entity->setItem($purchaseItem->getItem());
                $entity->setQuantity($purchaseItem->getQuantity());
                $entity->setPrice($purchaseItem->getPurchasePrice());
                $entity->setCreatedBy($purchaseItem->getPurchase()->getCreatedBy());
                $entity->setProduct($purchaseItem->getItem()->getMasterItem());
                $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
                $entity->setVendor($purchaseItem->getPurchase()->getVendor());
                $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

                if (!empty($purchaseItem->getItem()->getMasterItem()->getCategory())) {
                    $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                    $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
                }

                if (!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                    $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                    $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
                }

                if (!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                    $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                    $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
                }


                if (!empty($purchaseItem->getItem()->getSize())) {
                    $entity->setSize($purchaseItem->getItem()->getSize());
                    $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
                }

                if (!empty($purchaseItem->getItem()->getColor())) {
                    $entity->setColor($purchaseItem->getItem()->getColor());
                    $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
                }

                $entity->setProcess('purchase');
                $em->persist($entity);
                $em->flush();

            }

        }

    }

    public function insertPurchaseReturnStockItem($purchaseReturn){

        $em = $this->_em;

        /* @var $purchaseReturnItem PurchaseReturnItem */

        foreach($purchaseReturn->getPurchaseReturnItems() as $purchaseReturnItem ) {

            if (empty($this->_em->getRepository('InventoryBundle:StockItem')->findBy(array('purchaseReturnItem' => $purchaseReturnItem->getId(),'process' => 'purchaseReturn')))) {

                $entity = new StockItem();
                $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
                $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
                $entity->setPurchaseReturnItem($purchaseReturnItem);
                $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
                $entity->setPrice($purchaseReturnItem->getPurchaseItem()->getPurchasePrice());
                $entity->setQuantity('-' . $purchaseReturnItem->getQuantity());
                $entity->setCreatedBy($purchaseReturn->getCreatedBy());

                $purchaseItem = $purchaseReturnItem->getPurchaseItem();
                $entity->setProduct($purchaseItem->getItem()->getMasterItem());
                $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
                $entity->setVendor($purchaseItem->getPurchase()->getVendor());
                $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

                if (!empty($purchaseItem->getItem()->getMasterItem()->getCategory())) {
                    $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                    $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
                }

                if (!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                    $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                    $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
                }

                if (!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                    $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                    $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
                }

                if (!empty($purchaseItem->getItem()->getSize())) {
                    $entity->setSize($purchaseItem->getItem()->getSize());
                    $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
                }

                if (!empty($purchaseItem->getItem()->getColor())) {
                    $entity->setColor($purchaseItem->getItem()->getColor());
                    $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
                }
                $entity->setProcess('purchaseReturn');
                $em->persist($entity);
                $em->flush();
            }

        }

    }

    public function insertPurchaseReturnReplaceStockItem($purchaseReturn,$purchaseReturnItem,$curQuantity = 0){

        $em = $this->_em;

            $entity = new StockItem();
            $entity->setInventoryConfig($purchaseReturn->getInventoryConfig());
            $entity->setPurchaseItem($purchaseReturnItem->getPurchaseItem());
            $entity->setPurchaseReplaceItem($purchaseReturnItem);
            $entity->setItem($purchaseReturnItem->getPurchaseItem()->getItem());
            $entity->setQuantity($curQuantity);
            $entity->setCreatedBy($purchaseReturn->getCreatedBy());
            $entity->setProcess('purchaseReturnReplace');
            $em->persist($entity);
            $em->flush();

    }

    public function insertSalesStockItem(Sales $sales){

        $em = $this->_em;
        /* @var $row SalesItem */
        $salesItems = $em->getRepository('InventoryBundle:SalesItem')->findBy(array('sales'=>$sales));
        if($salesItems){
            foreach ($salesItems as $row ) {

                if (empty($this->_em->getRepository('InventoryBundle:StockItem')->findBy(array('salesItem' => $row->getId())))){

                    $entity = new StockItem();
                    $entity->setInventoryConfig($sales->getInventoryConfig());
                    $entity->setSalesItem($row);
                    $entity->setPurchaseItem($row->getPurchaseItem());
                    $entity->setPrice($row->getSalesPrice());
                    $entity->setItem($row->getItem());
                    $quantity = '-' . $row->getQuantity();
                    $entity->setQuantity($quantity);
                    $entity->setCreatedBy($sales->getCreatedBy());

                    $item = $row->getItem();
                    $purchaseItem = $row->getPurchaseItem();

                    $entity->setProduct($item->getMasterItem());
                    $entity->setProductName($item->getMasterItem()->getName());
                    if(!empty($purchaseItem)){
                        $entity->setVendor($purchaseItem->getPurchase()->getVendor());
                        $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

                    }
                    if (!empty($item->getMasterItem()->getCategory())) {
                        $entity->setCategory($item->getMasterItem()->getCategory());
                        $entity->setCategoryName($item->getMasterItem()->getCategory()->getName());
                    }

                    if (!empty($item->getMasterItem()->getProductUnit())) {
                        $entity->setUnit($item->getMasterItem()->getProductUnit());
                        $entity->setUnitName($item->getMasterItem()->getProductUnit()->getName());
                    }

                    if (!empty($purchaseItem) and !empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                        $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                        $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
                    }

                    if (!empty($item->getSize())) {
                        $entity->setSize($item->getSize());
                        $entity->setSizeName($item->getSize()->getName());
                    }

                    if (!empty($item->getColor())) {
                        $entity->setColor($item->getColor());
                        $entity->setColorName($item->getColor()->getName());
                    }
                    $entity->setProcess('sales');
                    $em->persist($entity);
                    $em->flush();
                }
            }
        }

    }

    public function insertSalesManualStockItem(Sales $sales){

        $em = $this->_em;

        /* @var SalesItem $row */

        foreach ($sales->getSalesItems() as $row ){

            $entity = new StockItem();
            $entity->setInventoryConfig($sales->getInventoryConfig());
            $entity->setSalesItem($row);
            $entity->setPurchaseItem($row->getPurchaseItem());
            $entity->setItem($row->getItem());
            $quantity = '-'.$row->getQuantity();
            $entity->setQuantity($quantity);
            $entity->setCreatedBy($sales->getCreatedBy());

            $entity->setProduct($row->getItem()->getMasterItem());
            $entity->setProductName($row->getItem()->getMasterItem()->getName());
            if(!empty($row->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($row->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($row->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($row->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($row->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($row->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($row->getItem()->getSize())){
                $entity->setSize($row->getItem()->getSize());
                $entity->setSizeName($row->getItem()->getSize()->getName());
            }

            if(!empty($row->getItem()->getColor())){
                $entity->setColor($row->getItem()->getColor());
                $entity->setColorName($row->getItem()->getColor()->getName());
            }

            $entity->setProcess('sales');
            $em->persist($entity);
        }

        $em->flush();

    }

    public function insertSalesReturnStockItem(SalesReturn $salesReturn){

        $em = $this->_em;

        /* @var $row SalesReturnItem */

        foreach ($salesReturn ->getSalesReturnItems() as $row ) {

            if (empty($this->_em->getRepository('InventoryBundle:StockItem')->findBy(array('salesReturnItem' => $row->getId(), 'process' => 'salesReturn')))) {

                $entity = new StockItem();
                $entity->setInventoryConfig($salesReturn->getInventoryConfig());
                $entity->setPurchaseItem($row->getSalesItem()->getPurchaseItem());
                $entity->setSalesReturnItem($row);
                $entity->setItem($row->getSalesItem()->getItem());
                $quantity = $row->getQuantity();
                $entity->setQuantity($quantity);
                $entity->setCreatedBy($salesReturn->getCreatedBy());

                $purchaseItem = $row->getSalesItem()->getPurchaseItem();

                $entity->setProduct($purchaseItem->getItem()->getMasterItem());
                $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
                $entity->setVendor($purchaseItem->getPurchase()->getVendor());
                $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

                if (!empty($purchaseItem->getItem()->getMasterItem()->getCategory())) {
                    $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                    $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
                }

                if (!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                    $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                    $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
                }

                if (!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                    $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                    $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
                }

                if (!empty($purchaseItem->getItem()->getSize())) {
                    $entity->setSize($purchaseItem->getItem()->getSize());
                    $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
                }

                if (!empty($purchaseItem->getItem()->getColor())) {
                    $entity->setColor($purchaseItem->getItem()->getColor());
                    $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
                }
                $entity->setProcess('salesReturn');
                $em->persist($entity);
                $em->flush();
            }
        }

    }

    public function insertDamageItem(Damage $damage){

        if (empty($this->_em->getRepository('InventoryBundle:StockItem')->findBy(array('damage' => $damage->getId(), 'process' => 'damage')))) {

            $em = $this->_em;
            $entity = new StockItem();
            $entity->setInventoryConfig($damage->getInventoryConfig());
            $entity->setPurchaseItem($damage->getPurchaseItem());
            $entity->setDamage($damage);
            $entity->setItem($damage->getItem());
            $quantity = $damage->getQuantity();
            $entity->setQuantity('-' . $quantity);
            $entity->setCreatedBy($damage->getCreatedBy());

            $purchaseItem = $damage->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if (!empty($purchaseItem->getItem()->getMasterItem()->getCategory())) {
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if (!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if (!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if (!empty($purchaseItem->getItem()->getSize())) {
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if (!empty($purchaseItem->getItem()->getColor())) {
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }
            $entity->setProcess('damage');
            $em->persist($entity);
            $em->flush();
        }

    }

    public function insertOnlineOrder(Order $order){

        $em = $this->_em;
        foreach ($order ->getOrderItems() as $orderItem ) {
            $entity = new StockItem();
            $entity->setInventoryConfig($orderItem->getPurchaseItem()->getPurchase()->getInventoryConfig());
            $entity->setPurchaseItem($orderItem->getPurchaseItem());
            $entity->setOrderItem($orderItem);
            $entity->setItem($orderItem->getPurchaseItem()->getItem());
            $quantity = $orderItem->getQuantity();
            $entity->setQuantity('-' . $quantity);
            $entity->setCreatedBy($orderItem->getOrder()->getCreatedBy());

            $purchaseItem = $orderItem->getPurchaseItem();

            $entity->setProduct($purchaseItem->getItem()->getMasterItem());
            $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
            $entity->setVendor($purchaseItem->getPurchase()->getVendor());
            $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

            if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
                $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
                $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
            }

            if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
                $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
                $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
            }

            if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
                $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
                $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
            }

            if(!empty($purchaseItem->getItem()->getSize())){
                $entity->setSize($purchaseItem->getItem()->getSize());
                $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
            }

            if(!empty($purchaseItem->getItem()->getColor())){
                $entity->setColor($purchaseItem->getItem()->getColor());
                $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
            }

            $entity->setProcess('online');
            $em->persist($entity);
            $em->flush();
        }

    }

    public function insertOnlineOrderItemReturn(OrderItem $entity){

        $em = $this->_em;
        $entity = new StockItem();
        $entity->setInventoryConfig($entity->getInventoryConfig());
        $entity->setPurchaseItem($entity->getPurchaseItem());
        $entity->setDamage($entity);
        $entity->setItem($entity->getItem());
        $quantity = $entity->getQuantity();
        $entity->setQuantity('-'.$quantity);
        $entity->setCreatedBy($entity->getCreatedBy());
        $entity->setProcess('onlineReturn');

        $purchaseItem = $entity->getPurchaseItem();

        $entity->setProduct($purchaseItem->getItem()->getMasterItem());
        $entity->setProductName($purchaseItem->getItem()->getMasterItem()->getName());
        $entity->setVendor($purchaseItem->getPurchase()->getVendor());
        $entity->setVendorName($purchaseItem->getPurchase()->getVendor()->getName());

        if(!empty($purchaseItem->getItem()->getMasterItem()->getCategory())){
            $entity->setCategory($purchaseItem->getItem()->getMasterItem()->getCategory());
            $entity->setCategoryName($purchaseItem->getItem()->getMasterItem()->getCategory()->getName());
        }

        if(!empty($purchaseItem->getItem()->getMasterItem()->getProductUnit())) {
            $entity->setUnit($purchaseItem->getItem()->getMasterItem()->getProductUnit());
            $entity->setUnitName($purchaseItem->getItem()->getMasterItem()->getProductUnit()->getName());
        }

        if(!empty($purchaseItem->getPurchaseVendorItem()->getBrand())) {
            $entity->setBrand($purchaseItem->getPurchaseVendorItem()->getBrand());
            $entity->setBrandName($purchaseItem->getPurchaseVendorItem()->getBrand()->getName());
        }

        if(!empty($purchaseItem->getItem()->getSize())){
            $entity->setSize($purchaseItem->getItem()->getSize());
            $entity->setSizeName($purchaseItem->getItem()->getSize()->getName());
        }

        if(!empty($purchaseItem->getItem()->getColor())){
            $entity->setColor($purchaseItem->getItem()->getColor());
            $entity->setColorName($purchaseItem->getItem()->getColor()->getName());
        }
        $em->persist($entity);
        $em->flush();

    }

    public  function getStockOverview($inventory,$data=''){

        $purchase = $this->getSumStock($inventory,'purchase',$data);
        $purchaseReturn = $this->getSumStock($inventory,'purchaseReturn',$data);
        $purchaseReplace = $this->getSumStock($inventory,'purchaseReplace',$data);
        $sales = $this->getSumStock($inventory,'sales',$data);
        $salesReturn = $this->getSumStock($inventory,'salesReturn',$data);
        $damage = $this->getSumStock($inventory,'damage',$data);

        $remaining = (($purchase + $salesReturn ) + ($purchaseReturn + $sales + $damage ));
        $data = array(
            'purchase'=>        $purchase,
            'purchaseReturn'=>  $purchaseReturn,
            'purchaseReplace'=> $purchaseReplace,
            'sales'=>           $sales,
            'salesReturn'=>     $salesReturn,
            'damage'=>          $damage,
            'remaining'=>       $remaining
        );
        return $data;

    }

    private function getSumStock($inventory, $process ='' , $data)
    {
        $item = isset($data['item'])? $data['item'] :'';
        $color = isset($data['color'])? $data['color'] :'';
        $size = isset($data['size'])? $data['size'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);

        if (!empty($item)) {

            $qb->join('item.masterItem', 'm');
            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($color)) {

            $qb->join('item.color', 'c');
            $qb->andWhere("c.name = :color");
            $qb->setParameter('color', $color);
        }
        if (!empty($size)) {

            $qb->join('item.size', 's');
            $qb->andWhere("s.name = :size");
            $qb->setParameter('size', $size);
        }
        if (!empty($vendor)) {
            $qb->join('item.vendor', 'v');
            $qb->andWhere("v.companyName = :vendor");
            $qb->setParameter('vendor', $vendor);
        }
        $result = $qb->getQuery()->getSingleScalarResult();
        return $result;
    }

    private function getStockBarcodeWise($process, $inventory, $data)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.process = :process");
        $qb->setParameter('process', $process);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public function purchaseItemStockRemoveQnt(Purchase $purchase){

        $em = $this->_em;
        foreach($purchase->getPurchaseItems() as $purchaseItem ){

            $stockItem = $this->_em->getRepository('InventoryBundle:StockItem')->findOneBy(array('purchaseItem' => $purchaseItem));
            if(!empty($stockItem)){
                $em->remove($stockItem);
                $em->flush();
            }
        }
    }

    public function barcodeWiseStock($user , $purchaseItem)
    {
        $table = '';
        $em = $this->_em;
        /* @var GlobalOption $globalOption */
        $globalOption = $user->getGlobalOption();
        $inventory = $globalOption->getInventoryConfig()->getId();
        if($purchaseItem){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $table .= '<thead class="flip-content ">';
            $table .= '<tr class="head-blue" >';
            $table .= '<td>Barcode</td>';
            $table .= '<td>Item Name</td>';
            $table .= '<th>(+)Purchase</th>';
            $table .= '<th>(-)P.Return</th>';
            $table .= '<th>(-)Sales</th>';
            $table .= '<th>(+)S.Return</th>';
            $table .= '<th>(-)Damage</th>';
            $table .= '<th>Remaining</th>';
            $table .='</tr>';
            $table .= '</thead>';

            foreach ($purchaseItem as $row){
                $table .='<tr>';
                $table .= '<td>'.$row['barcode'].'</td>';
                $table .= '<td>'.$row['name'].'</td>';
                    $data = array('barcode' => $row['barcode']);
                    $purchase = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($process ='purchase',$inventory,$data);
                    $purchaseReturn = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='purchaseReturn',$inventory,$data);
                    $sales = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='sales',$inventory,$data);
                    $salesReturn = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='salesReturn',$inventory,$data);
                    $damage = $em->getRepository('InventoryBundle:StockItem')->getStockBarcodeWise($mode ='damage',$inventory,$data);

                    $purchase = !empty($purchase) ? (int)$purchase['quantity'] :0;
                    $purchaseReturn = !empty($purchaseReturn) ? (int)$purchaseReturn['quantity'] :0;
                    $sales = !empty($sales) ? (int)$sales['quantity'] :0;
                    $salesReturn = !empty($salesReturn) ? (int)$salesReturn['quantity'] :0;
                    $damage = !empty($damage) ? (int)$damage['quantity'] :0;

                    $remainingQnt=  ($purchase + $salesReturn ) + ( $purchaseReturn + $sales + $damage );

                $table .= '<td>'.$purchase.'</td>';
                $table .= '<td>'.$purchaseReturn.'</td>';
                $table .= '<td>'.$sales.'</td>';
                $table .= '<td>'.$salesReturn.'</td>';
                $table .= '<td>'.$damage.'</td>';
                $table .= '<td><b>'.$remainingQnt.'</b></td>';
                $table .='</tr>';
            }
            $table .='</table>';

            return $table;

        }else{

            return false;
        }

    }

    public function barcodeWiseBranchItem($user , $purchaseItem)
    {
        $table = '';
        $em = $this->_em;
        $globalOption = $user->getGlobalOption();
        if($purchaseItem){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $table .= '<thead class="flip-content ">';
            $table .= '<tr class="head-blue" >';
            $table .= '<td>Barcode</td>';
            $table .= '<td>Item Name</td>';
            $table .= '<td>Central Stock</td>';
            $branches = $globalOption->getBranches();
            foreach ($branches as $branch) {
                $table .= '<td>' .$branch->getName().'</td>';
            }
            $table .= '<td>Remaining Stock</td>';
            $table .='</tr>';
            $table .= '</thead>';

            foreach ($purchaseItem as $row){
                $table .='<tr>';
                $table .= '<td>'.$row['barcode'].'</td>';
                $table .= '<td>'.$row['name'].'</td>';
                $table .= '<td>'.$row['quantity'].'</td>';
                $branchQnt = 0;
                $branchTotalReceiveQnt = 0;
                foreach ($branches as $branch) {

                    $data = array('barcode' => $row['barcode']);
                    $receiveItem =  $em->getRepository('InventoryBundle:Delivery')->getStockOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $returnItem =  $em->getRepository('InventoryBundle:Delivery')->getReturnOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $ongoingItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOngoingOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $salesItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $salesReturnItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesReturnOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);

                    $receiveItemQnt = !empty($receiveItem) ? (int)$receiveItem['quantity'] :0;
                    $returnItemQnt = !empty($returnItem) ? (int)$returnItem['quantity'] :0;
                    $ongoingItemQnt = !empty($ongoingItem) ? (int)$ongoingItem['quantity'] :0;
                    $salesItemQnt = !empty($salesItem) ? (int)$salesItem['quantity'] :0;
                    $salesReturnItemQnt = !empty($salesReturnItem) ? (int)$salesReturnItem['quantity'] :0;

                    $branchSalesQnt = ( $ongoingItemQnt + $salesItemQnt + $returnItemQnt) - $salesReturnItemQnt;
                    $branchRemainingQnt =  $receiveItemQnt - $branchSalesQnt ;
                    $currentBranchQnt = ($receiveItemQnt - $returnItemQnt);
                    $branchTotalReceiveQnt += $currentBranchQnt;

                    if($receiveItemQnt > 0){
                        $table .= '<td>'.$receiveItemQnt.' - '.$branchSalesQnt.' = <b>'.$branchRemainingQnt.'</b></td>';
                    }else{
                        $table .= '<td>&nbsp;</td>';
                    }

                }
                $remainingQnt = ($row['quantity'] - $branchTotalReceiveQnt);
                $table .= '<td><b>'.$remainingQnt.'</b></td>';
                $table .='</tr>';
            }
            $table .='</table>';

            return $table;

        }else{

            return false;
        }
    }

    public function singleBarcodeWiseBranchItem($user , $row)
    {
        $table = '';
        $em = $this->_em;
        $globalOption = $user->getGlobalOption();
        if($row){
            $table .= '<table class="table table-bordered table-striped table-condensed flip-content ">';
            $branches = $globalOption->getBranches();
                $table .='<tr>';
                $table .= '<td>Central Stock</td>';
                $table .= '<td>'.$row['quantity'].'</td>';
                $table .='</tr>';
                $totalRemainingQnt = 0;
                foreach ($branches as $branch) {

                    $table .='<tr>';
                    $table .= '<td>'.$branch->getName().'</td>';
                    $data = array('barcode' => $row['barcode']);
                    $receiveItem =  $em->getRepository('InventoryBundle:Delivery')->getStockOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $returnItem =  $em->getRepository('InventoryBundle:Delivery')->getReturnOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $ongoingItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOngoingOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $salesItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);
                    $salesReturnItem =  $em->getRepository('InventoryBundle:Delivery')->getSalesReturnOverview( $globalOption->getInventoryConfig()->getId(), $branch->getId() , $data);

                    $receiveItemQnt = !empty($receiveItem) ? (int)$receiveItem['quantity'] :0;
                    $returnItemQnt = !empty($returnItem) ? (int)$returnItem['quantity'] :0;
                    $ongoingItemQnt = !empty($ongoingItem) ? (int)$ongoingItem['quantity'] :0;
                    $salesItemQnt = !empty($salesItem) ? (int)$salesItem['quantity'] :0;
                    $salesReturnItemQnt = !empty($salesReturnItem) ? (int)$salesReturnItem['quantity'] :0;

                    $branchSalesQnt = ( $ongoingItemQnt + $salesItemQnt + $returnItemQnt) - $salesReturnItemQnt;
                    $branchRemainingQnt = $receiveItemQnt  - $branchSalesQnt ;
                    if($receiveItemQnt > 0){
                        $totalRemainingQnt += $branchRemainingQnt;
                        $table .= '<td>'.$receiveItemQnt.' - '.$branchSalesQnt.' = <b>'.$branchRemainingQnt.'</b></td>';
                    }else{
                        $table .= '<td>&nbsp;</td>';
                    }
                    $table .='</tr>';

                }
                $table .='<tr>';
                $table .= '<td>Central Rmn. Stock</td>';
                $table .= '<td>'.( $row['quantity'] - (int)$totalRemainingQnt) .'</td>';
                $table .='</tr>';

            $table .='</table>';

            return $table;

        }else{

            return false;
        }



    }

    public  function getSalesItemOverview($inventory, $data = array()){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.item','item');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('COUNT(stock.id) AS totalItem');
        $qb->addSelect('SUM(stock.quantity * stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.quantity * stock.salesPrice) AS salesPrice');
        $qb->addSelect('item.name AS name');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public  function reportStockItemPurchaseSales(User $user, $data = array()){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';
        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.item','item');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->addSelect('COUNT(stock.id) AS totalItem');
        $qb->addSelect('SUM(stock.quantity * stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.quantity * stock.salesPrice) AS salesPrice');
        $qb->addSelect('item.name AS name');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public  function getSales($inventory, $data='' ){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $mode = isset($data['mode']) ? $data['mode'] :'';
        $process = isset($data['process']) ? $data['process'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Sales','e');
        $qb->select('e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($mode){
            $qb->andWhere("e.salesMode = :mode");
            $qb->setParameter('mode', $mode);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }

        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public  function getSalesReturnItem($inventory, $group ='item', $data=''){

        $branch = isset($data['branch']) ? $data['branch'] :'';
        $process = isset($data['process']) ? $data['process'] :'';

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','e');
        $qb->join('e.salesReturn','salesreturn');
        $qb->join('e.salesItem','stock');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(stock.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(stock.salesPrice) AS salesPrice');
        $qb->where("salesreturn.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        if($process){
            $qb->andWhere('e.process =:process');
            $qb->setParameter('process',$process);
        }
        if($branch){
            $qb->andWhere("e.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $startDate = !empty($data['startDate']) ? date('Y-m-d',strtotime($data['startDate'])) : date('Y-m-d');
        $endDate = !empty($data['endDate']) ? date('Y-m-d',strtotime($data['endDate'])) : date('Y-m-d');
        if (!empty($startDate) and !empty($endDate) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate.' 00:00:00');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate.' 23:59:59');
        }
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('stock.'.$group);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function saleaItemStockReverse(Sales $sales)
    {
        $em = $this->_em;
        /* @var SalesItem $item */
        foreach ($sales->getSalesItems() as $item ){
            $StockItem = $em->createQuery('DELETE InventoryBundle:StockItem e WHERE e.salesItem = '.$item->getId());
            $StockItem->execute();
        }
    }

    public function getItemQuantity($item,$process = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.item='.$item);
        $qb->andWhere("e.process =:process")->setParameter('process',$process);
        $quantity = $qb->getQuery()->getOneOrNullResult()['quantity'];
        return abs($quantity);
    }

    public function getPurchaseItemQuantity(PurchaseItem $item,$process = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.purchaseItem='.$item->getId());
        $qb->andWhere("e.process IN (:process)")->setParameter('process',$process);
        $quantity = $qb->getQuery()->getOneOrNullResult()['quantity'];
        return abs($quantity);
    }

    public function getPurchaseItemSalesQuantity(Purchase $purchase , $process = '')
    {
        $data = array();
        foreach ($purchase->getPurchaseItems() as $purchaseItem){
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.purchaseItem='.$purchaseItem->getId());
        $qb->andWhere("e.process IN (:process)")->setParameter('process',$process);
        $quantity = $qb->getQuery()->getOneOrNullResult()['quantity'];
            $data[$purchaseItem->getId()] = abs($quantity);
        }
        return $data;

    }

    public function checkPurchaseItemSalesQuantity($purchaseItem)
    {

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.sales','sales');
        $qb->addSelect('SUM(stock.salesQuantity) as quantity ');
        $qb->where("stock.purchaseItem = :purchaseItem");
        $qb->setParameter('purchaseItem', $purchaseItem);
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier','Hold')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        if(!empty($quantity['quantity'])){
            return $quantity['quantity'];
        }else{
            return 0;
        }
    }


}