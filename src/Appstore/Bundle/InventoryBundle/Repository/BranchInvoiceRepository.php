<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\BranchInvoice;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;

/**
 * BranchInvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchInvoiceRepository extends EntityRepository
{

    public function invoiceLists($config,$data)
    {

        $qb = $this->createQueryBuilder('s');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {

            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate = isset($data['endDate'])  ? $data['endDate'] : '';
            $invoice =    isset($data['invoice'])? $data['invoice'] :'';
            $branches =   isset($data['branches'])? $data['branches'] :'';


            if (!empty($startDate)) {
                $start = date('Y-m-d',strtotime($data['startDate']));
                $qb->andWhere("s.updated >= :startDate");
                $qb->setParameter('startDate',$start);
            }

            if (!empty($endDate)) {
                $end = date('Y-m-d',strtotime($data['endDate']));
                $qb->andWhere("s.updated <= :endDate");
                $qb->setParameter('endDate',$end);
            }

            if (!empty($invoice)) {

                $qb->andWhere("s.invoice LIKE :invoice");
                $qb->setParameter('invoice', $invoice);
            }

            if (!empty($branches)) {

                $qb->andWhere("s.branches = :branches");
                $qb->setParameter('branches', $branches);
            }
        }

    }

    public function updateBranchInvoiceTotalPrice(BranchInvoice $branchInvoice)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('InventoryBundle:BranchInvoiceItem','si')
            ->select('sum(si.subTotal) as total , count(si.id) as totalItem , sum(si.quantity) as totalQuantity')
            ->where('si.branchInvoice = :branchInvoice')
            ->setParameter('branchInvoice', $branchInvoice ->getId())
            ->getQuery()->getSingleResult();
        $branchInvoice->setTotal($total['total']);
        $branchInvoice->setTotalItem($total['totalItem']);
        $branchInvoice->setTotalQuantity($total['totalQuantity']);
        $em->persist($branchInvoice);
        $em->flush();


    }







}
