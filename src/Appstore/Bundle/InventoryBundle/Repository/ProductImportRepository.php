<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\ColorSize;
use Appstore\Bundle\InventoryBundle\Entity\Product;
use Appstore\Bundle\InventoryBundle\Entity\Vendor;
use Doctrine\ORM\EntityRepository;

/**
 * ProductImportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductImportRepository extends EntityRepository
{


    public function  getMasterItem()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e.category, e.name, e.unit');
        $qb->distinct();
        $qb->from('InventoryBundle:ProductImport','e');
        return $result = $qb->getQuery()->getResult();
    }


    public function masterItemAdd($inventory,$result)
    {

        $em = $this->_em;
        if (!empty($result)) {
            foreach ($result as $data) {

                $category = $em->getRepository('ProductProductBundle:Category')->findOneBy(array('name'=>$data['category']));
                $lastCode = $em->getRepository('InventoryBundle:Product')->getLastId($inventory);
                $code= str_pad($lastCode, 4 , "0", STR_PAD_LEFT);
                $entity = new Product();
                $entity->setName($data['name']);
                $entity->setUnit($data['unit']);
                $entity->setCategory($category);
                $entity->setInventoryConfig($inventory);
                $entity->setCode($code);
                $em->persist($entity);
                $em->flush();

            }
        }
    }

    public function  getColorSizeUnit($parm)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select(" e.unit as name ");
        $qb->from('InventoryBundle:ProductImport','e');
        $qb->distinct();
        return $result = $qb->getQuery()->getResult();
    }

    public function insertVariant($inventory,$type, $result)
    {

        $em = $this->_em;
        if (!empty($result)) {
            foreach ($result as $data) {

                $lastCode = $em->getRepository('InventoryBundle:ColorSize')->getLastId($inventory,$type);
                $code= str_pad($lastCode, 3, "0", STR_PAD_LEFT);
                $entity = new ColorSize();
                $entity->setName($data['name']);
                $entity->setType($type);
                $entity->setInventoryConfig($inventory);
                $entity->setCode($code);
                $em->persist($entity);
                $em->flush();

            }
        }
    }

    public function  getColor()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select(" e.color as name ");
        $qb->from('InventoryBundle:ProductImport','e');
        $qb->distinct();
        return $result = $qb->getQuery()->getResult();
    }
    public function insertColor($inventory,$result)
    {

        $em = $this->_em;
        if (!empty($result)) {
            foreach ($result as $data) {

                $lastCode = $em->getRepository('InventoryBundle:Color')->getLastId($inventory);
                $code= str_pad($lastCode, 3, "0", STR_PAD_LEFT);
                $entity = new ColorSize();
                $entity->setName($data['name']);
                $entity->setInventoryConfig($inventory);
                $entity->setCode($code);
                $em->persist($entity);
                $em->flush();

            }
        }
    }

    public function  getSize()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select(" e.dimension as name ");
        $qb->from('InventoryBundle:ProductImport','e');
        $qb->distinct();
        return $result = $qb->getQuery()->getResult();
    }

    public function insertSize($inventory,$result)
    {

        $em = $this->_em;
        if (!empty($result)) {
            foreach ($result as $data) {

                $lastCode = $em->getRepository('InventoryBundle:ColorSize')->getLastId($inventory);
                $code= str_pad($lastCode, 3, "0", STR_PAD_LEFT);
                $entity = new ColorSize();
                $entity->setName($data['name']);
                $entity->setInventoryConfig($inventory);
                $entity->setCode($code);
                $em->persist($entity);
                $em->flush();

            }
        }
    }

    public function  getVendor()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select(" e.vendorCode as name ");
        $qb->from('InventoryBundle:ProductImport','e');
        $qb->distinct();
        return $result = $qb->getQuery()->getResult();
    }

    public function insertVendor($inventory, $result)
    {

        $em = $this->_em;
        if (!empty($result)) {
            foreach ($result as $data) {
                if(!empty($data['name'])){
                    $lastCode = $em->getRepository('InventoryBundle:Vendor')->getLastId($inventory);
                    $code= str_pad($lastCode, 3, "0", STR_PAD_LEFT);
                    $entity = new Vendor();
                    $entity->setName($data['name']);
                    $entity->setVendorCode($data['name']);
                    $entity->setCompanyName($data['name']);
                    $entity->setInventoryConfig($inventory);
                    $entity->setCode($code);
                    $em->persist($entity);
                    $em->flush();
                }


            }
        }
    }




}
