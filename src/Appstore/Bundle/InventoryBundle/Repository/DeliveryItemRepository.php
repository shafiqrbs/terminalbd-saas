<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\Delivery;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseItem;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * DeliveryItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryItemRepository extends EntityRepository
{

    public function checkItem(User $user,PurchaseItem $purchaseItem,$quantity = 0)
    {
        $em = $this->_em;

        $totalQnt = $em->getRepository('InventoryBundle:Delivery')->stockReceiveSingleItem($user, $purchaseItem->getItem(),$purchaseItem->getBarcode());
        $stockSalesItemHistory =  $em->getRepository('InventoryBundle:Delivery')->stockSalesItemHistory($user,$purchaseItem->getItem(),$purchaseItem->getBarcode());
        $salesQnt =  !empty($stockSalesItemHistory) ? $stockSalesItemHistory[0]['quantity']:0;
        $stockSalesReturnItem =  $em->getRepository('InventoryBundle:Delivery')->stockSalesReturnItemHistory($user,$purchaseItem->getItem(),$purchaseItem->getBarcode());
        $salesReturnQnt =  !empty($stockSalesReturnItem) ? $stockSalesReturnItem[0]['quantity']:0;
        $stockDeliveryReturnItem =  $this->stockReturnBarcodeItem($user,$purchaseItem);
        $deliveryReturnQnt = !empty($stockDeliveryReturnItem) ? $stockDeliveryReturnItem : 0;

        $stockQnt = (int)(($totalQnt + $salesReturnQnt) - ($salesQnt + $deliveryReturnQnt));
        if( $stockQnt > 0 and $stockQnt >= $quantity ){
            $output = 'valid';
        }else{
            $output = 'invalid' ;
        }
        return $output;

    }

    public function checkTotalReceiveQuantity($user, $purchaseItem)
    {
        $em = $this->_em;

        $receiveQnt = $em->getRepository('InventoryBundle:DeliveryItem')->stockReceiveSinglePurchaseItem($user, $purchaseItem->getId());
        $returnQnt =  $em->getRepository('InventoryBundle:DeliveryItem')->stockReturnSinglePurchaseItem($user,$purchaseItem->getId());

        $totalReceive = ($receiveQnt - $returnQnt);
        $totalItem = !empty($totalReceive) > 0 ? $totalReceive :0;
        return (int) $totalItem;
    }

    public function stockReceiveSinglePurchaseItem(User $user,$item)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.delivery','delivery');
        $qb->select('SUM(e.quantity) AS receiveQnt ');
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.purchaseItem = :item");
        $qb->setParameter('item', $item);
        $arrayResult = $qb->getQuery()->getOneOrNullResult();
        return $arrayResult['receiveQnt'];


    }

    public function stockReturnSinglePurchaseItem(User $user,$item)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','e');
        $qb->select('SUM(e.quantity) AS returnQnt ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.purchaseItem = :item");
        $qb->setParameter('item', $item);
        $arrayResult = $qb->getQuery()->getOneOrNullResult();
        return $arrayResult['returnQnt'];


    }


    public function stockReturnBarcodeItem(User $user,$item)
    {
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','e');
        $qb->join('e.purchaseItem','purchaseItem');
        $qb->select('SUM(e.quantity) AS returnQnt ');
        $qb->where("e.branch = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("e.purchaseItem = :item");
        $qb->setParameter('item', $item);
        $arrayResult = $qb->getQuery()->getOneOrNullResult();
        return $arrayResult['returnQnt'];
    }








}
