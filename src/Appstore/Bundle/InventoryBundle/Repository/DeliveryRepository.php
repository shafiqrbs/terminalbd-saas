<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\Delivery;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * DeliveryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryRepository extends EntityRepository
{
    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {

            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {
                $qb->join('stock.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->join('item.masterItem', 'm');
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }

            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }

            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('item.masterItem', 'mc');
                $qb->join('mc.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }
        }

    }


    public function findWithSearch(User $user , $data)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();
        $userRoles = $user->getRoles();


        $startDate = isset($data['startDate'])  ? $data['startDate'].' 00:00:00' :'';
        $endDate =   isset($data['endDate'])  ? $data['endDate'].' 23:59:59' :'';

        $item = isset($data['item'])? $data['item'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $qb = $this->createQueryBuilder('e');

        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!in_array('ROLE_DOMAIN_INVENTORY_MANAGER',$userRoles)) {
            $qb->andWhere("e.branch = :branch");
            $qb->setParameter('branch', $branch);
        }

        if (!empty($startDate) and $startDate !="") {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($endDate)) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }

        if (!empty($item)) {
            $qb->join('e.item', 'item');
            $qb->andWhere("item.sku = :sku");
            $qb->setParameter('sku', $item);
        }

        if (!empty($vendor)) {
            $qb->join('e.item.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }

        $qb->orderBy('e.id','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function updateDeliveryTotal(Delivery $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
        ->from('InventoryBundle:DeliveryItem','e')
        ->select('sum(e.subTotal) as total , sum(e.quantity) as totalQuantity, count(e.id) as totalItem')
        ->where('e.delivery = :delivery')
        ->setParameter('delivery', $entity ->getId())
        ->getQuery()->getSingleResult();
        $entity->setTotalAmount($total['total']);
        $entity->setTotalQuantity($total['totalQuantity']);
        $entity->setTotalItem($total['totalItem']);
        $em->persist($entity);
        $em->flush();
    }

    public function getDeliveryItems(Delivery $delivery)
    {
        $entities = $delivery->getDeliveryItems();
        $data = '';
        $i = 1;
        foreach( $entities as $entity){

            $itemName = $entity->getItem()->getName();
            $data .=' <tr id="remove-'.$entity->getId().'">';
            $data .='<td class="numeric" >'.$i.'</td>';
            $data .='<td class="numeric" >'.$entity->getPurchaseItem()->getBarcode().'</td>';
            $data .='<td class="numeric" >'.$itemName.'</td>';
            $data .='<td class="numeric" >'.$entity->getQuantity().'</td>';
            $data .='<td class="numeric" >'.$entity->getPurchaseItem()->getPurchasePrice().'</td>';
            $data .='<td class="numeric" >'.$entity->getPurchaseItem()->getPurchasePrice() * $entity->getQuantity().'</td>';
            $data .='<td class="numeric" >'.$entity->getSalesPrice().'</td>';
            $data .='<td class="numeric" >'.$entity->getSubTotal().'</td>';
            $data .='<td class="numeric" >
                     <a id="'.$entity->getId().'" title="Are you sure went to delete ?" rel="/inventory/delivery/'.$delivery->getId().'/'.$entity->getId().'/item/delete" href="javascript:" class="btn red mini delete" ><i class="icon-trash"></i></a>
                     </td>';
            $data .='</tr>';
            $i++;
        }
        return $data;
    }


    public function getStockPriceOverview($inventory,$branch,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.purchaseItem','pi');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->addSelect('SUM(e.quantity * pi.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(e.quantity * pi.salesPrice) AS salesPrice');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public  function getStockOverview($inventory, $branch , $data=''){

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.deliveryItems','stock');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->where("e.process = :process");
        $qb->setParameter('process', 'approved');
        $qb->andWhere("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.branch = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public  function getReturnOverview($inventory, $branch , $data=''){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','stock');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("stock.branch = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public  function getSalesOngoingOverview($inventory, $branch , $data=''){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->where('e.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier')));
        $qb->andWhere("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public  function getSalesOverview($inventory, $branch , $data=''){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.sales','e');
        $qb->select('SUM(stock.quantity) AS quantity');
        $qb->where('e.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done')));
        $qb->andWhere("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public  function getSalesReturnOverview($inventory, $branch , $data=''){

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','e');
        $qb->join('e.salesReturn','salesreturn');
        $qb->join('e.salesItem','stock');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('salesreturn.process IN(:process)');
        $qb->setParameter('process',array_values(array('process','complete')));
        $qb->andWhere("salesreturn.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("salesreturn.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function returnGroupItem($qb,$group)
    {
        if($group == 'item'){
            $qb->groupBy('stock.item');
        }elseif($group == 'barcode'){
            $qb->join('stock.purchaseItem', 'pItem');
            $qb->addSelect("pItem.barcode AS barcode");
            $qb->groupBy('stock.purchaseItem');
        }

        $arrayResult = $qb->getQuery()->getArrayResult();
        $arrayData = array();

        if($group == 'item'){
            foreach($arrayResult as $row) {
                $arrayData[$row['itemId']] = $row['quantity'];
            }
        }elseif($group == 'barcode'){
            foreach($arrayResult as $row) {
                $arrayData[$row['barcode']] = $row['quantity'];
            }
        }
        return $arrayData;
    }

    public function stockItem(User $user,$group,$data)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryItem', 'stock');
        $qb->join('stock.delivery', 'delivery');
        $qb->join('stock.item', 'item');
        $qb->select("item.name AS name");
        $qb->addSelect("item.id AS itemId");
        $qb->addSelect("item.sku AS sku");
        $qb->addSelect("SUM(stock.quantity) AS receiveQuantity");
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("delivery.branch = :branch");
        $qb->setParameter('branch', $branch);
/*        $qb->andWhere('delivery.process = :process');
        $qb->setParameter('process','completed','approved');*/
        $this->handleWithSearch($qb,$data);
        if($group == 'item'){
            $qb->groupBy('stock.item');
        }elseif($group == 'barcode'){
            $qb->join('stock.purchaseItem', 'pItem');
            $qb->addSelect("pItem.barcode AS barcode");
            $qb->groupBy('stock.purchaseItem');
        }
        $qb->orderBy('item.name','ASC');
        $res = $qb->getQuery()->getArrayResult();
        return  $res;

    }


    public function stockSalesItem(User $user,$group ,$data)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.sales','sales');
        $qb->join('stock.item','item');
        $qb->select('item.id as itemId');
        $qb->addSelect("SUM(stock.quantity) AS quantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $this->returnGroupItem($qb,$group);
        return $result;

    }

    public function stockSalesReturnItem(User $user,$group ,$data)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','sales_return_item');
        $qb->join('sales_return_item.salesReturn','sales_return');
        $qb->join('sales_return_item.salesItem','stock');
        $qb->join('stock.item','item');
        $qb->select('item.id as itemId');
        $qb->addSelect("SUM(sales_return_item.quantity) AS quantity ");
        $qb->where("sales_return.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('sales_return.process =:process ');
        $qb->setParameter('process','complete');
        $qb->andWhere("sales_return.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $this->returnGroupItem($qb,$group);
        return $result;

    }

    public function stockOngoingItem(User $user , $group , $data)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','stock');
        $qb->join('stock.sales','sales');
        $qb->join('stock.item','item');
        $qb->select('item.id as itemId');
        $qb->addSelect("SUM(stock.quantity) AS quantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $this->returnGroupItem($qb,$group);
        return $result;

    }

    public function stockReturnItem(User $user,$group ,$data)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','stock');
        $qb->join('stock.item','item');
        $qb->select('item.id as itemId');
        $qb->addSelect('SUM(stock.quantity) as quantity ');
        $qb->where("stock.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("stock.branch = :branch");
        $qb->setParameter('branch', $branch);
        $this->handleWithSearch($qb,$data);
        $result = $this->returnGroupItem($qb,$group);
        return $result;

    }

    public function stockItemDetails(User $user,$item)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();

        $qb->from('InventoryBundle:DeliveryItem', 'stock');
        $qb->join('stock.delivery', 'delivery');
        $qb->join('stock.purchaseItem', 'purchaseItem');
        $qb->join('purchaseItem.item', 'i');
        $qb->join('purchaseItem.purchase', 'purchase');
        $qb->select('Sum(stock.quantity) AS  receiveQuantity ');
        $qb->addSelect('i.name AS name');
        $qb->addSelect('i.sku AS sku');
        $qb->addSelect('purchaseItem.id AS purchaseItemId');
        $qb->addSelect('purchaseItem.salesPrice AS salesPrice');
        $qb->addSelect('purchaseItem.barcode AS barcode');
        $qb->addSelect('purchase.receiveDate AS purchaseDate');
        $qb->addSelect('purchase.memo AS memo');
        $qb->addSelect('delivery.updated AS deliveryDate');
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("delivery.branch = :branch");
        $qb->setParameter('branch', $branch );
        $qb->andWhere("stock.item = :item");
        $qb->setParameter('item', $item);
        $qb->groupBy('purchaseItem.id');
        $qb->orderBy('delivery.updated', 'DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function stockSalesItemDetails(User $user,$item)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect("SUM(salesItem.quantity) AS salesQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("salesItem.item = :item");
        $qb->setParameter('item', $item);
        $qb->groupBy('salesItem.purchaseItem');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['salesQuantity'];
        }
        return $data;

    }

    public function stockSalesReturnItemDetails(User $user,$item)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','sales_return_item');
        $qb->join('sales_return_item.salesReturn','sales_return');
        $qb->join('sales_return_item.salesItem','salesItem');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect("SUM(sales_return_item.quantity) AS salesReturnQuantity ");
        $qb->where("sales_return.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('sales_return.process =:process ');
        $qb->setParameter('process','complete');
        $qb->andWhere("sales_return.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("salesItem.item = :item");
        $qb->setParameter('item', $item);
        $qb->groupBy('salesItem.purchaseItem');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['salesReturnQuantity'];
        }
        return $data;

    }

    public function stockOngoingItemDetails(User $user,$item)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect("SUM(salesItem.quantity) AS ongoingQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("salesItem.item = :item");
        $qb->setParameter('item', $item);
        $qb->groupBy('salesItem.purchaseItem');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['ongoingQuantity'];
        }
        return $data;

    }

    public function stockReturnItemDetails(User $user,$item)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','e');
        $qb->join('e.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect('SUM(e.quantity) as deliveryQuantity ');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.branch = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("purchaseItem.item = :item");
        $qb->setParameter('item', $item);
        $qb->groupBy('e.purchaseItem');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['deliveryQuantity'];
        }
        return $data;

    }

    public function itemDeliveryDetails(User $user,$item)
    {

        $data ='';

        $result = $this->stockItemDetails($user,$item);
        $stockSalesItem = $this->stockSalesItemDetails($user,$item);
        $stockSalesReturnItem = $this->stockSalesReturnItemDetails($user,$item);
        $stockOngoingItem = $this->stockOngoingItemDetails($user,$item);
        $stockReturnItem = $this->stockReturnItemDetails($user,$item);

        foreach( $result as $row  ) {

            $salesQnt = !empty($stockSalesItem[$row['purchaseItemId']]) ? $stockSalesItem[$row['purchaseItemId']] : 0;
            $ongoingQnt = !empty($stockOngoingItem[$row['purchaseItemId']]) ? $stockOngoingItem[$row['purchaseItemId']] : 0;
            $returnQnt = !empty($stockReturnItem[$row['purchaseItemId']]) ? $stockReturnItem[$row['purchaseItemId']] : 0;
            $salesReturnQnt = !empty($stockSalesReturnItem[$row['purchaseItemId']]) ? $stockSalesReturnItem[$row['purchaseItemId']] : 0;

            $remaingQnt = $row['receiveQuantity'] + $salesReturnQnt - $salesQnt - $returnQnt - $ongoingQnt ;
            $received = $row['purchaseDate']->format('d-m-Y');
            $deliveryDate = $row['deliveryDate']->format('d-m-Y');

            $data .= '<tr>';
            $data .= '<td class="numeric" >'.$row['barcode'].'</td>';
            $data .= '<td class="numeric" >'.$received.'</td>';
            $data .= '<td class="numeric" >'.$deliveryDate.'</td>';
            $data .= '<td class="numeric" >'.$row['receiveQuantity'].'</td>';
            $data .= '<td class="numeric" >'.$salesQnt.'</td>';
            $data .= '<td class="numeric" >'.$salesReturnQnt.'</td>';
            $data .= '<td class="numeric" >'.$ongoingQnt.'</td>';
            $data .= '<td class="numeric" >'.$remaingQnt.'</td>';
            $data .= '<td class="numeric" >'.$row['salesPrice'].'</td>';
            $data .= '</tr>';
        }

        return $data;

    }

    public function stockReceiveSingleItem(User $user, $item , $barcode = 0 )
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();

        $qb->from('InventoryBundle:DeliveryItem', 'stock');
        $qb->join('stock.delivery', 'delivery');
        $qb->join('stock.purchaseItem', 'purchaseItem');
        $qb->select('SUM(stock.quantity) AS  receiveQuantity ');
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("delivery.branch = :branch");
        $qb->setParameter('branch', $branch );
        $qb->andWhere("stock.item = :item");
        $qb->setParameter('item', $item);
        if(!empty($barcode)){
            $qb->andWhere("purchaseItem.barcode = :barcode");
            $qb->setParameter('barcode', $barcode);
        }
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['receiveQuantity'];

    }

    public function barcodeWithItem(User $user,$barcode){


        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:PurchaseItem', 'pi');
        $qb->join('pi.item', 'item');
        $qb->select('pi');
        $qb->where("pi.barcode = :barcode");
        $qb->setParameter('barcode', $barcode);
        $qb->andWhere("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;



    }

    public function stockSalesItemHistory(User $user,$item , $barcode = 0 )
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('salesItem.id as salesItemId');
        $qb->addSelect('purchaseItem.id as purchaseItemId');
        $qb->addSelect("sales.invoice AS invoice ");
        $qb->addSelect("sales.updated AS updated ");
        $qb->addSelect("sales.salesMode AS salesMode ");
        $qb->addSelect("sales.process AS process ");
        $qb->addSelect("purchaseItem.barcode AS barcode ");
        $qb->addSelect("salesItem.quantity AS quantity ");
        $qb->addSelect("salesItem.estimatePrice AS estimatePrice");
        $qb->addSelect("salesItem.salesPrice AS salesPrice");

        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done','In-progress','Courier')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("salesItem.item = :item");
        $qb->setParameter('item', $item);
        if(!empty($barcode)){
            $qb->andWhere("purchaseItem.barcode = :barcode");
            $qb->setParameter('barcode', $barcode);
        }
        $qb->orderBy('sales.updated','DESC');
        $data = $qb->getQuery()->getArrayResult();
        return $data;

    }

    public function stockSalesReturnItemHistory(User $user,$item , $barcode = 0 )
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','sales_return_item');
        $qb->join('sales_return_item.salesReturn','sales_return');
        $qb->join('sales_return_item.salesItem','salesItem');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('salesItem.id as salesItemId');
        $qb->addSelect("SUM(sales_return_item.quantity) AS salesReturnQuantity ");
        $qb->where("sales_return.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('sales_return.process =:process ');
        $qb->setParameter('process','complete');
        $qb->andWhere("sales_return.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("salesItem.item = :item");
        $qb->setParameter('item', $item);
        if(!empty($barcode)){
            $qb->andWhere("purchaseItem.barcode = :barcode");
            $qb->setParameter('barcode', $barcode);
        }
        $qb->groupBy('salesItem.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['salesItemId']] = $row['salesReturnQuantity'];
        }
        return $data;

    }

    public function stockReceiveBarcodeItem(User $user, $purchaseItems)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();

        $qb->from('InventoryBundle:DeliveryItem', 'stock');
        $qb->join('stock.delivery', 'delivery');
        $qb->join('stock.purchaseItem', 'purchaseItem');
        $qb->select('purchaseItem.id AS purchaseItemId');
        $qb->addSelect('SUM(stock.quantity) AS  receiveQuantity ');
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("delivery.branch = :branch");
        $qb->setParameter('branch', $branch );
        $qb->andWhere("purchaseItem.id IN (:purchaseItemIds)");
        $qb->setParameter('purchaseItemIds', $purchaseItems);
        $qb->groupBy('purchaseItem.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['receiveQuantity'];
        }
        return $data;


    }
    public function  stockSalesBarcodeItem(User $user , $purchaseItems)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect("SUM(salesItem.quantity) AS salesQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done','In-progress','Courier')));
        $qb->andWhere("sales.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("purchaseItem.id IN (:purchaseItemIds)");
        $qb->setParameter('purchaseItemIds', $purchaseItems);
        $qb->groupBy('purchaseItem.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['salesQuantity'];
        }
        return $data;

    }

    public function stockSalesReturnBarcodeItem(User $user,$purchaseItems )
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','sales_return_item');
        $qb->join('sales_return_item.salesReturn','sales_return');
        $qb->join('sales_return_item.salesItem','salesItem');
        $qb->join('salesItem.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect("SUM(sales_return_item.quantity) AS salesReturnQuantity ");
        $qb->where("sales_return.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('sales_return.process =:process ');
        $qb->setParameter('process','complete');
        $qb->andWhere("sales_return.branches = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("purchaseItem.id IN (:purchaseItemIds)");
        $qb->setParameter('purchaseItemIds', $purchaseItems);
        $qb->groupBy('purchaseItem.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['salesReturnQuantity'];
        }
        return $data;

    }

    public function stockReturnBarcodeItem(User $user,$purchaseItems )
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','e');
        $qb->join('e.purchaseItem','purchaseItem');
        $qb->select('purchaseItem.id as purchaseItemId');
        $qb->addSelect('SUM(e.quantity) as deliveryQuantity ');
        $qb->where("e.approvedBy != ''");
        $qb->andWhere("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.branch = :branch");
        $qb->setParameter('branch', $branch);
        $qb->andWhere("purchaseItem.id IN (:purchaseItemIds)");
        $qb->setParameter('purchaseItemIds', $purchaseItems);
        $qb->groupBy('purchaseItem.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId']] = $row['deliveryQuantity'];
        }
        return $data;


    }

    public function returnBranchSalesItem(User $user , Sales $entity)
    {

        $purchaseItems = array();
        foreach ($entity->getSalesItems() as $salesItem ) {
            $purchaseItems [] = $salesItem->getPurchaseItem()->getId();
        }

        $stockReceiveItem = $this->stockReceiveBarcodeItem($user, $purchaseItems);
        $stockSalesItem = $this->stockSalesBarcodeItem($user, $purchaseItems);
        $stockSalesReturnItem = $this->stockSalesReturnBarcodeItem($user, $purchaseItems);
        $stockReturnItem = $this->stockReturnBarcodeItem($user, $purchaseItems);

        return $data = array('stockReceiveItem' => $stockReceiveItem , 'stockSalesItem' => $stockSalesItem , 'stockSalesReturnItem' => $stockSalesReturnItem, 'stockReturnItem' => $stockReturnItem  );

    }

    public function branchWiseReceiveItem(User $user,$data)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();

        $qb->from('InventoryBundle:DeliveryItem', 'stock');
        $qb->join('stock.delivery', 'delivery');
        $qb->join('delivery.branch', 'branch');
        $qb->join('stock.purchaseItem', 'purchaseItem');
        $qb->select('purchaseItem.id AS purchaseItemId');
        $qb->addSelect('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect('SUM(stock.quantity) AS  receiveQuantity ');
        $qb->where("delivery.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $this->handleWithSearch($qb,$data);
        $qb->groupBy('branch.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['purchaseItemId'].'-'.$row['branchId']] = $row['receiveQuantity'];
        }
        return $data;

    }

    public function branchWiseSalesItem(User $user,$purchaseItem)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('sales.branches','branch');
        $qb->select('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect("SUM(salesItem.quantity) AS salesQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('Done')));
        $qb->andWhere("salesItem.purchaseItem = :item");
        $qb->setParameter('item', $purchaseItem);
        $qb->groupBy('sales.branches');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['branchId']] = $row['salesQuantity'];
        }
        return $data;

    }

    public function branchWiseSalesReturnItem(User $user,$purchaseItem)
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesReturnItem','sales_return_item');
        $qb->join('sales_return_item.salesReturn','sales_return');
        $qb->join('sales_return.branches','branch');
        $qb->join('sales_return_item.salesItem','salesItem');
        $qb->select('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect("SUM(sales_return_item.quantity) AS salesReturnQuantity ");
        $qb->where("sales_return.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('sales_return.process =:process ');
        $qb->setParameter('process','complete');
        $qb->andWhere("salesItem.purchaseItem = :item");
        $qb->setParameter('item', $purchaseItem);
        $qb->groupBy('branch.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['branchId']] = $row['salesReturnQuantity'];
        }
        return $data;

    }

    public function ongoingSalesItem(User $user,$purchaseItem){

        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('sales.branches','branch');
        $qb->select('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect("SUM(salesItem.quantity) AS ongoingQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier')));
        $qb->andWhere("sales.branches is NULL ");
        $qb->andWhere("salesItem.purchaseItem = :item");
        $qb->setParameter('item', $purchaseItem);
        $arrayResult = $qb->getQuery()->getOneOrNullResult();
        $data = $arrayResult['ongoingQuantity'];
        return $data;

    }

    public function branchWiseOngoingSalesItem(User $user,$purchaseItem)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('sales.branches','branch');
        $qb->select('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect("SUM(salesItem.quantity) AS ongoingQuantity ");
        $qb->setParameter('inventory', $inventory);
        $qb->where("sales.inventoryConfig = :inventory");
        $qb->andWhere('sales.process IN(:process)');
        $qb->setParameter('process',array_values(array('In-progress','Courier')));
        $qb->andWhere("salesItem.purchaseItem = :item");
        $qb->setParameter('item', $purchaseItem);
        $qb->groupBy('branch.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['branchId']] = $row['ongoingQuantity'];
        }
        return $data;

    }

    public function branchWiseDeliveryReturnItem(User $user,$purchaseItem)
    {
        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:DeliveryReturn','e');
        $qb->join('e.branch','branch');
        $qb->select('branch.id AS branchId');
        $qb->addSelect('branch.name AS branchName');
        $qb->addSelect('SUM(e.quantity) as deliveryQuantity ');
        $qb->where("e.approvedBy != ''");
        $qb->andWhere("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere("e.purchaseItem = :item");
        $qb->setParameter('item', $purchaseItem);
        $qb->groupBy('branch.id');
        $arrayResult = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($arrayResult as $row) {
            $data[$row['branchId']] = $row['deliveryReturnQuantity'];
        }
        return $data;

    }

}
