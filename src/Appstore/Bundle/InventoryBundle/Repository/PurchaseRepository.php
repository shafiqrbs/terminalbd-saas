<?php
namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * PurchaseOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRepository extends EntityRepository
{

	protected function handleSearchBetween($qb,$data)
	{
		if(!empty($data))
		{

			$startDate = isset($data['startDate'])  ? $data['startDate'] : '';
			$endDate = isset($data['endDate'])  ? $data['endDate'] : '';
			$grn =    isset($data['grn'])? $data['grn'] :'';
			$vendor =    isset($data['vendor'])? $data['vendor'] :'';

			if (!empty($startDate)) {
				$datetime = new \DateTime($startDate);
				$start = $datetime->format('Y-m-d 00:00:00');
				$qb->andWhere("e.created >= :startDate")->setParameter('startDate',$start);
			}

			if (!empty($endDate)) {
				$datetime = new \DateTime($endDate);
				$end = $datetime->format('Y-m-d 23:59:59');
				$qb->andWhere("e.created <= :endDate")->setParameter('endDate',$end);
			}

			if (!empty($memo)) {
				$qb->andWhere("e.memo = :memo");
				$qb->setParameter('memo', $memo);
			}
			if (!empty($grn)) {
				$qb->andWhere("e.grn LIKE :grn");
				$qb->setParameter('grn', $grn.'%');
			}
			if (!empty($vendor)) {
				$qb->join('e.vendor', 'v');
				$qb->andWhere("v.companyName = :companyName");
				$qb->setParameter('companyName', $vendor);
			}

		}

	}

	public function findWithSearch($inventory,$data)
    {
        $config = $inventory->getId();
        $receiveDate = isset($data['receiveDate']) ? $data['receiveDate'] :'';
        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $qb = $this->createQueryBuilder('purchase');
        $qb->where("purchase.id IS NOT NULL");
        $qb->andWhere($qb->expr()->andX(
            $qb->expr()->eq('purchase.inventoryConfig', ':inventoryConfig'),
            $qb->expr()->isNull('purchase.isDelete')
        ))->setParameter('inventoryConfig', $config)
            ->orWhere($qb->expr()->andX(
                $qb->expr()->eq('purchase.inventoryConfig', ':inventoryConfigId'),
                $qb->expr()->eq('purchase.isDelete', ':isDelete')
            ))
            ->setParameter('inventoryConfigId', $config)
            ->setParameter('isDelete', 0);
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');
        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }
        $qb->orderBy('purchase.updated','DESC');
        $qb->getQuery();
        return  $qb;



    }

    public function purchaseOverview($inventory,$data)
    {


    	$receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';

        $memo = isset($data['memo'])? $data['memo'] :'';
        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $qb = $this->createQueryBuilder('purchase');
        $qb->select('SUM(purchase.totalQnt) AS quantity ');
        $qb->addSelect('SUM(purchase.totalAmount) AS total ');
        $qb->addSelect('SUM(purchase.paymentAmount) AS payment');
        $qb->addSelect('SUM(purchase.dueAmount) AS due');
        $qb->addSelect('SUM(purchase.vatAmount) AS vat');
        $qb->addSelect('SUM(purchase.commissionAmount) AS discount');
        $qb->where("purchase.inventoryConfig = :inventory");
	    $qb->setParameter('inventory', $inventory);
	    $qb->andWhere("purchase.process = 'approved'");
        if (!empty($receiveDate)) {
            $compareTo = new \DateTime($receiveDate);
            $receiveDate =  $compareTo->format('Y-m-d');
            $qb->andWhere("purchase.receiveDate LIKE :receiveDate");
            $qb->setParameter('receiveDate', $receiveDate.'%');

        }
        if (!empty($memo)) {
            $qb->andWhere("purchase.memo = :memo");
            $qb->setParameter('memo', $memo);
        }
        if (!empty($grn)) {
            $qb->andWhere("purchase.grn LIKE :grn");
            $qb->setParameter('grn', $grn.'%');
        }
        if (!empty($vendor)) {
            $qb->join('purchase.vendor', 'v');
            $qb->andWhere("v.companyName = :companyName");
            $qb->setParameter('companyName', $vendor);
        }

        $data = $qb->getQuery()->getOneOrNullResult();
        return $data;

    }

	public function reportTransactionOverview($inventory , $data)
	{

		$receiveDate = isset($data['receiveDate'])? $data['receiveDate'] :'';
		$memo = isset($data['memo'])? $data['memo'] :'';
		$grn = isset($data['grn'])? $data['grn'] :'';
		$vendor = isset($data['vendor'])? $data['vendor'] :'';

		$qb = $this->createQueryBuilder('s');
		$qb->join('s.transactionMethod','t');
		$qb->select('t.name as transactionName , sum(s.totalAmount) as total ,sum(s.paymentAmount) as payment , sum(s.dueAmount) as due, sum(s.commissionAmount) as discount, sum(s.vatAmount) as vat');
		$qb->where('s.inventoryConfig = :inventory');
		$qb->setParameter('inventory', $inventory);
		$qb->andWhere('s.process = :process');
		$qb->setParameter('process', 'approved');
		if (!empty($receiveDate)) {
			$compareTo = new \DateTime($receiveDate);
			$receiveDate =  $compareTo->format('Y-m-d');
			$qb->andWhere("purchase.receiveDate LIKE :receiveDate");
			$qb->setParameter('receiveDate', $receiveDate.'%');

		}
		if (!empty($memo)) {
			$qb->andWhere("purchase.memo = :memo");
			$qb->setParameter('memo', $memo);
		}
		if (!empty($grn)) {
			$qb->andWhere("purchase.grn LIKE :grn");
			$qb->setParameter('grn', $grn.'%');
		}
		if (!empty($vendor)) {
			$qb->join('purchase.vendor', 'v');
			$qb->andWhere("v.companyName = :companyName");
			$qb->setParameter('companyName', $vendor);
		}
		$qb->groupBy("s.transactionMethod");
		$res = $qb->getQuery();
		return $result = $res->getArrayResult();
	}

	public  function getSumPurchase($user,$inventory){

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.purchaseVendorItems', 'pvi');
        $qb->select('p.id as id');
        $qb->addSelect('SUM(pvi.quantity) AS quantity ');
        $qb->addSelect('COUNT(pvi.id) AS item ');
        $qb->addSelect('SUM(pvi.quantity * pvi.purchasePrice) AS total');
        $qb->where("p.process = 'imported'");
        $qb->andWhere("p.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->groupBy('p.id');
        $result = $qb->getQuery()->getResult();
        foreach ($result as $row ){

            $entity = $this->find($row['id']);
            $entity->setApprovedBy($user);
            $entity->setTotalQnt($row['quantity']);
            $entity->setTotalItem($row['item']);
            $entity->setTotalAmount($row['total']);
            $entity->setPaymentAmount($row['total']);
            $entity->setTransactionMethod($this->_em->getRepository('SettingToolBundle:TransactionMethod')->find(1));
            $this->_em->persist($entity);

        }

        $this->_em->flush();

        if(!empty($result)){
            return 'imported';
        }
        return false;

   }

	public function reportPurchaseOverview(User $user ,$data = array())
	{
		$global =  $user->getGlobalOption()->getId();

		$qb = $this->_em->createQueryBuilder();
		$qb->from('AccountingBundle:AccountPurchase','e');
		$qb->select('sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
		$qb->where('e.globalOption = :config');
		$qb->setParameter('config', $global);
		$qb->andWhere('e.process = :process');
		$qb->setParameter('process', 'approved');
		$this->handleSearchBetween($qb,$data);
		return $qb->getQuery()->getOneOrNullResult();
	}

	public  function purchaseSimpleUpdate(Purchase $purchase){


        $qb = $this->createQueryBuilder('p');
        $qb->join('p.purchaseItems', 'pvi');
        $qb->select('p.id as id');
        $qb->addSelect('SUM(pvi.quantity) AS quantity ');
        $qb->addSelect('COUNT(pvi.id) AS item ');
        $qb->addSelect('SUM(pvi.purchaseSubTotal) AS total');
        $qb->where("p.id = :purchaseId");
        $qb->setParameter('purchaseId', $purchase);
        $row = $qb->getQuery()->getOneOrNullResult();
        $purchase->setTotalQnt($row['quantity']);
        $purchase->setTotalItem($row['item']);
        $purchase->setTotalAmount($row['total']);
        $purchase->setDueAmount($row['total'] - $purchase->getPaymentAmount());
        $this->_em->persist($purchase);
        $this->_em->flush($purchase);
        return $purchase;

    }


    public  function purchaseModifyUpdate(Purchase $purchase){

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.purchaseVendorItems', 'pvi');
        $qb->select('p.id as id');
        $qb->addSelect('SUM(pvi.quantity) AS quantity ');
        $qb->addSelect('COUNT(pvi.id) AS item ');
        $qb->addSelect('SUM(pvi.quantity * pvi.purchasePrice) AS total');
        $qb->where("p.id = :purchaseId");
        $qb->setParameter('purchaseId', $purchase);
        $qb->groupBy('p.id');
        $row = $qb->getQuery()->getOneOrNullResult();

        $purchase->setTotalQnt($row['quantity']);
        $purchase->setTotalItem($row['item']);
        $purchase->setTotalAmount($row['total']);
        $purchase->setPaymentAmount($row['total']);
        $this->_em->persist($purchase);
        $this->_em->flush($purchase);
    }



    public  function getPurchaseCount($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(e.id)');
        $qb->from('InventoryBundle:Purchase','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $count = $qb->getQuery()->getSingleScalarResult();
        if($count > 0 ){
            return $count+1;
        }else{
            return 1;
        }
        return $code;
    }

    public function updateProcess($purchase,$process = 'complete')
    {
        $purchase->setProcess($process);
        $this->_em->persist($purchase);
        $this->_em->flush($purchase);
    }

    public function searchAutoComplete(InventoryConfig $inventory,$q)
    {

        $search = strtolower($q);
        $query = $this->createQueryBuilder('i');
        $query->select('i.id as id');
        $query->addSelect('i.grn as name');
        $query->addSelect('i.grn as text');
        $query->where("i.id = :inventory");
        $query->setParameter('inventory', $inventory->getId());
        $query->andWhere($query->expr()->like("i.grn", "'%$search%'"  ));
        $query->groupBy('i.id');
        $query->orderBy('i.updated', 'DESC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

	public function inventoryPurchaseMonthly(User $user , $data =array())
	{

		$config =  $user->getGlobalOption()->getInventoryConfig()->getId();
		$compare = new \DateTime();
		$year =  $compare->format('Y');
		$year = isset($data['year'])? $data['year'] :$year;
		$sql = "SELECT MONTH (purchase.created) as month,SUM(purchase.totalAmount) AS total
                FROM Purchase as purchase
                WHERE purchase.inventoryConfig_id = :config AND purchase.process = :process  AND YEAR(purchase.updated) =:year
                GROUP BY month ORDER BY month ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Approved');
		$stmt->bindValue('year', $year);
		$stmt->execute();
		$result =  $stmt->fetchAll();
		return $result;

	}




}
