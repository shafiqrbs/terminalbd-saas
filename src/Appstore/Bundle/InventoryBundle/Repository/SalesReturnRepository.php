<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Item;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturn;
use Appstore\Bundle\InventoryBundle\Entity\SalesReturnItem;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * SalesReturnRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesReturnRepository extends EntityRepository
{

    public function findWithSearch(User $user)
    {

        $config = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->createQueryBuilder('s');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $config);
        if ($branch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function getRowsCount(InventoryConfig $inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(e.id)');
        $qb->from('InventoryBundle:SalesReturn','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $count = $qb->getQuery()->getSingleScalarResult();
        if($count > 0 ){
            return $count+1;
        }else{
            return 1;
        }

    }

    public function getSalesReturnItemSum($item)
    {
        $em = $this->_em;
        $itemQnt = $em->createQueryBuilder()
            ->from('InventoryBundle:SalesReturnItem','e')
            ->select('sum(e.quantity) as quantity')
            ->where('e.salesItem = :item')
            ->setParameter('item', $item->getId())
            ->getQuery()->getSingleResult();
        if($itemQnt){
            return $itemQnt['quantity'];
        }
        return 0;
    }


    public function updateSalesReturn(SalesReturn $salesReturn)
    {
        $em = $this->_em;
        $entity = $em->createQueryBuilder()
            ->from('InventoryBundle:SalesReturnItem','e')
            ->select('sum(e.subTotal) as total , count(e.id) as totalItem, sum(e.quantity) as totalQuantity')
            ->where('e.salesReturn = :salesReturn')
            ->setParameter('salesReturn', $salesReturn ->getId())
            ->getQuery()->getSingleResult();
        if($entity){
            $salesReturn->setTotal($entity['total']);
            $salesReturn->setTotalItem($entity['totalItem']);
            $salesReturn->setTotalQuantity($entity['totalQuantity']);
            $em->flush();
        }
        return $entity;

    }

    public function updateSalesTotalReturnPrice(SalesReturnItem $entity)
    {
        $em = $this->_em;
        $salesReturn =  $entity->getSalesReturn();
        $currentAmount = ($salesReturn->getTotal() - $entity->getSubTotal());
        $currentItem = ($salesReturn->getTotalItem() - 1);
        $currentQuantity = ($salesReturn->getTotalQuantity() - $entity->getQuantity());
        $salesReturn->setTotal($currentAmount);
        $salesReturn->setTotalItem($currentItem);
        $salesReturn->setTotalQuantity($currentQuantity);
        $em->flush();

    }



}
