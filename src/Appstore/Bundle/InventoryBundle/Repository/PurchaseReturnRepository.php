<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * PurchaseReturnRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseReturnRepository extends EntityRepository
{
    public function getRowsCount($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(e.id)');
        $qb->from('InventoryBundle:PurchaseReturn','e');
        $qb->where("e.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $count = $qb->getQuery()->getSingleScalarResult();
        if($count > 0 ){
            return $count+1;
        }else{
            return 1;
        }
        return $item;
    }

    public function insertPurchaseVendor($purchaseReturn,$purchase)
    {
        $purchaseReturn->setVendor($purchase->getVendor());
        $this->_em->flush();

    }

    public function updatePurchaseReturnTotalPrice($purchaseReturn)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('InventoryBundle:PurchaseReturnItem','e')
            ->select('sum(e.subTotal) as total , count(e.id) as totalItem, sum(e.quantity) as totalQuantity')
            ->where('e.purchaseReturn = :purchaseReturn')
            ->setParameter('purchaseReturn', $purchaseReturn ->getId())
            ->getQuery()->getSingleResult();
        $purchaseReturn->setTotal($total['total']);
        $purchaseReturn->setTotalItem($total['totalItem']);
        $purchaseReturn->setTotalQuantity($total['totalQuantity']);
        $em->persist($purchaseReturn);
        $em->flush();
        return $total['total'];

    }


    public function todayPurchaseReturn($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:PurchaseReturn','s');
        $qb->select('s')
            ->where('s.inventoryConfig = :inventory')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime');

        $qb->setParameter('inventory', $inventory)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->orderBy("s.updated", 'DESC');
        return $qb->getQuery()->getResult();
    }

}
