<?php

namespace Appstore\Bundle\InventoryBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\EcommerceBundle\Entity\Order;
use Appstore\Bundle\EcommerceBundle\Entity\OrderItem;
use Appstore\Bundle\InventoryBundle\Entity\InventoryAndroidProcess;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Appstore\Bundle\InventoryBundle\Entity\Item;
use Appstore\Bundle\InventoryBundle\Entity\PurchaseItem;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Appstore\Bundle\InventoryBundle\Entity\SalesItem;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Terminalbd\PosBundle\Entity\Pos;

/**
 * SalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SalesRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {
            $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
            $endDate = isset($data['endDate'])  ? $data['endDate'] : '';
            $invoice =    isset($data['invoice'])? $data['invoice'] :'';
            $process =    isset($data['process'])? $data['process'] :'';
            $transactionMethod =    isset($data['transactionMethod'])? $data['transactionMethod'] :'';
            $courierInvoice =    isset($data['courierInvoice'])? $data['courierInvoice'] :'';
            $salesBy =    isset($data['toUser'])? $data['toUser'] :'';
            $customer =    isset($data['customer'])? $data['customer'] :'';
            $paymentStatus =    isset($data['paymentStatus'])? $data['paymentStatus'] :'';
            $mode =    isset($data['mode'])? $data['mode'] :'';
            $branch =    isset($data['branch'])? $data['branch'] :'';
            $item =    isset($data['item'])? $data['item'] :'';
            $barcode =    isset($data['barcode'])? $data['barcode'] :'';
            $serialNo =    isset($data['serialNo'])? $data['serialNo'] :'';
            $vendor =    isset($data['vendor'])? $data['vendor'] :'';
            if (!empty($startDate)) {
                $datetime = new \DateTime($startDate);
                $start = $datetime->format('Y-m-d 00:00:00');
                $qb->andWhere("s.created >= :startDate")->setParameter('startDate',$start);
            }

            if (!empty($endDate)) {
                $datetime = new \DateTime($endDate);
                $end = $datetime->format('Y-m-d 23:59:59');
                $qb->andWhere("s.created <= :endDate")->setParameter('endDate',$end);
            }

            if (!empty($invoice)) {

                $qb->andWhere("s.invoice LIKE :invoice");
                $qb->setParameter('invoice', $invoice.'%');
              }

            if (!empty($courierInvoice)) {

                $qb->andWhere("s.courierInvoice LIKE :courierInvoice");
                $qb->setParameter('invoice','%'. $courierInvoice.'%');
            }

            if (!empty($process)) {
                $qb->andWhere("s.process = :process");
                $qb->setParameter('process', $process);
            }

            if (!empty($customer)) {
                $qb->andWhere("c.mobile = :mobile");
                $qb->setParameter('mobile', $customer);
            }

            if (!empty($salesBy)) {
                $qb->andWhere("u.username = :user");
                $qb->setParameter('user', $salesBy);
            }
            if (!empty($transactionMethod)) {
                $qb->andWhere("s.transactionMethod = :transactionMethod");
                $qb->setParameter('transactionMethod', $transactionMethod);
            }

            if (!empty($paymentStatus)) {
                $qb->andWhere("s.paymentStatus = :paymentStatus");
                $qb->setParameter('paymentStatus', $paymentStatus);
            }

            if(!empty($mode)){
                $qb->andWhere("s.salesMode = :mode");
                $qb->setParameter('mode', $mode);
            }
            if(!empty($branch)){
                $qb->andWhere("s.branches = :branch");
                $qb->setParameter('branch', $branch);
            }

            if (!empty($item)) {
                $qb->join('si.item','item');
                $qb->andWhere("item.name = :name");
                $qb->setParameter('name', $item);
            }

            if (!empty($vendor)) {
                $qb->andWhere("vendor.companyName = :vendorName");
                $qb->setParameter('vendorName', $vendor);
            }

            if (!empty($barcode)) {
                $qb->leftJoin('si.purchaseItem','purchaseItem');
                $qb->andWhere("purchaseItem.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($serialNo)) {
                $qb->andWhere("si.serialNo LIKE :serialNo");
                $qb->setParameter('serialNo','%'. $serialNo.'%');
            }

        }

    }

    public function findAndroidDeviceSales($x)
    {
        $ids = array();
        foreach ($x as $y){
            $ids[]=$y['id'];
        }
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.androidProcess','a');
        $qb->select('a.id as androidId');
        $qb->addSelect('sum(s.subTotal) as subTotal ,sum(s.total) as total ,sum(s.payment) as salesReceive ,sum(s.due) as due ,sum(s.discount) as discount , count(s.id) as voucher');
        $qb->where("s.androidProcess IN (:salesId)")->setParameter('salesId', $ids);
        $qb->groupBy('androidId');
        $result = $qb->getQuery()->getArrayResult();
        $array= [];
        foreach ($result as $row ){
            $array[$row['androidId']]= $row;
        }
        return $array;
    }

    public function salesLists( User $user , $mode = '', $data)
    {

        /* @var InventoryConfig $config */
        $config = $user->getGlobalOption()->getInventoryConfig()->getId();
        $existArray = array(
            'ROLE_DOMAIN_INVENTORY_MANAGER',
            'ROLE_DOMAIN_INVENTORY_BRANCH_MANAGER',
            'ROLE_DOMAIN_INVENTORY_APPROVE',
            'ROLE_DOMAIN_MANAGER',
            'ROLE_DOMAIN'
        );

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.customer', 'c');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->where("s.id IS NOT NULL");
        $qb->andWhere($qb->expr()->andX(
            $qb->expr()->eq('s.inventoryConfig', ':inventoryConfig'),
            $qb->expr()->isNull('s.isDelete')
        ))->setParameter('inventoryConfig', $config)
          ->orWhere($qb->expr()->andX(
                $qb->expr()->eq('s.inventoryConfig', ':inventoryConfigId'),
                $qb->expr()->eq('s.isDelete', ':isDelete')
          ))
          ->setParameter('inventoryConfigId', $config)
          ->setParameter('isDelete', 0);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function findArrayIds($ids){

	    $query = $this->createQueryBuilder('e');
	    $query->select('e');
	    $query->andWhere("e.id IN(:ids)");
	    $query->setParameter('ids', $ids);
	    return $query->getQuery()->getResult();
    }


	public function searchAutoComplete($q, InventoryConfig $inventory)
	{

		$query = $this->createQueryBuilder('e');
		$query->join('e.inventoryConfig', 'ic');
		$query->select('e.invoice as id');
		$query->addSelect('e.invoice as text');
		$query->where($query->expr()->like("e.invoice", "'$q%'"  ));
		$query->andWhere("ic.id = :inventory");
		$query->setParameter('inventory', $inventory->getId());
		$query->groupBy('e.id');
		$query->orderBy('e.companyName', 'ASC');
		$query->setMaxResults( '30' );
		return $query->getQuery()->getResult();

	}


    public function salesReport( User $user , $data)
    {

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->leftJoin('s.transactionMethod', 't');
        $qb->innerJoin('s.salesItems', 'si');
        $qb->select('u.username as salesBy');
        $qb->addSelect('t.name as transactionMethod');
        $qb->addSelect('s.id as id');
        $qb->addSelect('s.created as created');
        $qb->addSelect('s.process as process');
        $qb->addSelect('s.invoice as invoice');
        $qb->addSelect('(s.due) as due');
        $qb->addSelect('(s.subTotal) as subTotal');
        $qb->addSelect('(s.total) as total');
        $qb->addSelect('(s.payment) as payment');
        $qb->addSelect('(s.totalItem) totalItem');
        $qb->addSelect('(s.discount) as discount');
        $qb->addSelect('(s.vat) as vat');
        $qb->addSelect('SUM(si.purchasePrice * si.quantity) as purchasePrice');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('s.id');
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }


    public function salesUserReport( User $user , $data)
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->select('u.username as salesBy');
        $qb->addSelect('u.id as userId');
        $qb->addSelect('SUM(s.due) as due');
        $qb->addSelect('SUM(s.subTotal) as subTotal');
        $qb->addSelect('SUM(s.total) as total');
        $qb->addSelect('SUM(s.payment) as payment');
        $qb->addSelect('SUM(s.totalItem) totalItem');
        $qb->addSelect('SUM(s.discount) as discount');
        $qb->addSelect('SUM(s.vat) as vat');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');

        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('salesBy');
        $qb->orderBy('total','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }


    public function salesUserPurchasePriceReport(User $user,$data)
    {

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->join('s.salesItems','si');
        $qb->select('u.username as salesBy');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');

        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('totalPurchaseAmount','DESC');
        $qb->groupBy('salesBy');
        $result = $qb->getQuery()->getArrayResult();
        $array= array();
        foreach ($result as $row ){
            $array[$row['salesBy']]= $row['totalPurchaseAmount'];
        }
        return $array;
    }

	public function inventorySalesMonthly(User $user , $data =array())
	{

		$config =  $user->getGlobalOption()->getInventoryConfig()->getId();
		$compare = new \DateTime();
		$year =  $compare->format('Y');
		$year = isset($data['year'])? $data['year'] :$year;
		$sql = "SELECT DATE_FORMAT(sales.created,'%M') as month , MONTH (sales.created) as monthId ,SUM(sales.total) AS total,SUM(sales.subTotal) AS subTotal,
                SUM(sales.discount) AS discount,SUM(sales.vat) AS vat,SUM(sales.payment) AS receive,SUM(sales.due) AS due
                FROM Sales as sales
                WHERE sales.inventoryConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year
                GROUP BY month ORDER BY monthId ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = array();
        foreach ($results as $result){
            $arrays[$result['month']] = $result;
        }
        return $arrays;



	}

    public function inventorySalesDaily(User $user , $data =array())
    {

        $config =  $user->getGlobalOption()->getInventoryConfig()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(sales.created,'%d-%m-%Y') as date , DATE (sales.created) as dateId ,SUM(sales.total) AS total,SUM(sales.subTotal) AS subTotal,
                SUM(sales.discount) AS discount,SUM(sales.vat) AS vat,SUM(sales.payment) AS receive,SUM(sales.due) AS due
                FROM Sales as sales
                WHERE sales.inventoryConfig_id = :config AND sales.process = :process AND MONTHNAME(sales.created) =:month  AND YEAR(sales.created) =:year
                GROUP BY date ORDER BY dateId ASC";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('config', $config);
        $stmt->bindValue('process', 'Done');
        $stmt->bindValue('year', $year);
        $stmt->bindValue('month', $month);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = array();
        foreach ($results as $result){
            $arrays[$result['date']] = $result;
        }
        return $arrays;
    }

    public function monthlySales(User $user , $data =array())
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $compare = new \DateTime();
        $year =  $compare->format('Y');
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT sales.salesBy_id as salesBy, MONTH (sales.created) as month,SUM(sales.total) AS total
                FROM Sales as sales
                WHERE sales.inventoryConfig_id = :inventoryConfig AND sales.process = :process  AND YEAR(sales.created) =:year
                GROUP BY month , salesBy ORDER BY salesBy ASC";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('inventoryConfig', $inventory);
        $stmt->bindValue('process', 'Done');
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $result =  $stmt->fetchAll();
        return $result;
    }

	public function currentMonthSales(User $user , $data =array())
	{


		$config =  $user->getGlobalOption()->getInventoryConfig()->getId();

		$compare = new \DateTime();
		$year =  $compare->format('Y');
		$month =  $compare->format('m');
		$year = isset($data['year'])? $data['year'] :$year;

		$sql = "SELECT sales.salesBy_id as salesBy, MONTH (sales.created) as month, SUM(sales.total) AS total
                FROM Sales as sales
                WHERE sales.inventoryConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year AND MONTH(sales.created) =:month
                GROUP BY month , salesBy ORDER BY salesBy ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->bindValue('month', $month);
		$stmt->execute();
		$result =  $stmt->fetchAll();
		return $result;


	}

	public function salesPurchasePriceReport(User $user,$data,$x)
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $ids = array();
        foreach ($x as $y){
            $ids[]=$y['id'];
        }

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.salesItems','si');
        $qb->select('s.id as salesId');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $qb->andWhere("s.id IN (:salesId)")->setParameter('salesId', $ids);

        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('totalPurchaseAmount','DESC');
        $qb->groupBy('salesId');
        $result = $qb->getQuery()->getArrayResult();
        $array= array();
        foreach ($result as $row ){
            $array[$row['salesId']]= $row['totalPurchaseAmount'];
        }
        return $array;
    }

    public function getSalesLastId($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s.id');
        $qb->from('InventoryBundle:Sales','s');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory->getId());
        $qb->orderBy('s.id','DESC');
        $qb->setMaxResults(1);
        $lastId = $qb->getQuery()->getSingleScalarResult();
        if( $lastId > 0 ){
            return $lastId +1;
        }else{
            return 1;
        }
        return $lastId;
    }

    public function updateSalesTotalPrice(Sales $sales,$import ='')
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('InventoryBundle:SalesItem','si')
            ->select('sum(si.subTotal) as total , sum(si.quantity) as totalItem')
            ->where('si.sales = :sales')
            ->setParameter('sales', $sales ->getId())
            ->getQuery()->getOneOrNullResult();
        if($import == 'import'){
            $sales->setPayment($total['total']);
        }
        if($total['total'] > 0){
	        $subTotal = $total['total'];
            $sales->setSubTotal($total['total']);
            $sales->setTotal($total['total'] + $sales->getVat());
            $sales->setDue($total['total']+ $sales->getVat());
            $sales->setTotalItem($total['totalItem']);
	        $sales->setDiscount($this->getUpdateDiscount($sales,$subTotal));
	        $sales->setTotal(floor($subTotal - $sales->getDiscount()));
	        $sales->setDue(floor($subTotal - $sales->getDiscount()));
        }else{
            $sales->setSubTotal(0);
            $sales->setTotal(0);
            $sales->setDue(0);
            $sales->setTotalItem(0);
            $sales->setDiscount(0);
            $sales->setVat(0);
        }
	    if ($sales->getInventoryConfig()->getVatEnable() == 1 && $sales->getInventoryConfig()->getVatPercentage() > 0) {
		    $totalAmount = $sales->getTotal();
		    $vat = $this->getCulculationVat($sales,$totalAmount);
		    $sales->setVat($vat);
	    }

        $em->persist($sales);
        $em->flush();
        return $sales;

    }

	public function getUpdateDiscount(Sales $invoice,$subTotal)
	{
		if($invoice->getDiscountType() == 'Flat'){
			$discount = $invoice->getDiscountCalculation();
		}else{
			$discount = ($subTotal * $invoice->getDiscountCalculation())/100;
		}
		return round($discount,2);
	}

    public function updateSalesPaymentReceive(AccountSales $accountSales)
    {
        /* @var Sales $sales **/

        $sales = $accountSales->getSales();
        $sales->setPayment($sales->getPayment() + $accountSales->getAmount());
        $sales->setDue($sales->getDue() - $accountSales->getAmount());
        if($sales->getDue() == 0 ){
            $sales->setPaymentStatus('Paid');
        }
        $this->_em->persist($sales);
        $this->_em->flush();
    }

    public function todaySalesOverview(User $user , $mode='')
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();
        $branch = $user->getProfile()->getBranches();

        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:Sales','s');
        $qb->select('sum(s.subTotal) as subTotal , sum(s.total) as total , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.inventoryConfig = :inventory')
            ->andWhere('s.salesMode =:mode')
            ->andWhere('s.paymentStatus IN (:pStatus)')
            ->andWhere('s.updated >= :today_startdatetime')
            ->andWhere('s.updated <= :today_enddatetime');
        $qb->setParameter('inventory', $inventory)
            ->setParameter('mode', $mode)
            ->setParameter('pStatus', array('Paid','Due'))
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        if ($branch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $branch);
        }
        $qb->orderBy("s.updated", 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function reportSalesOverview(User $user ,$data)
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->select('sum(s.subTotal) as subTotal , sum(s.total) as total ,sum(s.payment) as totalPayment , count(s.id) as totalVoucher, count(s.totalItem) as totalItem, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process IN (:process)');
        $qb->setParameter('process', array('Done','POS','Delivered'));
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public  function reportSalesItemPurchaseSalesOverview(User $user, $data = array()){

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.salesItems','si');
        $qb->select('SUM(si.quantity) AS quantity');
        $qb->addSelect('COUNT(si.id) AS totalItem');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice) AS purchasePrice');
        $qb->addSelect('SUM(si.quantity * si.salesPrice) AS salesPrice');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function reportSalesTransactionOverview(User $user , $data = array())
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.transactionMethod','t');
        $qb->select('t.name as transactionName , sum(s.subTotal) as subTotal , sum(s.total) as total ,sum(s.payment) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);

        $qb->groupBy("s.transactionMethod");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function reportSalesModeOverview(User $user,$data)
    {

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->select('s.salesMode as name , sum(s.subTotal) as subTotal , sum(s.total) as total ,sum(s.payment) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy("s.salesMode");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function reportSalesProcessOverview(User $user,$data)
    {


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->select('s.process as name , sum(s.subTotal) as subTotal , sum(s.total) as total ,sum(s.payment) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.inventoryConfig = :inventory');
        $qb->setParameter('inventory', $inventory);
        $this->handleSearchBetween($qb,$data);

        $qb->groupBy("s.process");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public  function reportSalesItem(User $user , $data = ''){


        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.salesItems','si');
        $qb->join('si.item','item');
        $qb->leftJoin('si.purchaseItem','pi');
        $qb->select('s.created AS created');
        $qb->addSelect('s.invoice AS invoice');
        $qb->addSelect('si.quantity AS quantity');
        $qb->addSelect('si.purchasePrice');
        $qb->addSelect('si.salesPrice');
        $qb->addSelect('item.name AS name');
        $qb->addSelect('pi.barcode AS barcode');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public  function reportSalesItemStockDetails(User $user, $data=''){

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','si');
        $qb->join('si.sales','s');
        $qb->leftJoin('s.customer','customer');
        $qb->join('si.item','item');
        $qb->join('si.purchaseItem','pi');
        $qb->leftJoin('pi.purchase','purchase');
        $qb->leftJoin('purchase.vendor','vendor');
        $qb->select('s.created AS salesCreated');
        $qb->addSelect('customer.name AS customerName');
        $qb->addSelect('s.invoice AS salesInvoice');
        $qb->addSelect('pi.barcode AS barcode');
        $qb->addSelect('pi.expiredDate AS purchaseExpiredDate');
        $qb->addSelect('purchase.grn AS purchaseGrn');
        $qb->addSelect('vendor.vendorCode AS vendorCode');
        $qb->addSelect('si.assuranceType AS assuranceType');
        $qb->addSelect('si.assuranceToCustomer AS assuranceToCustomer');
        $qb->addSelect('si.serialNo AS serialNo');
        $qb->addSelect('si.quantity AS quantity');
        $qb->addSelect('si.salesPrice AS salesPrice');
        $qb->addSelect('item.sku AS name');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public  function reportSalesItemPurchaseItemDetails(User $user, $data=''){

        $inventory =  $user->getGlobalOption()->getInventoryConfig()->getId();
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:SalesItem','si');
        $qb->join('si.sales','s');
        $qb->leftJoin('s.customer','customer');
        $qb->join('si.item','item');
        $qb->join('si.purchaseItem','pi');
        $qb->leftJoin('pi.purchase','purchase');
        $qb->leftJoin('purchase.vendor','vendor');
        $qb->select('s.created AS salesCreated');
        $qb->addSelect('customer.name AS customerName');
        $qb->addSelect('s.invoice AS salesInvoice');
        $qb->addSelect('pi.barcode AS barcode');
        $qb->addSelect('pi.expiredDate AS purchaseExpiredDate');
        $qb->addSelect('purchase.grn AS purchaseGrn');
        $qb->addSelect('vendor.vendorCode AS vendorCode');
        $qb->addSelect('si.assuranceType AS assuranceType');
        $qb->addSelect('si.assuranceToCustomer AS assuranceToCustomer');
        $qb->addSelect('si.serialNo AS serialNo');
        $qb->addSelect('si.quantity AS quantity');
        $qb->addSelect('si.salesPrice AS salesPrice');
        $qb->addSelect('item.sku AS name');
        $qb->where("s.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery();
        return $result;
    }

    public function todaySales(User $user , $mode = '')
    {

        $inventory = $user->getGlobalOption()->getInventoryConfig();

        $qb = $this->_em->createQueryBuilder();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');
        $qb->from('InventoryBundle:Sales','s');
        $qb->select('s')
            ->where('s.inventoryConfig = :inventory')
            ->andWhere('s.salesMode =:mode')
            ->andWhere('s.created >= :today_startdatetime')
            ->andWhere('s.created <= :today_enddatetime');

        $qb->setParameter('inventory', $inventory)
            ->setParameter('mode', $mode)
            ->setParameter('today_startdatetime', $today_startdatetime)
            ->setParameter('today_enddatetime', $today_enddatetime);
        $qb->orderBy("s.invoice", 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findBySalesReturn($saleId = 0)
    {
        return $query = $this->findOneBy(array('invoice'=>$saleId));
    }

    public function getCulculationVat(Sales $sales,$totalAmount)
    {
        $vat = ( ($totalAmount * (int)$sales->getInventoryConfig()->getVatPercentage())/100 );
        return round($vat);
    }

    public function insertPosSales(GlobalOption $option,Pos $pos,$cart)
    {
        $em = $this->_em;
        /* @var $config InventoryConfig */
        $config = $option->getInventoryConfig();
        $sales = new Sales();
        $sales->setInventoryConfig($option->getInventoryConfig());
        $sales->setDeviceSalesId($pos->getInvoice());
        $sales->setSubTotal($pos->getSubTotal());
        $sales->setDiscount($pos->getDiscount());
        $sales->setDiscountType($pos->getDiscountType());
        $sales->setDiscountCalculation($pos->getDiscountCalculation());
        $sales->setTotal($pos->getTotal());
        if($pos->getPayment() > $pos->getTotal()){
            $sales->setPayment($pos->getTotal());
            $sales->setReceive($pos->getTotal());
        }else{
            $sales->setPayment($pos->getReceive());
            $sales->setReceive($pos->getReceive());
        }
        $sales->setVat($pos->getVat());
        $sales->setVatPercent($pos->getVatPercent());
        $sales->setSd($pos->getSd());
        $sales->setSdPercent($pos->getSdPercent());
        $sales->setDeliveryCharge($pos->getDeliveryCharge());
        $sales->setDue($pos->getDue());
        $sales->setTransactionMethod($pos->getTransactionMethod());
        $sales->setPaymentCard($pos->getPaymentCard());
        $sales->setTransactionId($pos->getTransactionId());
        $sales->setCardNo($pos->getCardNo());
        $sales->setPaymentMobile($pos->getPaymentMobile());
        if($pos->getBank()){
            $sales->setAccountBank($pos->getAccountBank());
        }
        if($pos->getAccountMobileBank()){
            $sales->setAccountMobileBank($pos->getAccountMobileBank());
        }
        $sales->setCreatedBy($pos->getCreatedBy());
        $sales->setSalesBy($pos->getSalesBy());
        $sales->setCustomer($pos->getCustomer());
        $created = new \DateTime('now');
        $sales->setCreated($created);
        $sales->setUpdated($created);
        $sales->setProcess("Done");
        $sales->setPaymentStatus("Paid");
        $sales->setPaymentStatus($pos->getPaymentStatus());
        $em->persist($sales);
        $em->flush();
        if($config->getSalesMode() == 'purchase-item'){
            $this->insertPosPurchaseItem($sales,$cart);
        }else{
            $this->insertPosSalesItem($sales,$cart);
        }
        $em->getRepository('AccountingBundle:AccountSales')->insertAccountSales($sales);
        return $sales->getId();

    }

    public function insertEcommerceSales(Order $order)
    {
        $em = $this->_em;
        $option = $order->getGlobalOption();

        $sales = new Sales();
        $sales->setInventoryConfig($option->getInventoryConfig());
        $sales->setDeviceSalesId($order->getInvoice());
        $sales->setSubTotal($order->getSubTotal());
        $sales->setDiscount($order->getDiscount());
        $sales->setTotal($order->getTotal());
        $sales->setPayment($order->getReceive());
        $sales->setReceive($order->getReceive());
        $sales->setVat($order->getVat());
        $sales->setDeliveryCharge($order->getShippingCharge());
        $sales->setDue($order->getDue());
        $sales->setTransactionMethod($order->getTransactionMethod());
        $sales->setTransactionId($order->getTransaction());
        $sales->setPaymentMobile($order->getPaymentMobile());
        if($order->getAccountMobileBank()){
            $sales->setAccountMobileBank($order->getAccountMobileBank());
        }
        $sales->setCreatedBy($order->getProcessBy());
        $sales->setCustomer($order->getCustomer());
        $sales->setCreated($order->getCreated());
        $sales->setUpdated($order->getUpdated());
        $sales->setSalesBy($order->getProcessBy());
        $sales->setProcess("Done");
        $sales->setSalesMode("Ecommerce");
        $sales->setPaymentStatus("Paid");
        $em->persist($sales);
        $em->flush();
        $this->insertEcommerecSalesItem($sales,$order);
        $em->getRepository('AccountingBundle:AccountSales')->insertAccountSales($sales);
        return $sales->getId();

    }

    public function insertEcommerceDirectOrder(Order $order)
    {
        $em = $this->_em;
        $option = $order->getGlobalOption();

        $sales = new Sales();
        $sales->setInventoryConfig($option->getInventoryConfig());
        $sales->setOrder($order);
        $sales->setDeviceSalesId($order->getInvoice());
        $sales->setSubTotal($order->getSubTotal());
        $sales->setDiscount($order->getDiscount());
        $sales->setTotal($order->getTotal());
        $sales->setPayment($order->getReceive());
        $sales->setReceive($order->getReceive());
        $sales->setVat($order->getVat());
        $sales->setDeliveryCharge($order->getShippingCharge());
        $sales->setDue($order->getDue());
        $sales->setTransactionMethod($order->getTransactionMethod());
        $sales->setTransactionId($order->getTransaction());
        $sales->setPaymentMobile($order->getPaymentMobile());
        if($order->getAccountMobileBank()){
            $sales->setAccountMobileBank($order->getAccountMobileBank());
        }
        $sales->setCreatedBy($order->getProcessBy());
        $sales->setCustomer($order->getCustomer());
        $sales->setCreated($order->getCreated());
        $sales->setUpdated($order->getUpdated());
        $sales->setSalesBy($order->getProcessBy());
        $sales->setProcess("In-progress");
        $sales->setSalesMode("Ecommerce");
        $em->persist($sales);
        $em->flush();
        $this->insertEcommerecSalesItem($sales,$order);

    }

    private function insertEcommerecSalesItem(Sales $sales,Order $order)
    {
        $em = $this->_em;
        if($order->getOrderItems()){

            /* @var $item OrderItem */

            foreach ($order->getOrderItems() as $item):

                $salesItem = new SalesItem();
                $salesItem->setSales($sales);
                $stockId = $item->getItem()->getInventoryItem();
                if ($stockId) {
                    /* @var Item $stockId */
                    $salesItem->setItem($stockId);
                    $salesItem->setPurchasePrice($stockId->getAvgPurchasePrice());
                }
                $salesItem->setQuantity($item->getQuantity());
                $salesItem->setEstimatePrice(floatval($item->getPrice()));
                $salesItem->setSalesPrice(floatval($item->getPrice()));
                $salesItem->setSubTotal($salesItem->getQuantity() * $salesItem->getSalesPrice());
                $em->persist($salesItem);
                $em->flush();
            endforeach;

        }
        $em->getRepository('InventoryBundle:StockItem')->insertSalesStockItem($sales);
        $em->getRepository('InventoryBundle:Item')->getItemSalesUpdate($sales->getId());
    }

    private function insertPosSalesItem($sales,$cart)
    {
        $em = $this->_em;
        if($cart->contents()){
           foreach ($cart->contents() as $item):

               $salesItem = new SalesItem();
               $salesItem->setSales($sales);
               $stockId = $em->getRepository('InventoryBundle:Item')->find($item['id']);
               if ($stockId) {
                   /* @var Item $stockId */
                   $salesItem->setItem($stockId);
                   $salesItem->setPurchasePrice($stockId->getAvgPurchasePrice());
               }
               $salesItem->setQuantity($item['quantity']);
               if (isset($item['price']) and $item['price']) {
                   $salesItem->setSalesPrice(floatval($item['price']));
               }
               $salesItem->setSubTotal($salesItem->getQuantity() * $salesItem->getSalesPrice());
               $em->persist($salesItem);
               $em->flush();
           endforeach;

        }
        $em->getRepository('InventoryBundle:StockItem')->insertSalesStockItem($sales);
        $em->getRepository('InventoryBundle:Item')->getItemSalesUpdate($sales->getId());
    }

    public function insertPosPurchaseItem($sales,$cart)
    {
        $em = $this->_em;
        if($cart->contents()){
            foreach ($cart->contents() as $item):

                $salesItem = new SalesItem();
                $salesItem->setSales($sales);
                $purchaseItem = $em->getRepository('InventoryBundle:PurchaseItem')->find($item['purchaseItem']);
                if ($purchaseItem) {
                    /* @var PurchaseItem $purchaseItem */
                    $salesItem->setItem($purchaseItem->getItem());
                    $salesItem->setPurchaseItem($purchaseItem);
                    $salesItem->setPurchasePrice($purchaseItem->getItem()->getAvgPurchasePrice());
                }
                $salesItem->setQuantity($item['quantity']);
                if (isset($item['price']) and $item['price']) {
                    $salesItem->setSalesPrice(floatval($item['price']));
                }
                $salesItem->setSubTotal($salesItem->getQuantity() * $salesItem->getSalesPrice());
                $em->persist($salesItem);
                $em->flush();

            endforeach;

        }
        $em->getRepository('InventoryBundle:StockItem')->insertSalesStockItem($sales);
        $em->getRepository('InventoryBundle:Item')->getItemSalesUpdate($sales->getId());

    }


    public function insertApiSales(GlobalOption $option,InventoryAndroidProcess $process)
    {
        $em = $this->_em;
        $items = json_decode($process->getJsonItem(),true);
        if($items){
            foreach ($items as $item):
                $sales = new Sales();
                $sales->setInventoryConfig($option->getInventoryConfig());
                $sales->setAndroidProcess($process);
                $sales->setInvoice($item['invoiceId']);
                $sales->setDeviceSalesId($item['invoiceId']);
                $sales->setSubTotal($item['subTotal']);
                if(isset($item['discount']) and $item['discount'] > 0){
                    $sales->setDiscount($item['discount']);
                    $sales->setDiscountType($item['discountType']);
                    $sales->setDiscountCalculation($item['discountCalculation']);
                }
                $sales->setTotal($item['total']);
                if($item['total'] < $item['receive']){
                    $sales->setPayment($item['total']);
                }else{
                    $sales->setPayment($item['receive']);
                    $sales->setDue($item['total'] - $item['receive']);
                }
                $sales->setVat($item['vat']);
                if(isset($item['transactionMethod']) and $item['transactionMethod']){
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>$item['transactionMethod']));
                    if($method){
                        $sales->setTransactionMethod($method);
                    }
                }elseif(isset($item['transactionMethod']) and empty($item['transactionMethod']) and $sales->getReceived() > 0){
                    $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>'cash'));
                    $sales->setTransactionMethod($method);
                }
                if(isset($item['bankAccount']) and $item['bankAccount'] > 0 ){
                    $bank = $em->getRepository('AccountingBundle:AccountBank')->find($item['bankAccount']);
                    if($bank){
                        $sales->setAccountBank($bank);
                    }
                    if(isset($item['paymentCard']) and $item['paymentCard']){
                        $card = $em->getRepository('SettingToolBundle:PaymentCard')->find($item['paymentCard']);
                        $sales->setPaymentCard($card);
                    }
                }
                if(isset($item['paymentCardNo']) and $item['paymentCardNo']) {
                    $sales->setCardNo($item['paymentCardNo']);
                }
                if(isset($item['transactionId']) and $item['transactionId']) {
                    $sales->setCardNo($item['transactionId']);
                }
                if(isset($item['mobileBankAccount']) and $item['mobileBankAccount'] > 0){
                    $mobile = $em->getRepository('AccountingBundle:AccountMobileBank')->find($item['mobileBankAccount']);
                    if($mobile){
                        $sales->setAccountMobileBank($mobile);
                    }
                }
                if(isset($item['paymentMobile']) and $item['paymentMobile']) {
                    $sales->setPaymentMobile($item['paymentMobile']);
                }
                if(isset($item['customerName']) and $item['customerName'] and isset($item['customerMobile']) and $item['customerMobile']){
                    $customer = $em->getRepository('DomainUserBundle:Customer')->newExistingCustomerForSales($option,$item['customerMobile'],$item);
                    $sales->setCustomer($customer);
                }elseif(($item['customerId']) and $item['customerId'] > 0 ){
                    $customer = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('globalOption'=>$option,'id'=>$item['customerId']));
                    $sales->setCustomer($customer);
                }else{
                    $customer = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('globalOption' => $option, 'mobile' => $option->getMobile()));
                    $sales->setCustomer($customer);
                }
                if(($item['createdBy']) and $item['createdBy'] > 0){
                    $createdBy = $em->getRepository('UserBundle:User')->find($item['createdBy']);
                    $sales->setCreatedBy($createdBy);
                }
                if(($item['salesBy']) and $item['salesBy'] > 0){
                    $salesBy = $em->getRepository('UserBundle:User')->find($item['salesBy']);
                    $sales->setSalesBy($salesBy);
                }
                if($sales->getTransactionMethod() and $sales->getTransactionMethod()->getSlug() == 'mobile' and $sales->getAccountMobileBank() and $sales->getAccountMobileBank()->getServiceCharge() > 0){
                    $serviceCharge = $this->getCalculationBankServiceCharge($sales);
                    $sales->setDiscount($serviceCharge['discount']);
                    $sales->setTotal($serviceCharge['total']);
                    $sales->setPayment($serviceCharge['total']);
                }elseif($sales->getTransactionMethod() and $sales->getTransactionMethod()->getSlug() == 'bank' and $sales->getAccountBank() and $sales->getAccountBank()->getServiceCharge() > 0){
                    $serviceCharge = $this->getCalculationBankServiceCharge($sales);
                    $sales->setDiscount($serviceCharge['discount']);
                    $sales->setTotal($serviceCharge['total']);
                    $sales->setPayment($serviceCharge['total']);
                }
                $created = new \DateTime($item['created']);
                $sales->setCreated($created);
                $sales->setUpdated($created);
                $sales->setProcess("Device");
                $sales->setPaymentStatus("Paid");
                $em->persist($sales);
                $em->flush();
                $em->getRepository("InventoryBundle:Item")->getItemSalesUpdate($sales);

            endforeach;
            $this->insertApiSalesItem( $option, $process);
        }
    }

    public function insertApiSalesItem(GlobalOption $option,InventoryAndroidProcess $process){

        $em = $this->_em;
        $conf = $option->getInventoryConfig();
        $items = json_decode($process->getJsonSubItem(),true);
        if($items) {
            foreach ($items as $item):
                $deviceSalesId = $item['salesId'];
                $sales = $em->getRepository('InventoryBundle:Sales')->findOneBy(array('inventoryConfig' => $conf, 'deviceSalesId' => $deviceSalesId));
                if ($sales) {
                    $salesItem = new SalesItem();
                    $salesItem->setAndroidProcess($process->getId());
                    $salesItem->setSales($sales);
                    $stockId = $em->getRepository('InventoryBundle:Item')->find($item['stockId']);
                    if ($stockId) {
                        $salesItem->setItem($stockId);
                        $salesItem->setPurchasePrice($stockId->getAvgPurchasePrice());
                    }
                    $salesItem->setQuantity($item['quantity']);
                    if (isset($item['unitPrice']) and $item['unitPrice']) {
                        $salesItem->setSalesPrice(floatval($item['unitPrice']));
                    }
                    $salesItem->setSubTotal($item['subTotal']);
                    $em->persist($salesItem);
                    $em->flush();
                }
                $em->getRepository('InventoryBundle:StockItem')->insertSalesStockItem($sales);
                $em->getRepository('InventoryBundle:Item')->getItemSalesUpdate($sales->getId());

            endforeach;
        }

    }

    public function getCalculationBankServiceCharge(Sales $entity){

        if($entity->getTransactionMethod()->getSlug() == 'mobile' and !empty($entity->getAccountMobileBank()) and !empty($entity->getAccountMobileBank()->getServiceCharge())){
            $serviceCharge = $entity->getAccountMobileBank()->getServiceCharge();
            $totalServiceCharge = (($entity->getTotal() * $serviceCharge)/100);
            $discount = round($entity -> getDiscount() + $totalServiceCharge);
            $total = ( $entity->getSubTotal()- $discount);
            return $data = array('total'=>$total,'discount' => $discount);
        }elseif($entity->getTransactionMethod()->getSlug() == 'bank' and !empty($entity->getAccountBank()) and !empty($entity->getAccountBank()->getServiceCharge())){
            $serviceCharge = $entity->getAccountBank()->getServiceCharge();
            $totalServiceCharge = (($entity->getTotal() * $serviceCharge)/100);
            $discount = round($entity -> getDiscount() + $totalServiceCharge);
            $total = ( $entity->getSubTotal()- $discount);
            return $data = array('total' => $total,'discount' => $discount);
        }
    }
    public function updateApiSalesPurchasePrice($android)
    {
        $sql = "Update medicine_sales as sales
            inner join (
              select ele.sales_id, ROUND(COALESCE(SUM(ele.quantity * ele.purchasePrice),0),2) as purchasePrice
              from SalesItem as ele
              where ele.sales_id is not NULL
              group by ele.sales_id
            ) as pa on sales.id = pa.sales_id
            inner JOIN account_sales as aSales ON sales.id = aSales.sales_id
            set sales.purchasePrice = pa.purchasePrice , aSales.purchasePrice = pa.purchasePrice
            WHERE sales.androidProcess_id =:android";
        $qb = $this->getEntityManager()->getConnection()->prepare($sql);
        $qb->bindValue('android', $android);
        $qb->execute();
    }

    public function countNumberSalesItem($batch)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineSales','si')
            ->select('count(si.id) as totalCount')
            ->where("si.androidProcess={$batch}")
            ->getQuery()->getOneOrNullResult();
        return $total['totalCount'];

    }

    public function countNumberSalesSubItem($batch)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineSalesItem','si')
            ->select('count(si.id) as totalCount')
            ->where("si.androidProcess={$batch}")
            ->getQuery()->getOneOrNullResult();
        return $total['totalCount'];

    }

    public function androidDeviceSales($config)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.createdBy', 'u');
        $qb->join('e.androidDevice','a');
        $qb->select('u.username as salesBy');
        $qb->addSelect('a.id as deviceId','a.device as device');
        $qb->addSelect('COUNT(e.id) as totalInvoice','SUM(e.subTotal) as subTotal','SUM(e.discount) as discount','SUM(e.netTotal) as total','SUM(e.received) as received','SUM(e.due) as due');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config);
        $qb->andWhere('e.deviceApproved = :deviceApproved')->setParameter('deviceApproved', 0);
        $compareTo = new \DateTime("now");
        $created =  $compareTo->format('Y-m-d 00:00:00');
        $qb->andWhere("e.created >= :createdStart")->setParameter('createdStart', $created);
        $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
        $qb->andWhere("e.created <= :createdEnd")->setParameter('createdEnd', $createdEnd);
        $qb->groupBy('e.androidDevice');
        $qb->groupBy('e.createdBy');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function androidDeviceSalesProcess($device)
    {
        $em = $this->_em;
        $entities = $this->findBy(array('androidDevice' => $device,'deviceApproved' => 0));

        /* @var $entity Sales */

        foreach ($entities as $entity){

            $entity->setProcess('Done');
            $entity->setSalesBy($entity->getCreatedBy());
            $entity->setApprovedBy($entity->getCreatedBy());
            $entity->setUpdated($entity->getCreated());
            $entity->setDeviceApproved(true);
            $em->flush();
        }
    }

    public function getApiSales(GlobalOption $terminal, $data = array())
    {
        $inventory = $terminal->getInventoryConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->leftJoin('s.transactionMethod', 't');
        $qb->select('u.username as salesBy');
        $qb->addSelect('t.name as method');
        $qb->addSelect('s.id as id');
        $qb->addSelect('s.created as created');
        $qb->addSelect('s.process as process');
        $qb->addSelect('s.invoice as invoice');
        $qb->addSelect('(s.due) as due');
        $qb->addSelect('(s.subTotal) as subTotal');
        $qb->addSelect('(s.total) as total');
        $qb->addSelect('(s.payment) as payment');
        $qb->addSelect('(s.discount) as discount');
        $qb->addSelect('(s.vat) as vat');
        $qb->where("s.inventoryConfig = :config");
        $qb->setParameter('config', $inventory);
        $qb->andWhere('s.process IN(:process)');
        $qb->setParameter('process', array('Done','POS','Delivered'));
        if(empty($data)){
            $compareTo = new \DateTime("now");
            $created =  $compareTo->format('Y-m-d 00:00:00');
            $qb->andWhere("s.created >= :createdStart")->setParameter('createdStart', $created);
            $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
            $qb->andWhere("s.created <= :createdEnd")->setParameter('createdEnd', $createdEnd);
        }else{
            $this->handleSearchBetween($qb,$data);
        }
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }




}
