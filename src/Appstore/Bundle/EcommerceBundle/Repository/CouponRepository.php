<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Coupon;
use Appstore\Bundle\InventoryBundle\Entity\InventoryConfig;
use Doctrine\ORM\EntityRepository;

/**
 * CouponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CouponRepository extends EntityRepository
{

    public function getValidCouponCode($globalOption , $code)
    {

        $ecommerceConfig = $globalOption->getEcommerceConfig()->getId();
        $datetime = new \DateTime("now");
        $today_startdatetime = $datetime->format('Y-m-d 00:00:00');
        $today_enddatetime = $datetime->format('Y-m-d 23:59:59');


        $qb = $this->createQueryBuilder('coupon');
        $qb->where("coupon.status = 1");
        $qb->andWhere("coupon.ecommerceConfig =".$ecommerceConfig );
        $qb->andWhere("coupon.couponCode = :couponCode");
        $qb->setParameter('couponCode', $code);
        $qb->andWhere('coupon.startDate <= :startDate');
        $qb->setParameter('startDate', $today_startdatetime);
        $qb->andWhere('coupon.endDate >= :endDate');
        $qb->setParameter('endDate', $today_enddatetime);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;


    }

    public function getCouponDiscount($config,$couponCode,$total)
    {
        /* @var $coupon Coupon */

        $discount = 0;
        $coupon = $this->findOneBy(array('ecommerceConfig' => $config,'couponCode' => $couponCode));
        if($coupon){
            $cal = $coupon->getDiscountCalculation();
            if($coupon->getValidAmount() <=  $total ){
                if($cal == "percentage")
                {
                    $discount = (($total * $coupon->getAmount())/100);

                }else{

                    $discount = $coupon->getAmount();
                }

            }
        }
        return $discount;

    }

}
