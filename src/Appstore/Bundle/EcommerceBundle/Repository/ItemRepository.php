<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\Discount;
use Appstore\Bundle\EcommerceBundle\Entity\EcommerceConfig;
use Appstore\Bundle\EcommerceBundle\Entity\Item;
use Appstore\Bundle\EcommerceBundle\Entity\ItemBrand;
use Appstore\Bundle\EcommerceBundle\Entity\Promotion;
use Appstore\Bundle\InventoryBundle\Entity\Purchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Doctrine\ORM\EntityRepository;
use Gregwar\Image\Image;
use Product\Bundle\ProductBundle\Entity\Category;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PurchaseVendorItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */


class ItemRepository extends EntityRepository
{

    public function findFrontendProductWithSearch($config, $data , $limit = 0)
    {


        $name            = isset($data['name'])? $data['name'] :'';
        $name               = isset($data['keyword'])? $data['keyword'] :'';
        $category           = isset($data['category'])? $data['category'] :'';
        $categories         = isset($data['categories'])? $data['categories'] :'';
        $brand              = isset($data['brand'])? $data['brand'] :'';
        $brands             = isset($data['brands'])? $data['brands'] :'';
        $promotion          = isset($data['promotion'])? $data['promotion'] :'';
        $promotions         = isset($data['promotions'])? $data['promotions'] :'';
        $discount           = isset($data['discount'])? $data['discount'] :'';
        $discounts          = isset($data['discounts'])? $data['discounts'] :'';
        $tag                = isset($data['tag'])? $data['tag'] :'';
        $tags               = isset($data['tags'])? $data['tags'] :'';

        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }
        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.brand','brand');
        $qb->leftJoin('product.category','category');
        $qb->leftJoin('product.promotion','promotion');
        $qb->leftJoin('product.discount','discount');
        $qb->where("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config);

        if (!empty($name)) {
            $qb->andWhere('product.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.$name.'%');
        }
        if (!empty($name)) {
            $qb->andWhere('product.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm OR discount.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($name).'%');
        }

        if (!empty($category)) {
            $qb->andWhere('category.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($category).'%');
        }

        if (!empty($categories)) {
            $qb->andWhere("product.category IN(:category)");
            $qb->setParameter('category',array_values($categories));
        }
        if (!empty($brand)) {
            $qb->andWhere('brand.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($brand).'%');
        }

        if (!empty($brands)) {
            $qb->andWhere("product.brand IN(:brand)");
            $qb->setParameter('brand',array_values($brands));
        }

        if (!empty($promotion))  {
            $qb->andWhere('promotion.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($promotion).'%');
        }

        if (!empty($promotions)) {
            $qb->andWhere("product.promotion IN(:promotion)");
            $qb->setParameter('promotion',array_values($promotions));
        }


        if (!empty($tag)) {
            $qb->leftJoin('product.tag','tag');
            $qb->andWhere('tag.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($tags)) {
            $qb->leftJoin('product.tag','tag');
            $qb->andWhere('tag.id IN (:tags)');
            $qb->setParameter('tags', array_values($tags));
        }

        if (!empty($discount)) {
            $qb->andWhere("discount.slug LIKE :searchTerm");
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($discounts)) {
            $qb->andWhere('discount.id IN (:discounts)');
            $qb->setParameter('discounts', array_values($discounts));
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.name', 'ASC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;

    }

    public function handleFrontendSearchBetween($qb,$data){

        $name               = isset($data['name'])? $data['name'] :'';
        $category           = isset($data['category'])? $data['category'] :'';
        $categories         = isset($data['categories'])? $data['categories'] :'';
        $brand              = isset($data['brand'])? $data['brand'] :'';
        $brands             = isset($data['brands'])? $data['brands'] :'';
        $promotion          = isset($data['promotion'])? $data['promotion'] :'';
        $promotions         = isset($data['promotions'])? $data['promotions'] :'';
        $discount           = isset($data['discount'])? $data['discount'] :'';
        $discounts          = isset($data['discounts'])? $data['discounts'] :'';
        $tag                = isset($data['tag'])? $data['tag'] :'';
        $tags               = isset($data['tags'])? $data['tags'] :'';

        if (!empty($name)) {

            $explode = explode(' ',strtolower($name));
            $implode = implode('-',$explode);
            $qb->andWhere('product.slug LIKE :searchTerm OR product.slug LIKE :searchTerm OR c.slug LIKE :searchTerm OR b.slug LIKE :searchTerm  OR p.slug LIKE :searchTerm OR t.slug LIKE :searchTerm OR g.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($implode).'%');
        }

        if (!empty($category)) {
            $qb->andWhere('c.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($category).'%');
        }

        if (!empty($categories)) {
            $qb->andWhere("c.id IN(:categories)");
            $qb->setParameter('categories',array_values($categories));
        }
        if (!empty($brand)) {
            $qb->andWhere('b.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($brand).'%');
        }

        if (!empty($brands)) {
            $qb->andWhere("b.id IN(:brands)");
            $qb->setParameter('brands',array_values($brands));
        }

        if (!empty($promotion))  {
            $qb->andWhere('p.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($promotion).'%');
        }

        if (!empty($promotions)) {
            $qb->andWhere("p.id IN(:promotions)");
            $qb->setParameter('promotions',array_values($promotions));
        }

        if (!empty($tag)) {
            $qb->andWhere('t.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($tags)) {
            $qb->andWhere('t.id IN (:tags)');
            $qb->setParameter('tags', array_values($tags));
        }

        if (!empty($discount)) {
            $qb->andWhere("d.slug LIKE :searchTerm");
            $qb->setParameter('searchTerm', '%'.strtolower($tag).'%');
        }

        if (!empty($discounts)) {
            $qb->andWhere('d.id IN (:discounts)');
            $qb->setParameter('discounts', array_values($discounts));
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }

    }

    public function filterFrontendProductWithSearch(EcommerceConfig $config, $data , $limit = 0)
    {

        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.category','c');
        $qb->leftJoin('product.brand','b');
        $qb->leftJoin('product.discount','d');
        $qb->leftJoin('product.promotion','p');
        $qb->leftJoin('product.tag','t');
        $qb->leftJoin('product.medicine','m');
        $qb->leftJoin('m.medicineGeneric','g');
        $qb->where("product.ecommerceConfig = :config");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config->getId());
        $this->handleFrontendSearchBetween($qb,$data);
        if (empty($data['sortBy'])){
            $qb->orderBy('product.name', 'ASC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        $qb->groupBy('product.id');
        $res = $qb->getQuery();
        return  $res;
    }


    public function getFeatureProduct(EcommerceConfig $config, $pram , $feature = 'category', $limit = 0)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin('product.category','c');
        $qb->leftJoin('product.brand','b');
        $qb->leftJoin('product.discount','d');
        $qb->leftJoin('product.promotion','p');
        $qb->leftJoin('product.tag','t');
        $qb->leftJoin('product.medicine','m');
        $qb->leftJoin('m.medicineGeneric','g');
        $qb->where("product.ecommerceConfig = :config");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->andWhere("product.ecommerceConfig = :config")->setParameter('config', $config->getId());
        if (!empty($pram) and $feature == "category") {
            $qb->andWhere("product.isFeatureCategory = 1");
            $qb->andWhere('c.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "brand") {
            $qb->andWhere("product.isFeatureBrand = 1");
            $qb->andWhere('b.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "discount") {
            $qb->andWhere('d.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "promotion") {
            $qb->andWhere('p.id =:pram')->setParameter('pram', $pram);
        }elseif(!empty($pram) and $feature == "tag") {
            $qb->andWhere('t.id =:pram')->setParameter('pram', $pram);
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.name', 'ASC');
        }else{
            $qb->orderBy('product.name' ,'ASC');
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $qb->groupBy('product.id');
        $res = $qb->getQuery()->getResult();
        return  $res;
    }


    public function insertCopyPurchaseItem(Item $entity, Item $copyEntity)
    {
        $em = $this->_em;
        $entity->setName($copyEntity->getName());
        $entity->setNameBn($copyEntity->getNameBn());
        $entity->setSubProduct(true);
        $entity->setQuantity($copyEntity->getQuantity());
        $entity->setMasterQuantity($copyEntity->getMasterQuantity());
        $entity->setPurchasePrice($copyEntity->getPurchasePrice());
        $entity->setSalesPrice($copyEntity->getSalesPrice());
        $entity->setOverHeadCost($copyEntity->getOverHeadCost());
        $entity->setSize($copyEntity->getSize());
        $entity->setItemColors($copyEntity->getItemColors());
        $entity->setBrand($copyEntity->getBrand());
        $entity->setDiscount($copyEntity->getDiscount());
        $entity->setDiscountPrice($copyEntity->getDiscountPrice());
        $entity->setContent($copyEntity->getContent());
        $entity->setTag($copyEntity->getTag());
        $entity->setPromotion($copyEntity->getPromotion());
        $entity->setCountry($copyEntity->getCountry());
        $entity->setSource($copyEntity->getSource());
        $em->persist($entity);
        $em->flush();
    }

    public function insertCopyMedicineItem(MedicineStock $copyEntity)
    {
        $em = $this->_em;
        if($copyEntity)
        $config = $copyEntity->getMedicineConfig()->getGlobalOption()->getEcommerceConfig();
        $exist = $this->findOneBy(array('ecommerceConfig' => $config,'itemGroup'=> $copyEntity->getMode(), 'name' => $copyEntity->getName()));
        if(empty($exist)){
            $entity = new Item();
            $entity->setEcommerceConfig($config);
            $entity->setName($copyEntity->getName());
            $entity->setNameBn($copyEntity->getName());
            $entity->setQuantity($copyEntity->getRemainingQuantity());
            $entity->setPurchasePrice($copyEntity->getPurchasePrice());
            $entity->setSalesPrice($copyEntity->getSalesPrice());
            $entity->setItemGroup($copyEntity->getMode());
            $entity->setMedicineItem($copyEntity);
            if($copyEntity->getBrandName()){
                $brand  = $em->getRepository('EcommerceBundle:ItemBrand')->insertBrand($copyEntity);
                $entity->setBrand($brand);
            }
            $entity->setSource('medicine');
            if($copyEntity->getMedicineBrand()) {
                $entity->setMedicine($copyEntity->getMedicineBrand());
            }
            $em->persist($entity);
            $em->flush();
            if($copyEntity->getMedicineBrand()) {
                $this->_em->getRepository('EcommerceBundle:ItemKeyValue')->insertMedicineAttribute($entity, $copyEntity);
            }
        }

    }

    public function insertCopyInventoryItem(\Appstore\Bundle\InventoryBundle\Entity\Item  $copyEntity)
    {
        $em = $this->_em;
        if($copyEntity)
            $config = $copyEntity->getInventoryConfig()->getGlobalOption()->getEcommerceConfig();
        $exist = $this->findOneBy(array('ecommerceConfig' => $config,'inventoryItem'=> $copyEntity));
        if(empty($exist)){
            $entity = new Item();
            $entity->setEcommerceConfig($config);
            $entity->setInventoryItem($copyEntity);
            $entity->setName($copyEntity->getName());
            $entity->setNameBn($copyEntity->getNameBn());
            $entity->setCategory($copyEntity->getCategory());
            $entity->setPurchasePrice($copyEntity->getPurchasePrice());
            $entity->setSalesPrice($copyEntity->getSalesPrice());
            $entity->setItemGroup('inventory');
            if($copyEntity->getBrand()){
                $brand  = $em->getRepository('EcommerceBundle:ItemBrand')->insertBrand($copyEntity);
                $entity->setBrand($brand);
            }
            $em->persist($entity);
            $em->flush();

        }

    }

    public function insertNewInventoryItem(\Appstore\Bundle\InventoryBundle\Entity\Item  $copyEntity)
    {
        $em = $this->_em;
        if($copyEntity)
            $config = $copyEntity->getInventoryConfig()->getGlobalOption()->getEcommerceConfig();
        $exist = $this->findOneBy(array('ecommerceConfig' => $config, 'name' => $copyEntity->getName(), 'inventoryItem' => $copyEntity->getId()));
        if(empty($exist)){
            $entity = new Item();
            $entity->setEcommerceConfig($config);
            $entity->setInventoryItem($copyEntity);
            $entity->setCategory($copyEntity->getCategory());
            $entity->setName($copyEntity->getName());
            $entity->setNameBn($copyEntity->getNameBn());
            $entity->setQuantity($copyEntity->getRemainingQuantity());
            $entity->setPurchasePrice($copyEntity->getPurchasePrice());
            $entity->setSalesPrice($copyEntity->getSalesPrice());
            $entity->setItemGroup("inventory");
            $em->persist($entity);
            $em->flush();

        }

    }

    public function updatePurchaseInventoryItem(Purchase $purchase)
    {
        $em = $this->_em;
        /* @var $item \Appstore\Bundle\InventoryBundle\Entity\Item */

        foreach ($purchase->getPurchaseItems() as $item){

            if($item->getEcommerceItem()){

                /* @var $update Item */

                $remainingQnt = ($item->getPurchaseQuantity() + $item->getSalesQuantityReturn() + $item->getAdjustmentQuantity()) - ($item->getSalesQuantity() + $item->getPurchaseQuantityReturn()+$item->getDamageQuantity());
                $purchaseQnt = ($item->getPurchaseQuantity() + $item->getSalesQuantityReturn() + $item->getAdjustmentQuantity());
                $salesQnt = ($item->getSalesQuantity() + $item->getPurchaseQuantityReturn()+$item->getDamageQuantity());
                $update = $item->getEcommerceItem();
                $update->setPurchaseQuantity($purchaseQnt);
                $update->setSalesQuantity($salesQnt);
                $update->setQuantity($remainingQnt);
                $em->persist($update);
                $em->flush();

            }

        }
    }

    public function getSliderFeatureProduct($config, $limit = 3)
    {

        $qb = $this->createQueryBuilder('product');
        $qb->where("product.isWeb = 1");
        $qb->andWhere("product.salesPrice > 0");
        $qb->expr()->isNotNull('product.promotion');
        $qb->andWhere("product.ecommerceConfig = :config");
        $qb->setParameter('config', $config->getId());
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $qb->orderBy('product.updated', 'DESC');
        $qb = $qb->getQuery();
        $result = $qb->getResult();
        return  $result;

    }

    public function frontendProductNext($entity){

        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->gt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }

    public function frontendProductPrev($entity){
        $db = $this->getNextPrevious($entity);
        return $db->andWhere($db->expr()->lt('e.id',$entity->getId()))->getQuery()->getOneOrNullResult();
    }

    private function getNextPrevious(Item $entity)
    {

        /**
         * @var Item $entity
         */
        $em = $this->_em;
        $db = $em->createQueryBuilder();
        $db->select('e');
        $db->from('EcommerceBundle:Item','e');
        $db->where($db->expr()->andX(
            $db->expr()->eq('e.status',1),
            $db->expr()->eq('e.ecommerceConfig',$entity->getecommerceConfig()->getId())
        ));
        $db->setMaxResults(1);
        return $db;

    }

    public function handleSearchBetween($qb,$data){

        $name        = isset($data['name'])? $data['name'] :'';
        $name           = isset($data['keyword'])? $data['keyword'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';

        if (!empty($cat)) {
            $qb->andWhere("category.name LIKE :category");
            $qb->setParameter('category', '%'.$cat.'%');
        }
        if (!empty($brand)) {
            $qb->andWhere("brand.name LIKE :brand");
            $qb->setParameter('brand', '%'.$brand.'%');
        }
        if (!empty($promotion)) {
            $qb->andWhere("item.promotion = :promotion");
            $qb->setParameter('promotion', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("item.discount = :discount");
            $qb->setParameter('discount', $discount);
        }
        if (!empty($name)) {
            $qb->andWhere('item.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.$name.'%');
        }
        if (!empty($name)) {
            $qb->andWhere('item.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.strtolower($name).'%');
        }
    }

    public function handleApiSearchBetween($qb,$data){

        $name        = isset($data['name'])? $data['name'] :'';
        $name           = isset($data['keyword'])? $data['keyword'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';
        if (!empty($cat)) {
            $qb->andWhere("category.id =:categoryId");
            $qb->setParameter('categoryId', $cat);
        }
        if (!empty($brand)) {
            $qb->andWhere("brand.id =:brandId");
            $qb->setParameter('brandId', $brand);
        }
        if (!empty($promotion)){
            $qb->andWhere("promotion.id =:promotionId");
            $qb->setParameter('promotionId', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("discount.id =:discountId");
            $qb->setParameter('discountId', $discount);
        }
        if (!empty($tag)) {
            $qb->andWhere("tag.id =:tagId");
            $qb->setParameter('tagId', $tag);
        }
        if (!empty($name)) {
           $qb->andWhere('item.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
                $qb->setParameter('searchTerm', '%'.$name.'%');
        }
        if (!empty($name)) {
           $qb->andWhere('item.name LIKE :searchTerm OR category.slug LIKE :searchTerm OR brand.name LIKE :searchTerm  OR promotion.name LIKE :searchTerm');
                $qb->setParameter('searchTerm', '%'.strtolower($name).'%');
        }
    }

    public function handleSearchBetweenFeature($qb,$data){

        $name           = isset($data['keyword'])? $data['keyword'] :'';
        $cat            = isset($data['category'])? $data['category'] :'';
        $brand          = isset($data['brand'])? $data['brand'] :'';
        $promotion      = isset($data['promotion'])? $data['promotion'] :'';
        $discount       = isset($data['discount'])? $data['discount'] :'';
        $tag            = isset($data['tag'])? $data['tag'] :'';


        if (!empty($cat)) {
            $qb->andWhere("item.category IN (:category)");
            $qb->setParameter('category', $cat);
        }
        if (!empty($brand)) {
            $qb->andWhere("item.brand IN (:brand)");
            $qb->setParameter('brand', $brand);
        }
        if (!empty($promotion)) {
            $qb->andWhere("item.promotion IN (:promotion)");
            $qb->setParameter('promotion', $promotion);
        }
        if (!empty($discount)) {
            $qb->andWhere("item.discount IN (:discount)");
            $qb->setParameter('discount', $discount);
        }
        if (!empty($tag)) {
            $qb->andWhere("item.tag IN (:tag)");
            $qb->setParameter('tag', $tag);
        }

    }

    public function findItemWithSearch($config,$data,$limit = 0)
    {

        $sort = isset($data['sort'])? $data['sort'] :'item.path';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';

        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.category', 'category');
        $qb->leftJoin('item.brand', 'brand');
        $qb->leftJoin('item.promotion', 'promotion');
        $qb->leftJoin('item.discount', 'discount');
        $qb->where("item.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $result = $qb->getQuery();
        return  $result;

    }

    public function salesItemWithSearch($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join("e.masterItem",'masterItem' );
        $qb->where("e.source = 'service'");
        $qb->andWhere("e.ecommerceConfig = :config");
        $qb->setParameter('config', $config);
        $qb->orderBy('e.name','ASC');
        $qb->getQuery()->getResult();
        return  $qb;

    }

	public function updateMasterProductQuantity(Item $entity)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.itemSubs','gi');
		$qb->select('sum(gi.quantity) AS quantity');
		$qb->where("e.id = :id");
		$qb->setParameter('id', $entity->getId());
		$sum = $qb->getQuery()->getSingleScalarResult();
		$entity->setMasterQuantity($sum);
		$this->_em->persist($entity);
		$this->_em->flush($entity);

	}

    public function findGroupBrands(EcommerceConfig $config , $array = array())
    {

        $brands =  isset($array) ? $array : array();

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id');
        $qb->addSelect('brand.slug as slug');
        $qb->addSelect('brand.name as name');
        $qb->addSelect('count(e.id) as itemQnt');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere('brand.status =1');
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();
        $value ="";
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $brands) ? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='brands[]' {$checked} id='brand-{$val["id"]}' value='{$val["id"]}'>
                <label for='brand-{$val["id"]}'></label>
                </div><a class='' href='/product/brand/{$val["slug"]}'>{$val["name"]}({$val['itemQnt']})</a></li>";
        }
        $value .="</ul>";
        return $value;

    }


    public function findGroupDiscount(EcommerceConfig $config,  $array = array())
    {
        $discounts = isset($array) ? $array :array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.discount','discount');
        $qb->select('discount.id as id');
        $qb->addSelect('discount.name as name');
        $qb->addSelect('discount.slug as slug');
        $qb->where('e.ecommerceConfig ='.$config->getId());
        $qb->andWhere('discount.status=1');
        $qb->groupBy('discount.id');
        $qb->orderBy('discount.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ="";
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $discounts )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='discounts[]' {$checked} id='discount-{$val["id"]}' value='{$val["id"]}'>
                <label for='discount-{$val["id"]}'></label>
                </div><a class='' href='/product/discount/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;

    }

    public function findPromotionTree(EcommerceConfig $config , $array = array())
    {
        $promotions = isset($array) ? $array : array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.promotion','promotion');
        $qb->select('promotion.id as id');
        $qb->addSelect('promotion.name as name');
        $qb->addSelect('promotion.slug as slug');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere($qb->expr()->like('promotion.type', ':type'));
        $qb->setParameter('type','%Promotion%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ='';
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $promotions )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='promotions[]' {$checked} id='promotion-{$val["id"]}' value='{$val["id"]}'>
                <label for='promotion-{$val["id"]}'></label>
                </div><a class='' href='/product/promotion/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;
    }

    public function findTagTree(EcommerceConfig $config , $array = array())
    {
        $tags = isset($array) ? $array : array();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.tag','tag');
        $qb->select('tag.id as id');
        $qb->addSelect('tag.name as name');
        $qb->addSelect('tag.slug as slug');
        $qb->where('e.ecommerceConfig='.$config->getId());
        $qb->andWhere($qb->expr()->like('tag.type', ':type'));
        $qb->setParameter('type','%Tag%');
        $qb->groupBy('tag.id');
        $qb->orderBy('tag.name', 'ASC');
        $res = $qb->getQuery()->getArrayResult();

        $value ='';
        $value .="<ul class='ul-check-list'>";
        foreach ($res as $key => $val) {
            $checked = in_array($val['id'], $tags )? 'checked':'';
            $value.= "<li><div class='checkboxOverride'>
                <input type='checkbox' name='tags[]' {$checked} id='tag-{$val["id"]}' value='{$val["id"]}'>
                <label for='tag-{$val["id"]}'></label>
                </div><a class='' href='/product/tag/{$val["slug"]}'>{$val["name"]}</a></li>";
        }
        $value .="</ul>";
        return $value;
    }

    public function getCulculationDiscountPrice(Item $purchase , Discount $discount)
    {
        $discountPrice = "";
        if($discount->getType() == 'percentage' and $purchase->getSalesPrice() > $discount->getDiscountAmount() ){
            $price = ( ($purchase->getSalesPrice() * (int)$discount->getDiscountAmount())/100 );
            $discountPrice = $purchase->getSalesPrice() - $price;
        }elseif($purchase->getSalesPrice() > $discount->getDiscountAmount()){
            $discountPrice = ( $purchase->getSalesPrice() - (int)$discount->getDiscountAmount());
        }
        return $discountPrice;
    }

    public function stringNullChecker($var){
        if (is_null($var)) {
            return "";
        } else {
            return (string) $var;
        }
    }

    public function numberNullChecker($var){
        if (is_null($var)) {
            return 0;
        } else {
            return (float) $var;
        }
    }


    public function getApiProduct(GlobalOption $option,$data = array())
    {
        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->leftJoin('item.size','size');
        $qb->leftJoin('item.itemColors','color');
        $qb->leftJoin('item.country','c');
        $qb->leftJoin('item.itemAssurance','ia');
        $qb->select('item.id as id','item.name as name','item.nameBn as nameBn','item.slug as slug',
            'item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.maxQuantity as maxQuantity',
            'item.shortContent as shortContent','item.shortContentBn as shortContentBn','item.isFeatureBrand as isFeatureBrand','item.isFeatureCategory as isFeatureCategory','item.warningLabel as warningLabel');
        $qb->addSelect('category.name as categoryName','category.nameBn as categoryNameBn','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.nameBn as brandNameBn','brand.id as brandId');
        $qb->addSelect("CASE WHEN (item.discountPrice IS NOT NULL) THEN item.discountPrice  ELSE  item.salesPrice END  as price");
        $qb->addSelect("CASE WHEN (item.discountPrice IS NOT NULL) THEN item.salesPrice  ELSE 0  END  as discountPrice");
        $qb->addSelect('c.name as country');
        $qb->addSelect('size.name as unitSize');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('ia.name as itemAssurance');
        $qb->addSelect('discount.name as discountName','discount.nameBn as discountNameBn','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect('promotion.name as promotionName','promotion.nameBn as promotionNameBn','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.nameBn as tagNameBn','tag.id as tagId');
        $qb->addSelect('GROUP_CONCAT(tag.name) as tags');
        $qb->addSelect('GROUP_CONCAT(tag.nameBn) as tagsBn');
        $qb->addSelect('GROUP_CONCAT(color.name) as colors');
        $qb->addSelect('GROUP_CONCAT(color.nameBn) as colorsBn');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
      //  $qb->andWhere('item.status =1');
        /*$qb->andWhere($qb->expr()->andX(
            $qb->expr()->eq('item.isFeatureCategory', ':isFeatureCategory'),
            $qb->expr()->eq('item.isFeatureBrand', ':isFeatureBrand'),
            $qb->expr()->isNull('item.discount'),
            $qb->expr()->isNull('item.promotion')
        ))
            ->setParameter('isFeatureCategory', 0)
            ->setParameter('isFeatureBrand', 0);*/
        $this->handleApiSearchBetween($qb,$data);
        $qb->groupBy('item.id');
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {

                $product = empty($row['unitSize']) ? $row['name'] : $row['name'] .' - '.$row['unitSize'];
                $productBn = empty($row['unitSize']) ? $row['nameBn'] : $row['nameBn'] .' - '.$row['unitSize'];

                $data[$key]['productId']               = (int) $row['id'];
                $data[$key]['itemId']                  = (int) rand(time(),10);
                $data[$key]['name']                     = $this->stringNullChecker($product);
                if($productBn){
                    $data[$key]['nameBn']                   = $this->stringNullChecker($productBn);
                }else{
                    $data[$key]['nameBn']                   = $this->stringNullChecker($product);
                }
                $data[$key]['slug']                   = $this->stringNullChecker($row['slug']);
                $data[$key]['quantity']                 = (int)($row['quantity']);
                $data[$key]['price']                    = $this->numberNullChecker($row['price']);
                $data[$key]['discountPrice']            = $this->numberNullChecker($row['discountPrice']);
                $data[$key]['categoryId']               = (int)($row['categoryId']);
                $data[$key]['category']                 = $this->stringNullChecker($row['categoryName']);
                $data[$key]['categoryBn']               = $this->stringNullChecker($row['categoryNameBn']);
                $data[$key]['brandId']                  = (int)($row['brandId']);
                $data[$key]['brand']                    = $this->stringNullChecker($row['brandName']);
                $data[$key]['brandBn']                  = $this->stringNullChecker($row['brandNameBn']);
                $data[$key]['discountId']               = (int)($row['discountId']);
                $data[$key]['discount']                 = $this->stringNullChecker($row['discountName']);
                $data[$key]['discountBn']               = $this->stringNullChecker($row['discountNameBn']);
                $data[$key]['discountType']             = $this->stringNullChecker($row['discountType']);
                $data[$key]['discountAmount']           = $this->numberNullChecker($row['discountAmount']);
                $data[$key]['promotionId']              = (int)($row['promotionId']);
                $data[$key]['promotion']                = $this->stringNullChecker($row['promotionName']);
                $data[$key]['promotionBn']              = $this->stringNullChecker($row['promotionNameBn']);
                $data[$key]['tag']                      = $this->stringNullChecker($row['tags']);
                $data[$key]['tagBn']                    = $this->stringNullChecker($row['tagsBn']);
                $data[$key]['colors']                   = $this->stringNullChecker($row['colors']);
                $data[$key]['colorsBn']                 = $this->stringNullChecker($row['colorsBn']);
                $data[$key]['country']                  = $this->stringNullChecker($row['country']);
                $data[$key]['shortDescription']         = $this->stringNullChecker($row['shortContent']);
                $data[$key]['shortDescriptionBn']       = $this->stringNullChecker($row['shortContentBn']);
                $data[$key]['tagBn']                    = $this->stringNullChecker($row['tagNameBn']);
                $data[$key]['unitName']                 = $this->stringNullChecker($row['unitName']);
                $data[$key]['itemAssurance']            = $this->stringNullChecker($row['itemAssurance']);
                $data[$key]['warningLabel']             = $this->stringNullChecker($row['warningLabel']);
                $data[$key]['isFeatureBrand']           = ($row['isFeatureBrand']) ? 1 : 0;
                $data[$key]['isFeatureCategory']        = ($row['isFeatureCategory']) ? 1 : 0;
                $data[$key]['quantityApplicable']       = ($row['quantityApplicable']) ? 1 : 0;
                $data[$key]['maxQuantity']              = (int)($row['maxQuantity']) ? $row['maxQuantity']:0;
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}",400,400);
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }

        return $data;
    }

    public function getApiAllFeatureProduct(GlobalOption $option)
    {
        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->leftJoin('item.size','size');
        $qb->leftJoin('item.itemColors','color');
        $qb->leftJoin('item.country','c');
        $qb->leftJoin('item.itemAssurance','ia');
        $qb->select('item.id as id','item.name as name','item.nameBn as nameBn','item.slug as slug',
            'item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.maxQuantity as maxQuantity',
            'item.shortContent as shortContent','item.shortContentBn as shortContentBn','item.isFeatureBrand as isFeatureBrand','item.isFeatureCategory as isFeatureCategory','item.warningLabel as warningLabel');
        $qb->addSelect('category.name as categoryName','category.nameBn as categoryNameBn','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.nameBn as brandNameBn','brand.id as brandId');
        $qb->addSelect("CASE WHEN (item.discountPrice IS NOT NULL) THEN item.discountPrice  ELSE  item.salesPrice END  as price");
        $qb->addSelect("CASE WHEN (item.discountPrice IS NOT NULL) THEN item.salesPrice  ELSE 0  END  as discountPrice");
        $qb->addSelect('c.name as country');
        $qb->addSelect('size.name as unitSize');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('ia.name as itemAssurance');
        $qb->addSelect('discount.name as discountName','discount.nameBn as discountNameBn','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect('promotion.name as promotionName','promotion.nameBn as promotionNameBn','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.nameBn as tagNameBn','tag.id as tagId');
        $qb->addSelect('GROUP_CONCAT(tag.name) as tags');
        $qb->addSelect('GROUP_CONCAT(tag.nameBn) as tagsBn');
        $qb->addSelect('GROUP_CONCAT(color.name) as colors');
        $qb->addSelect('GROUP_CONCAT(color.nameBn) as colorsBn');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere('item.status =1');
        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->eq('item.isFeatureCategory', ':isFeatureCategory'),
            $qb->expr()->eq('item.isFeatureBrand', ':isFeatureBrand'),
            $qb->expr()->gt('item.discount', ':discount'),
            $qb->expr()->gt('item.promotion', ':promotion')
        ))
        ->setParameter('isFeatureCategory', 1)
        ->setParameter('isFeatureBrand', 1)
        ->setParameter('discount', 0)
        ->setParameter('promotion', 0);
        $qb->groupBy('item.id');
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {

                $product = empty($row['unitSize']) ? $row['name'] : $row['name'] .' - '.$row['unitSize'];
                $productBn = empty($row['unitSize']) ? $row['nameBn'] : $row['nameBn'] .' - '.$row['unitSize'];

                $data[$key]['productId']               = (int) $row['id'];
                $data[$key]['itemId']                  = (int) rand(time(),10);
                $data[$key]['name']                     = $this->stringNullChecker($product);
                if($productBn){
                    $data[$key]['nameBn']                   = $this->stringNullChecker($productBn);
                }else{
                    $data[$key]['nameBn']                   = $this->stringNullChecker($product);
                }
                $data[$key]['slug']                     = $this->stringNullChecker($row['slug']);
                $data[$key]['quantity']                 = (int)($row['quantity']);
                $data[$key]['price']                    = $this->numberNullChecker($row['price']);
                $data[$key]['discountPrice']            = $this->numberNullChecker($row['discountPrice']);
                $data[$key]['categoryId']               = (int)($row['categoryId']);
                $data[$key]['category']                 = $this->stringNullChecker($row['categoryName']);
                $data[$key]['categoryBn']               = $this->stringNullChecker($row['categoryNameBn']);
                $data[$key]['brandId']                  = (int)($row['brandId']);
                $data[$key]['brand']                    = $this->stringNullChecker($row['brandName']);
                $data[$key]['brandBn']                  = $this->stringNullChecker($row['brandNameBn']);
                $data[$key]['discountId']               = (int)($row['discountId']);
                $data[$key]['discount']                 = $this->stringNullChecker($row['discountName']);
                $data[$key]['discountBn']               = $this->stringNullChecker($row['discountNameBn']);
                $data[$key]['discountType']             = $this->stringNullChecker($row['discountType']);
                $data[$key]['discountAmount']           = $this->numberNullChecker($row['discountAmount']);
                $data[$key]['promotionId']              = (int)($row['promotionId']);
                $data[$key]['promotion']                = $this->stringNullChecker($row['promotionName']);
                $data[$key]['promotionBn']              = $this->stringNullChecker($row['promotionNameBn']);
                $data[$key]['tag']                      = $this->stringNullChecker($row['tags']);
                $data[$key]['tagBn']                    = $this->stringNullChecker($row['tagsBn']);
                $data[$key]['colors']                   = $this->stringNullChecker($row['colors']);
                $data[$key]['colorsBn']                 = $this->stringNullChecker($row['colorsBn']);
                $data[$key]['country']                  = $this->stringNullChecker($row['country']);
                $data[$key]['shortDescription']         = $this->stringNullChecker($row['shortContent']);
                $data[$key]['shortDescriptionBn']       = $this->stringNullChecker($row['shortContentBn']);
                $data[$key]['tagBn']                    = $this->stringNullChecker($row['tagNameBn']);
                $data[$key]['unitName']                 = $this->stringNullChecker($row['unitName']);
                $data[$key]['itemAssurance']            = $this->stringNullChecker($row['itemAssurance']);
                $data[$key]['warningLabel']             = $this->stringNullChecker($row['warningLabel']);
                $data[$key]['isFeatureBrand']           = ($row['isFeatureBrand']) ? 1 : 0;
                $data[$key]['isFeatureCategory']        = ($row['isFeatureCategory']) ? 1 : 0;
                $data[$key]['quantityApplicable']       = ($row['quantityApplicable']) ? 1 : 0;
                $data[$key]['maxQuantity']              = (int)($row['maxQuantity']) ? $row['maxQuantity']:0;
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}",400,400);
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }

        return $data;
    }

    public function getApiRelatedProduct(GlobalOption $option,$data = array())
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->select('item.id as id','item.name as name','item.nameBn as nameBn','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.maxQuantity as maxQuantity');
        $qb->addSelect('category.name as categoryName','category.nameBn as categoryNameBn','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.nameBn as brandNameBn','brand.id as brandId');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName','discount.nameBn as discountNameBn','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect('promotion.name as promotionName','promotion.nameBn as promotionNameBn','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.nameBn as tagNameBn','tag.id as tagId');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $this->handleApiSearchBetween($qb,$data);
        $qb->setMaxResults(24);
      //  $qb->orderBy('rand');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['product_id']               = (int) $row['id'];
                $data[$key]['item_id']                  = (int) rand(time(),10);
                $data[$key]['name']                     = $row['name'];
                $data[$key]['nameBn']                   = $row['nameBn'];
                $data[$key]['quantity']                 = $row['quantity'];
                $data[$key]['price']                    = $row['price'];
                $data[$key]['discountPrice']            = $row['discountPrice'];
                $data[$key]['categoryId']               = $row['categoryId'];
                $data[$key]['category']                 = $row['categoryName'];
                $data[$key]['brandId']                  = $row['brandId'];
                $data[$key]['brand']                    = $row['brandName'];
                $data[$key]['discountId']               = $row['discountId'];
                $data[$key]['discount']                 = $row['discountName'];
                $data[$key]['discountType']             = $row['discountType'];
                $data[$key]['discountAmount']           = $row['discountAmount'];
                $data[$key]['promotionId']              = $row['promotionId'];
                $data[$key]['promotion']                = $row['promotionName'];
                $data[$key]['tagId']                    = $row['tagId'];
                $data[$key]['tag']                      = $row['tagName'];
                $data[$key]['unitName']                 = $row['unitName'];
                $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                $data[$key]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}",400,400);
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiProductDetails(GlobalOption $option,$id)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->leftJoin('item.itemColors','color');
        $qb->leftJoin('item.country','c');
        $qb->leftJoin('item.itemAssurance','ia');
        $qb->leftJoin('item.itemSubs','subProduct');
        $qb->leftJoin('subProduct.size','subSize');
        $qb->leftJoin('subProduct.productUnit','subUnit');
        $qb->select('item.id as id','item.name as name','item.nameBn as nameBn',
            'item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.maxQuantity as maxQuantity',
            'item.shortContent as shortContent','item.shortContentBn as shortContentBn','item.isFeatureBrand as isFeatureBrand','item.isFeatureCategory as isFeatureCategory','item.warningLabel as warningLabel','item.content as content','item.contentBn as contentBn');
        $qb->addSelect('category.name as categoryName','category.nameBn as categoryNameBn','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.nameBn as brandNameBn','brand.id as brandId');
        $qb->addSelect('c.name as country');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('ia.name as itemAssurance');
        $qb->addSelect('discount.name as discountName','discount.nameBn as discountNameBn','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect('promotion.name as promotionName','promotion.nameBn as promotionNameBn','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.nameBn as tagNameBn','tag.id as tagId');
        $qb->addSelect('GROUP_CONCAT(tag.name) as tags');
        $qb->addSelect('GROUP_CONCAT(tag.nameBn) as tagsBn');
        $qb->addSelect('GROUP_CONCAT(color.name) as colors');
        $qb->addSelect('GROUP_CONCAT(color.nameBn) as colorsBn');
        $qb->addSelect("CASE WHEN (item.subProduct = 1 AND subProduct.id IS NOT NULL) THEN GROUP_CONCAT(CONCAT(subProduct.id,'*#*',subSize.name,'*#*',subUnit.name,'*#*', subProduct.salesPrice))  ELSE  '' END  as subProducts");
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("item.id = :pid")->setParameter('pid', $id);
        $row = $qb->getQuery()->getOneOrNullResult();
        $data = array();
        if($row){
            $data['product_id']               = (int) $row['id'];
            $data['item_id']                  = (int) rand(time(),10);
            $data['name']                     = $row['name'];
            $data['nameBn']                   = $row['nameBn'];
            $data['quantity']                 = $row['quantity'];
            $data['price']                    = $row['price'];
            $data['discountPrice']            = $row['discountPrice'];
            $data['categoryId']               = $row['categoryId'];
            $data['category']                 = $row['categoryName'];
            $data['categoryBn']               = $row['categoryNameBn'];
            $data['brandId']                  = $row['brandId'];
            $data['brand']                    = $row['brandName'];
            $data['brandBn']                  = $row['brandNameBn'];
            $data['discountId']               = $row['discountId'];
            $data['discount']                 = $row['discountName'];
            $data['discountBn']               = $row['discountNameBn'];
            $data['discountType']             = $row['discountType'];
            $data['discountAmount']           = $row['discountAmount'];
            $data['promotionId']              = $row['promotionId'];
            $data['promotion']                = $row['promotionName'];
            $data['promotionBn']              = $row['promotionNameBn'];
            $data['tag']                      = $row['tags'];
            $data['tagBn']                    = $row['tagsBn'];
            $data['colors']                   = $row['colors'];
            $data['colorsBn']                 = $row['colorsBn'];
            $data['country']                  = $row['country'];
            $data['shortDescription']         = $row['shortContent'];
            $data['shortDescriptionBn']       = $row['shortContentBn'];
            $data['description']              = $row['content'];
            $data['descriptionBn']            = $row['contentBn'];
            $data['tagBn']                    = $row['tagNameBn'];
            $data['unitName']                 = $row['unitName'];
            $data['itemAssurance']            = $row['itemAssurance'];
            $data['warningLabel']             = $row['warningLabel'];
            $data['isFeatureBrand']           = ($row['isFeatureBrand']) ? 1 : 0;
            $data['isFeatureCategory']        = ($row['isFeatureCategory']) ? 1 : 0;
            $data['quantityApplicable']       = ($row['quantityApplicable']) ? 1 : 0;
            $data['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
            if($row['path']){
                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                $data['imagePath']            =  $path;
            }else{
                $data['imagePath']            = "";
            }
            $subProducts = explode(',', $row['subProducts']);
            if(!empty($row['subProducts'])){
                for ($i = 0 ; count($subProducts) > $i ; $i++ ){
                    $subs  = explode("*#*",$subProducts[$i]);
                    $data['measurement'][$i]['subItemId'] = (integer)$subs[0];
                    $data['measurement'][$i]['name'] = (string)$subs[1];
                    $data['measurement'][$i]['unit'] = (string)$subs[2];
                    $data['measurement'][$i]['price'] = (integer)$subs[3];
                }

            }else{
                $data['measurement'] = array();
            }
            /* @var $item Item */

            $item = $this->find($row['id']);


            if($item->getItemColors()){
                foreach ($item->getItemColors() as $key => $sub ){
                    $data['color'][$key]['colorId'] = (integer)$sub->getId();
                    $data['color'][$key]['name'] = (string)$sub->getName();
                    $data['color'][$key]['colorPlate'] =  (string)$sub->getColorPlate();
                }

            }else{
                $data['color'] = array();
            }

            if($item->getItemKeyValues()){
                foreach ($item->getItemKeyValues() as $key => $sub ){
                    $data['specification'][$key]['metaId'] = (integer)$sub->getId();
                    $data['specification'][$key]['label'] = (string)$sub->getMetaKey();
                    $data['specification'][$key]['value'] = (string)$sub->getMetavalue();
                }

            }else{
                $data['specification'] = array();
            }

            if($item->getItemGalleries()){
                $data['gallery'][0]['imageId'] = -100;
                $data['gallery'][0]['imagePath'] = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                $key = 1;
                foreach ($item->getItemGalleries() as $sub ){
                    $data['gallery'][$key]['imageId'] = (integer)$sub->getId();
                    if($sub->getPath()){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/item/{$item->getId()}/gallery/{$sub->getPath()}");
                        $data['gallery'][$key]['imagePath']            =  $path;
                    }else{
                        $data['gallery'][$key]['imagePath']            = "";
                    }
                    $key++;
                }
            }else{
                $data['gallery'] = array();
            }
        }
        return $data;
    }

    public function getApiProductDetailsx(GlobalOption $option,$id)
    {
        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.itemSubs','subProduct');
        $qb->leftJoin('subProduct.size','subSize');
        $qb->leftJoin('subProduct.productUnit','subUnit');
        $qb->select('item.id as itemId','item.name as name','item.nameBn as nameBn','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.shortContent as shortContent','item.content as description','item.subProduct as subItemStatus','item.maxQuantity as maxQuantity');
        $qb->addSelect('category.id as categoryId','category.name as categoryName');
        $qb->addSelect('brand.id as brandId','brand.name as brandName');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect("CASE WHEN (item.subProduct = 1 AND subProduct.id IS NOT NULL) THEN GROUP_CONCAT(CONCAT(subProduct.id,'*#*',subSize.name,'*#*',subUnit.name,'*#*', subProduct.salesPrice))  ELSE  '' END  as subProducts");
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("item.id = :pid")->setParameter('pid', $id);
        $row = $qb->getQuery()->getOneOrNullResult();
        $data = array();
        if($row){
            $data['product_id']               = (int) $row['itemId'];
            $data['item_id']                  = (int) rand(time(),10);
            $data['name']           = $this->stringNullChecker($row['name']);
            $data['nameBn']         = $this->stringNullChecker($row['nameBn']);
            $data['quantity']                 = $row['quantity'];
            $data['price']                    = $row['price'];
            $data['discountPrice']            = ($row['discountPrice']) ? $row['discountPrice']:null;
            $data['category']                 = ($row['categoryName']) ? $row['categoryName'] : null;
            $data['categoryId']               = ($row['categoryId']) ? $row['categoryId'] : null;
            $data['brand']                    = ($row['brandName']) ? $row['brandName'] :null;
            $data['brandId']                  = ($row['brandId']) ? $row['brandId'] :null;
            $data['discountName']             = ($row['discountName']) ? $row['discountName']:null;
            $data['discountType']             = ($row['discountType']) ? $row['discountType']:null;
            $data['discountAmount']           = ($row['discountAmount']) ? $row['discountAmount']: null;
            $data['unitName']                 = ($row['unitName']) ? $row['unitName'] : null;
            $data['quantityApplicable']       = $row['quantityApplicable'];
            $data['content']                  = ($row['subItemStatus']) ? (string)$row['shortContent'] :null;
            $data['description']              = ($row['subItemStatus']) ? (string)$row['description'] :null;
            $data['subItemStatus']            = ($row['subItemStatus']) ? $row['subItemStatus'] :null;
            $data['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:null;
            if($row['path']){
                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                $data['imagePath']            =  $path;
            }else{
                $data['imagePath']            = "";
            }
            $subProducts = explode(',', $row['subProducts']);
            if(!empty($row['subProducts'])){
                for ($i = 0 ; count($subProducts) > $i ; $i++ ){
                    $subs  = explode("*#*",$subProducts[$i]);
                    $data['measurement'][$i]['subItemId'] = (integer)$subs[0];
                    $data['measurement'][$i]['name'] = (string)$subs[1];
                    $data['measurement'][$i]['unit'] = (string)$subs[2];
                    $data['measurement'][$i]['price'] = (integer)$subs[3];
                }

            }else{
                $data['measurement'] = array();
            }
            /* @var $item Item */

            $item = $this->find($row['itemId']);


            if($item->getItemColors()){
                foreach ($item->getItemColors() as $key => $sub ){
                    $data['color'][$key]['colorId'] = (integer)$sub->getId();
                    $data['color'][$key]['name'] = (string)$sub->getName();
                    $data['color'][$key]['colorPlate'] =  (string)$sub->getColorPlate();
                }

            }else{
                $data['color'] = array();
            }

            if($item->getItemKeyValues()){
                foreach ($item->getItemKeyValues() as $key => $sub ){
                    $data['specification'][$key]['metaId'] = (integer)$sub->getId();
                    $data['specification'][$key]['label'] = (string)$sub->getMetaKey();
                    $data['specification'][$key]['value'] = (string)$sub->getMetavalue();
                }

            }else{
                $data['specification'] = array();
            }

            if($item->getItemGalleries()){
                $data['gallery'][0]['imageId'] = -100;
                $data['gallery'][0]['imagePath'] = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                $key = 1;
                foreach ($item->getItemGalleries() as $sub ){
                    $data['gallery'][$key]['imageId'] = (integer)$sub->getId();
                    if($sub->getPath()){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/item/{$item->getId()}/gallery/{$sub->getPath()}");
                        $data['gallery'][$key]['imagePath']            =  $path;
                    }else{
                        $data['gallery'][$key]['imagePath']            = "";
                    }
                    $key++;
                }
            }else{
                $data['gallery'] = array();
            }
        }
        return $data;
    }

    public function getSliderFeatureCategory(GlobalOption $globalOption , $limit = 10){

        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :option");
        $qb->setParameter('option', $globalOption->getId());
        $qb->orderBy('e.id','DESC');
        $qb->setMaxResults($limit);
        $sql = $qb->getQuery();
        $result = $sql->getResult();
        return  $result;

    }

    public function getApiAllCategory(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.category','category');
        $qb->select('category.id as id','category.name as name','category.nameBn as nameBn','category.featureItem as featureItem','category.imagePath as path','category.bgcolor as bgcolor','category.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('category.id');
        $qb->orderBy('category.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['category_id']    = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']           = ($row['feature']) ? 1 : 0;
                $data[$key]['featureItem']           = ($row['featureItem']) ? $row['featureItem'] : 12;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
               //// $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->random_color_code()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/files/category/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    function hex6ToHex8($hex6) {
        return str_replace("#","0xFF",$hex6);
    }

    function hex6ToHex8Default() {
        return "#ddd9c3";
    }

    function random_color_code() {
        $red = str_pad(dechex(rand(0, 255)), 2, '0', STR_PAD_LEFT);
        $green = str_pad(dechex(rand(0, 255)), 2, '0', STR_PAD_LEFT);
        $blue = str_pad(dechex(rand(0, 255)), 2, '0', STR_PAD_LEFT);
        return '#' . $red . $green . $blue;
    }

    public function getApiFeatureCategory(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.category','category');
        $qb->select('category.id as id','category.name as name','category.nameBn as nameBn','category.imagePath as path','category.bgcolor as bgcolor','category.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("category.feature = 1");
        $qb->groupBy('category.id');
        $qb->orderBy('category.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['category_id']    = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']        = ($row['feature']) ? 1 : 0;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/files/category/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiAllBrand(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id','brand.name as name','brand.featureItem as featureItem','brand.nameBn as nameBn','brand.path as path','brand.bgcolor as bgcolor','brand.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['brand_id']    = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']           = ($row['feature']) ? 1 : 0;
                $data[$key]['featureItem']           = ($row['featureItem']) ? $row['featureItem'] : 12;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/brand/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiFeatureBrand(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.brand','brand');
        $qb->select('brand.id as id','brand.name as name','brand.nameBn as nameBn','brand.path as path','brand.bgcolor as bgcolor','brand.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("brand.feature = 1");
        $qb->groupBy('brand.id');
        $qb->orderBy('brand.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['brand_id']       = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']        = ($row['feature']) ? 1 : 0;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/brand/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function resizeFilter($pathToImage, $width = 400, $height = 400)
    {
        $path = '/' . Image::open(__DIR__.'/../../../../../web/' . $pathToImage)->cropResize($width, $height, 'transparent', 'top', 'left')->guess();
        return "http://{$_SERVER['HTTP_HOST']}{$path}";
    }


    public function getApiPromotion(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.promotion','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.nameBn as nameBn','promotion.path as path','promotion.bgcolor as bgcolor','promotion.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Promotion"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['promotion_id']    = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']           = ($row['feature']) ? 1 : 0;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];

                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiTag(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.tag','promotion');
        $qb->select('promotion.id as id','promotion.name as name','promotion.nameBn as nameBn','promotion.path as path','promotion.bgcolor as bgcolor','promotion.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Tag"%');
        $qb->groupBy('promotion.id');
        $qb->orderBy('promotion.id','DESC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['tag_id']           = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']           = ($row['feature']) ? 1 : 0;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function getApiDiscount(GlobalOption $option)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.discount','discount');
        $qb->select('discount.id as id','discount.name as name','discount.nameBn as nameBn','discount.featureItem as featureItem','discount.discountAmount as amount','discount.type as type','discount.path as path','discount.bgcolor as bgcolor','discount.feature as feature');
        $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $qb->orderBy('discount.id','DESC');
        $qb->groupBy('discount.id');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        if($result){
            foreach($result as $key => $row) {
                $data[$key]['id']             = (int) $row['id'];
                $data[$key]['discount_id']    = (int) $row['id'];
                $data[$key]['name']           = $this->stringNullChecker($row['name']);
                $data[$key]['nameBn']         = $this->stringNullChecker($row['nameBn']);
                $data[$key]['feature']        = ($row['feature']) ? 1 : 0;
                $data[$key]['featureItem']    = ($row['featureItem']) ? $row['featureItem'] : 12;
                $data[$key]['appBgcolor']     = (string)empty($row['bgcolor']) ? $this->hex6ToHex8($this->hex6ToHex8Default()) : $this->hex6ToHex8($row['bgcolor']);
                $data[$key]['bgcolor']        = (string)empty($row['bgcolor']) ? $this->random_color_code() : $row['bgcolor'];
                if($row['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/discount/{$row['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }
            }
        }
        return $data;
    }

    public function removeDiscount($config,$discount){

            $qb = $this->_em->createQueryBuilder();
            $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.discount', '?1')
            ->set('e.discountPrice', '?2')
            ->where('e.discount = ?3')
            ->andWhere('e.ecommerceConfig = ?4')
            ->setParameter(1,NULL)
            ->setParameter(2,0)
            ->setParameter(3, $discount)
            ->setParameter(4, $config)
            ->getQuery();
        $q->execute();

    }

    public function removePromotion($config,$discount){

        $qb = $this->_em->createQueryBuilder();
        $q = $qb->update('EcommerceBundle:Item', 'e')
            ->set('e.promotion', '?1')
            ->where('e.promotion = ?2')
            ->andWhere('e.ecommerceConfig = ?3')
            ->setParameter(1,NULL)
            ->setParameter(2, $discount)
            ->setParameter(3, $config)
            ->getQuery();
        $qr = $q->execute();
        return $qr;

    }

    public function getFeatureWidgetProduct(GlobalOption $globalOption , $feature ,$module = "category")
    {
        $data = array();
        if($module == "category" and $feature){
            $brd['category'] = $feature;
            $result = $this->getApiFeatureProduct($globalOption,$module,$brd);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['item_id']                  = (int) rand(time(),10);
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['nameBn']                   = $row['nameBn'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['discountType']             = $row['discountType'];
                    $data[$key]['discountAmount']           = $row['discountAmount'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    $data[$key]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$globalOption->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        if( $module == "brand" and $feature){

            $brd['brand'] = $feature;
            $result = $this->getApiFeatureProduct($globalOption,$module,$brd);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['item_id']                  = (int) rand(time(),10);
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['nameBn']                   = $row['nameBn'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['discountType']             = $row['discountType'];
                    $data[$key]['discountAmount']           = $row['discountAmount'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    $data[$key]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$globalOption->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        if( $module == "promotion" and $feature){

            $brd['promotion'] = $feature;
            $result = $this->getApiFeatureProduct($globalOption,$module,$brd);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['item_id']                  = (int) rand(time(),10);
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['nameBn']                   = $row['nameBn'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['discountType']             = $row['discountType'];
                    $data[$key]['discountAmount']           = $row['discountAmount'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    $data[$key]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$globalOption->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }


        if( $module == "discount" and $feature){

            $brd['discount'] = $feature;
            $result = $this->getApiFeatureProduct($globalOption,$module,$brd);
            if($result){
                foreach($result as $key => $row) {
                    $data[$key]['product_id']               = (int) $row['id'];
                    $data[$key]['item_id']                  = (int) rand(time(),10);
                    $data[$key]['name']                     = $row['name'];
                    $data[$key]['nameBn']                   = $row['nameBn'];
                    $data[$key]['quantity']                 = $row['quantity'];
                    $data[$key]['price']                    = $row['price'];
                    $data[$key]['discountPrice']            = $row['discountPrice'];
                    $data[$key]['categoryId']               = $row['categoryId'];
                    $data[$key]['category']                 = $row['categoryName'];
                    $data[$key]['brandId']                  = $row['brandId'];
                    $data[$key]['brand']                    = $row['brandName'];
                    $data[$key]['discountId']               = $row['discountId'];
                    $data[$key]['discount']                 = $row['discountName'];
                    $data[$key]['discountType']             = $row['discountType'];
                    $data[$key]['discountAmount']           = $row['discountAmount'];
                    $data[$key]['promotionId']              = $row['promotionId'];
                    $data[$key]['promotion']                = $row['promotionName'];
                    $data[$key]['tagId']                    = $row['tagId'];
                    $data[$key]['tag']                      = $row['tagName'];
                    $data[$key]['unitName']                 = $row['unitName'];
                    $data[$key]['quantityApplicable']       = $row['quantityApplicable'];
                    $data[$key]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                    if($row['path']){
                        $path = $this->resizeFilter("uploads/domain/{$globalOption->getId()}/ecommerce/product/{$row['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }
                }
            }
        }

        return $data;
    }

    public function getFeatureWidgetProductAll(GlobalOption $option , $module = "category")
    {
        $data = array();

        if($module == 'category'){

            $config = $option->getEcommerceConfig()->getId();
            $qb = $this->createQueryBuilder('e');
            $qb->join('e.category','category');
            $qb->select('category.id as id','category.name as name','category.nameBn as nameBn','category.imagePath as path');
            $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
            $qb->andWhere("category.feature = 1");
            $qb->andWhere("e.isFeatureCategory = 1");
            $qb->groupBy('category.id');
            $qb->orderBy('category.id','DESC');
            $result = $qb->getQuery()->getArrayResult();
            $data = array();

            foreach ($result as $key => $parent) {

                $data[$key]['id']               = (int) $parent['id'];
                $data[$key]['name']             = $parent['name'];
                $data[$key]['nameBn']             = $parent['nameBn'];
                if($parent['path']){
                    $path = $this->resizeFilter("uploads/domain/{$option->getId()}/discount/{$parent['path']}");
                    $data[$key]['imagePath']            =  $path;
                }else{
                    $data[$key]['imagePath']            = "";
                }

                $search = array('category' => $parent['id']);
                $products = $this->getApiFeatureProduct($option,$module,$search,$limit=18);
                if($products){
                    foreach($products as $p => $row) {
                        $data[$key]['products'][$p]['product_id']               = (int) $row['id'];
                        $data[$key]['products'][$p]['item_id']                  = (int) rand(time(),10);
                        $data[$key]['products'][$p]['name']                     = $row['name'];
                        $data[$key]['products'][$p]['nameBn']                   = $row['nameBn'];
                        $data[$key]['products'][$p]['quantity']                 = $row['quantity'];
                        $data[$key]['products'][$p]['price']                    = $row['price'];
                        $data[$key]['products'][$p]['discountPrice']            = $row['discountPrice'];
                        $data[$key]['products'][$p]['categoryId']               = (int) $row['categoryId'];
                        $data[$key]['products'][$p]['category']                 = $row['categoryName'];
                        $data[$key]['products'][$p]['brandId']                  = (int) $row['brandId'];
                        $data[$key]['products'][$p]['brand']                    = $row['brandName'];
                        $data[$key]['products'][$p]['discountName']             = $row['discountName'];
                        $data[$key]['products'][$p]['discountType']             = $row['discountType'];
                        $data[$key]['products'][$p]['discountAmount']           = $row['discountAmount'];
                        $data[$key]['products'][$p]['unitName']                 = $row['unitName'];
                        $data[$key]['products'][$p]['quantityApplicable']       = $row['quantityApplicable'];
                        $data[$key]['products'][$p]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                        if($row['path']){
                            $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                            $data[$key]['products'][$p]['imagePath']            =  $path;
                        }else{
                            $data[$key]['products'][$p]['imagePath']            = "";
                        }
                    }
                }else{
                    $data[$key]['products'] ="";
                }
            }
            return  $data;
        }

        if( $module == "brand"){

            $config =$option->getEcommerceConfig()->getId();
            $qb = $this->createQueryBuilder('e');
            $qb->join('e.brand','brand');
            $qb->select('brand.id as id','brand.name as name','brand.nameBn as nameBn','brand.path as path');
            $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
            $qb->andWhere("brand.feature = 1");
            $qb->andWhere("e.isFeatureBrand = 1");
            $qb->groupBy('brand.id');
            $qb->orderBy('brand.id','DESC');
            $result = $qb->getQuery()->getArrayResult();
            $data = array();
            if($result){
                foreach($result as $key => $parent) {
                    $data[$key]['id']    = (int) $parent['id'];
                    $data[$key]['name']           = $parent['name'];
                    $data[$key]['nameBn']           = $parent['nameBn'];
                    if($parent['path']){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/brand/{$parent['path']}");
                        $data[$key]['imagePath']            =  $path;
                    }else{
                        $data[$key]['imagePath']            = "";
                    }

                    $search = array('brand' => $parent['id']);
                    $products = $this->getApiFeatureProduct($option,$module,$search,$limit=18);
                    if($products){
                        foreach($products as $p => $row) {
                            $data[$key]['products'][$p]['product_id']               = (int) $row['id'];
                            $data[$key]['products'][$p]['item_id']                  = (int) rand(time(),10);
                            $data[$key]['products'][$p]['name']                     = $row['name'];
                            $data[$key]['products'][$p]['nameBn']                   = $row['nameBn'];
                            $data[$key]['products'][$p]['quantity']                 = $row['quantity'];
                            $data[$key]['products'][$p]['price']                    = $row['price'];
                            $data[$key]['products'][$p]['discountPrice']            = $row['discountPrice'];
                            $data[$key]['products'][$p]['categoryId']               = (int) $row['categoryId'];
                            $data[$key]['products'][$p]['category']                 = $row['categoryName'];
                            $data[$key]['products'][$p]['brandId']                  = (int) $row['brandId'];
                            $data[$key]['products'][$p]['brand']                    = $row['brandName'];
                            $data[$key]['products'][$p]['discountName']             = $row['discountName'];
                            $data[$key]['products'][$p]['discountType']             = $row['discountType'];
                            $data[$key]['products'][$p]['discountAmount']           = $row['discountAmount'];
                            $data[$key]['products'][$p]['unitName']                 = $row['unitName'];
                            $data[$key]['products'][$p]['quantityApplicable']       = $row['quantityApplicable'];
                            $data[$key]['products'][$p]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                            if($row['path']){
                                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                                $data[$key]['products'][$p]['imagePath']            =  $path;
                            }else{
                                $data[$key]['products'][$p]['imagePath']            = "";
                            }
                        }
                    }else{
                        $data[$key]['products'] ="";
                    }
                }
            }
            return  $data;
        }

        if( $module == "promotion"){

            /* @var $parent Promotion */

            $config =$option->getEcommerceConfig()->getId();
            $qb = $this->createQueryBuilder('e');
            $qb->join('e.promotion','promotion');
            $qb->select('promotion.id as id','promotion.name as name','promotion.nameBn as nameBn','promotion.path as path');
            $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
            $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Promotion"%');
            $qb->groupBy('promotion.id');
            $qb->orderBy('promotion.id','DESC');
            $result = $qb->getQuery()->getArrayResult();
            $data = array();
            if($result){
                foreach($result as $key => $parent) {
                    $data[$key]['id']               = (int) $parent['id'];
                    $data[$key]['name']             = $parent['name'];
                    $data[$key]['nameBn']             = $parent['nameBn'];
                    if($parent['path']){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$parent['path']}");
                        $data[$key]['imagePath']     =  $path;
                    }else{
                        $data[$key]['imagePath']     = "";
                    }
                    $search = array('promotion' => $parent['id']);
                    $products = $this->getApiFeatureProduct($option,$module,$search,$limit=18);
                    if($products){
                        foreach($products as $p => $row) {
                            $data[$key]['products'][$p]['product_id']               = (int) $row['id'];
                            $data[$key]['products'][$p]['item_id']                  = (int) rand(time(),10);
                            $data[$key]['products'][$p]['name']                     = $row['name'];
                            $data[$key]['products'][$p]['nameBn']                   = $row['nameBn'];
                            $data[$key]['products'][$p]['quantity']                 = $row['quantity'];
                            $data[$key]['products'][$p]['price']                    = $row['price'];
                            $data[$key]['products'][$p]['discountPrice']            = $row['discountPrice'];
                            $data[$key]['products'][$p]['categoryId']               = (int) $row['categoryId'];
                            $data[$key]['products'][$p]['category']                 = $row['categoryName'];
                            $data[$key]['products'][$p]['brandId']                  = (int) $row['brandId'];
                            $data[$key]['products'][$p]['brand']                    = $row['brandName'];
                            $data[$key]['products'][$p]['discountName']             = $row['discountName'];
                            $data[$key]['products'][$p]['discountType']             = $row['discountType'];
                            $data[$key]['products'][$p]['discountAmount']           = $row['discountAmount'];
                            $data[$key]['products'][$p]['unitName']                 = $row['unitName'];
                            $data[$key]['products'][$p]['quantityApplicable']       = $row['quantityApplicable'];
                            $data[$key]['products'][$p]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                            if($row['path']){
                                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                                $data[$key]['products'][$p]['imagePath']            =  $path;
                            }else{
                                $data[$key]['products'][$p]['imagePath']            = "";
                            }
                        }
                    }else{
                        $data[$key]['products'] ="";
                    }
                }
            }
            return $data;
        }

        if( $module == "tag"){

            /* @var $parent Promotion */

            $config =$option->getEcommerceConfig()->getId();
            $qb = $this->createQueryBuilder('e');
            $qb->join('e.promotion','promotion');
            $qb->select('promotion.id as id','promotion.name as name','promotion.nameBn as nameBn','promotion.path as path');
            $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
            $qb->andWhere("promotion.type LIKE :type")->setParameter('type', '%"Tag"%');
            $qb->groupBy('promotion.id');
            $qb->orderBy('promotion.id','DESC');
            $result = $qb->getQuery()->getArrayResult();
            $data = array();
            if($result){
                foreach($result as $key => $parent) {
                    $data[$key]['id']               = (int) $parent['id'];
                    $data[$key]['name']             = $parent['name'];
                    $data[$key]['nameBn']             = $parent['nameBn'];
                    if($parent['path']){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/promotion/{$parent['path']}");
                        $data[$key]['imagePath']     =  $path;
                    }else{
                        $data[$key]['imagePath']     = "";
                    }
                    $search = array('promotion' => $parent['id']);
                    $products = $this->getApiFeatureProduct($option,$module,$search,$limit=18);
                    if($products){
                        foreach($products as $p => $row) {
                            $data[$key]['products'][$p]['product_id']               = (int) $row['id'];
                            $data[$key]['products'][$p]['item_id']                  = (int) rand(time(),10);
                            $data[$key]['products'][$p]['name']                     = $row['name'];
                            $data[$key]['products'][$p]['nameBn']                   = $row['nameBn'];
                            $data[$key]['products'][$p]['quantity']                 = $row['quantity'];
                            $data[$key]['products'][$p]['price']                    = $row['price'];
                            $data[$key]['products'][$p]['discountPrice']            = $row['discountPrice'];
                            $data[$key]['products'][$p]['categoryId']               = (int) $row['categoryId'];
                            $data[$key]['products'][$p]['category']                 = $row['categoryName'];
                            $data[$key]['products'][$p]['brandId']                  = (int) $row['brandId'];
                            $data[$key]['products'][$p]['brand']                    = $row['brandName'];
                            $data[$key]['products'][$p]['discountName']             = $row['discountName'];
                            $data[$key]['products'][$p]['discountType']             = $row['discountType'];
                            $data[$key]['products'][$p]['discountAmount']           = $row['discountAmount'];
                            $data[$key]['products'][$p]['unitName']                 = $row['unitName'];
                            $data[$key]['products'][$p]['quantityApplicable']       = $row['quantityApplicable'];
                            $data[$key]['products'][$p]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                            if($row['path']){
                                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                                $data[$key]['products'][$p]['imagePath']            =  $path;
                            }else{
                                $data[$key]['products'][$p]['imagePath']            = "";
                            }
                        }
                    }else{
                        $data[$key]['products'] ="";
                    }
                }
            }
        }

        if( $module == "discount"){

            /* @var $parent Discount */

            $config =$option->getEcommerceConfig()->getId();
            $qb = $this->createQueryBuilder('e');
            $qb->join('e.discount','discount');
            $qb->select('discount.id as id','discount.name as name','discount.nameBn as nameBn','discount.path as path');
            $qb->where("e.ecommerceConfig = :config")->setParameter('config', $config);
            $qb->groupBy('discount.id');
            $qb->orderBy('discount.id','DESC');
            $result = $qb->getQuery()->getArrayResult();
            $data = array();
            if($result){
                foreach($result as $key => $parent) {
                    $data[$key]['id']               = (int) $parent['id'];
                    $data[$key]['name']             = $parent['name'];
                    $data[$key]['nameBn']             = $parent['nameBn'];
                    if($parent['path']){
                        $path = $this->resizeFilter("uploads/domain/{$option->getId()}/discount/{$parent['path']}");
                        $data[$key]['imagePath']     =  $path;
                    }else{
                        $data[$key]['imagePath']     = "";
                    }
                    $search = array('discount' => $parent['id']);
                    $products = $this->getApiFeatureProduct($option,$module,$search,$limit=18);
                    if($products){
                        foreach($products as $p => $row) {
                            $data[$key]['products'][$p]['product_id']               = (int) $row['id'];
                            $data[$key]['products'][$p]['item_id']                  = (int) rand(time(),10);
                            $data[$key]['products'][$p]['name']                     = $row['name'];
                            $data[$key]['products'][$p]['nameBn']                   = $row['nameBn'];
                            $data[$key]['products'][$p]['quantity']                 = $row['quantity'];
                            $data[$key]['products'][$p]['price']                    = $row['price'];
                            $data[$key]['products'][$p]['discountPrice']            = $row['discountPrice'];
                            $data[$key]['products'][$p]['categoryId']               = (int) $row['categoryId'];
                            $data[$key]['products'][$p]['category']                 = $row['categoryName'];
                            $data[$key]['products'][$p]['brandId']                  = (int) $row['brandId'];
                            $data[$key]['products'][$p]['brand']                    = $row['brandName'];
                            $data[$key]['products'][$p]['discountName']             = $row['discountName'];
                            $data[$key]['products'][$p]['discountType']             = $row['discountType'];
                            $data[$key]['products'][$p]['discountAmount']           = $row['discountAmount'];
                            $data[$key]['products'][$p]['unitName']                 = $row['unitName'];
                            $data[$key]['products'][$p]['quantityApplicable']       = $row['quantityApplicable'];
                            $data[$key]['products'][$p]['maxQuantity']              = ($row['maxQuantity']) ? $row['maxQuantity']:'';
                            if($row['path']){
                                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/ecommerce/product/{$row['path']}");
                                $data[$key]['products'][$p]['imagePath']            =  $path;
                            }else{
                                $data[$key]['products'][$p]['imagePath']            = "";
                            }
                        }
                    }else{
                        $data[$key]['products'] = "";
                    }
                }
            }
        }

        return $data;
    }

    public function getApiFeatureProduct(GlobalOption $option, $module , $search = array(), $limit = 18)
    {

        $config =$option->getEcommerceConfig()->getId();
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productUnit','productUnit');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.discount','discount');
        $qb->leftJoin('item.promotion','promotion');
        $qb->leftJoin('item.tag','tag');
        $qb->select('item.id as id','item.name as name','item.nameBn as nameBn','item.salesPrice as price','item.discountPrice as discountPrice','item.path as path','item.masterQuantity as quantity','item.quantityApplicable as quantityApplicable','item.maxQuantity as maxQuantity');
        $qb->addSelect('category.name as categoryName','category.id as categoryId');
        $qb->addSelect('brand.name as brandName','brand.id as brandId');
        $qb->addSelect('productUnit.name as unitName');
        $qb->addSelect('discount.name as discountName','discount.id as discountId','discount.type as discountType','discount.discountAmount as discountAmount');
        $qb->addSelect('promotion.name as promotionName','promotion.id as promotionId');
        $qb->addSelect('tag.name as tagName','tag.id as tagId');
        $qb->where("item.ecommerceConfig = :config")->setParameter('config', $config);
        if($module == 'category'){
            $qb->andWhere("item.isFeatureCategory = 1");
        }
        if($module == 'brand'){
            $qb->andWhere("item.isFeatureBrand = 1");
        }
        $this->handleApiSearchBetween($qb,$search);
        $qb->orderBy('item.name','DESC');
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function copyStockToEcommerce(GlobalOption $option)
    {
        $domainSlug = $option->getSlug();
        $strtotime = strtotime("now");
        $medicineConfig = $option->getMedicineConfig()->getId();
        $commerceConfig = $option->getEcommerceConfig()->getId();

        $em = $this->_em;
        $stock = $em->createQuery("DELETE EcommerceBundle:Item e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($stock){
            $stock->execute();
        }

        $brand = $em->createQuery("DELETE EcommerceBundle:ItemBrand e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($brand){
            $brand->execute();
        }

        $brandDql = "INSERT INTO ecommerce_item_brand (`ecommerceConfig_id`, `name`,`slug`, `status`)
                 SELECT $commerceConfig, `brandName`,REPLACE(REPLACE(LOWER(brandName), '/', '-'),' ','-'), 1
                 FROM medicine_stock
                 WHERE medicineConfig_id =:config 
                 GROUP BY brandName";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($brandDql);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

        $product = "INSERT INTO ecommerce_item
                (`ecommerceConfig_id`, `name`, `slug`,`quantity`, `purchasePrice`, `salesPrice`,`medicine_id`,`productUnit_id`,`source`,`itemGroup`,status,`brand_id`)
                SELECT $commerceConfig, e.name,CONCAT(REPLACE(REPLACE(LOWER(e.name), '/', '-'),' ','-'),'-','{$domainSlug}-',LPAD(FLOOR(RAND() * 999999.99), 6, '0')) ,`remainingQuantity`, `purchasePrice`,`salesPrice`, e.medicineBrand_id, `unit_id`,'medicine',CONCAT(UCASE(MID(e.mode,1,1)),MID(e.mode,2)) AS mode ,1,(case when (item_brand.id > 0) 
                 THEN
                      item_brand.id
                 END)
                 as state
                FROM medicine_stock AS e
                LEFT JOIN ecommerce_item_brand AS item_brand ON e.brandName = item_brand.name AND item_brand.ecommerceConfig_id = $commerceConfig
                WHERE e.medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($product);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();


        $meta1 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Mode',itemGroup,1 FROM ecommerce_item AS e
                  WHERE ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta1);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();


        $meta2 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Generic',generic.name,2 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  JOIN medicine_generic AS generic ON brand.medicineGeneric_id = generic.id
                  WHERE itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta2);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta3 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Medicine Form',brand.medicineForm,3 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta3);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta4 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Strength',brand.strength,4 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta4);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta5 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Pack Size',brand.packSize,5 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta5);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta6 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'DAR',brand.dar,6 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta6);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta7 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Use For',brand.useFor,7 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta7);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $stockUpdate = "UPDATE medicine_stock SET isWeb = 1 WHERE  medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

    }

    public function isInteger($input){
        return(ctype_digit(strval($input)));
    }

    public function copyInventoryStockToEcommerce(GlobalOption $option)
    {
        $config =$option->getInventoryConfig()->getId();
        $qb = $this->_em->createQueryBuilder();
        $qb->from('InventoryBundle:Item','item');
        $qb->select('item.id as id','item.barcode as barcode');
        $qb->where("item.inventoryConfig = :config")->setParameter('config', $config);
        $result = $qb->getQuery()->getArrayResult();
        foreach ($result as $row){
            if($this->isInteger($row['barcode'])){
                $item = $row['id'];
                $barcode = $row['barcode'];
                $stockUpdate = "UPDATE ecommerce_item SET inventoryItem_id = {$item} WHERE  id ={$barcode}";
                $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
                $qb1->execute();
            }
        }
    }

    public function updateBrandItem(ItemBrand $brand,$status){

        $stockUpdate = "UPDATE ecommerce_item SET status = {$status} WHERE  brand_id =:brand";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('brand', $brand->getId());
        $qb1->execute();

    }

    public function updateCategoryItem(Category $category,$status){

        $stockUpdate = "UPDATE ecommerce_item SET status = {$status} WHERE  category_id =:category";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('category', $category->getId());
        $qb1->execute();

    }

    public function itemPriceUpdate(GlobalOption $option)
    {
        $domain = $this->_em->getRepository('SettingToolBundle:GlobalOption')->find(154);
        $ecommerce = $option->getMedicineConfig()->getId();
        $medicine = $option->getMedicineConfig()->getId();
        $medicineConf = $domain->getMedicineConfig()->getId();

        $stockUpdate = "Update medicine_stock as i
        JOIN  medicine_stock as s ON i.medicineBrand_id = s.medicineBrand_id AND  s.medicineConfig_id = {$medicineConf} AND s.salesPrice > 0
        SET i.salesPrice = s.salesPrice 
        WHERE i.medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $medicine);
        $qb1->execute();

        $itemUpdate = "Update ecommerce_item as i
        JOIN  medicine_stock as s ON i.medicine_id = s.medicineBrand_id AND  s.medicineConfig_id = $medicine AND s.salesPrice > 0
        SET i.salesPrice = s.salesPrice
        WHERE i.ecommerceConfig_id =:ecommerceConfig";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($itemUpdate);
        $qb1->bindValue('ecommerceConfig', $ecommerce);
        $qb1->execute();

    }

    public function searchWebStock($q, EcommerceConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->select('e.id as id');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'%$q%'"  ));
        $query->andWhere("e.ecommerceConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

    public function searchAndroidStock($q, EcommerceConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'%$q%'"  ));
        $query->andWhere("e.ecommerceConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

    public function copyEcommerceToEcommerce(GlobalOption $option)
    {
        $domainSlug = $option->getSlug();
        $strtotime = strtotime("now");
        $medicineConfig = $option->getMedicineConfig()->getId();
        $commerceConfig = $option->getEcommerceConfig()->getId();

        $em = $this->_em;
        $stock = $em->createQuery("DELETE EcommerceBundle:Item e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($stock){
            $stock->execute();
        }

        $brand = $em->createQuery("DELETE EcommerceBundle:ItemBrand e WHERE e.ecommerceConfig = {$commerceConfig}");
        if($brand){
            $brand->execute();
        }

        $brandDql = "INSERT INTO ecommerce_item_brand (`ecommerceConfig_id`, `name`,`slug`, `status`)
                 SELECT $commerceConfig, `brandName`,REPLACE(REPLACE(LOWER(brandName), '/', '-'),' ','-'), 1
                 FROM medicine_stock
                 WHERE medicineConfig_id =:config 
                 GROUP BY brandName";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($brandDql);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

        $product = "INSERT INTO ecommerce_item
                (`ecommerceConfig_id`, `name`, `slug`,`quantity`, `purchasePrice`, `salesPrice`,`medicine_id`,`productUnit_id`,`source`,`itemGroup`,status,`brand_id`)
                SELECT $commerceConfig, e.name ,CONCAT(REPLACE(REPLACE(LOWER(e.name), '/', '-'),' ','-'),'-','{$domainSlug}-',LPAD(FLOOR(RAND() * 999999.99), 6, '0')) ,`remainingQuantity`, `purchasePrice`,`salesPrice`, e.medicineBrand_id, `unit_id`,'medicine',CONCAT(UCASE(MID(e.mode,1,1)),MID(e.mode,2)) AS mode ,1,(case when (item_brand.id > 0) 
                 THEN
                      item_brand.id
                 END)
                 as state
                FROM medicine_stock AS e
                LEFT JOIN ecommerce_item_brand AS item_brand ON e.brandName = item_brand.name AND item_brand.ecommerceConfig_id = $commerceConfig
                WHERE e.medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($product);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();


        $meta1 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Mode',itemGroup,1 FROM ecommerce_item AS e
                  WHERE ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta1);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();


        $meta2 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Generic',generic.name,2 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  JOIN medicine_generic AS generic ON brand.medicineGeneric_id = generic.id
                  WHERE itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta2);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta3 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Medicine Form',brand.medicineForm,3 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta3);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta4 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Strength',brand.strength,4 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta4);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta5 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Pack Size',brand.packSize,5 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta5);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta6 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'DAR',brand.dar,6 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta6);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $meta7 = "INSERT INTO ecommerce_item_key_value (`item_id`, `metaKey`,`metaValue`, `sorting`)
                  SELECT e.id ,'Use For',brand.useFor,7 FROM ecommerce_item AS e
                  JOIN medicine_brand AS brand ON e.medicine_id = brand.id
                  WHERE  itemGroup='medicine' AND ecommerceConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($meta7);
        $qb1->bindValue('config', $commerceConfig);
        $qb1->execute();

        $stockUpdate = "UPDATE medicine_stock SET isWeb = 1 WHERE  medicineConfig_id =:config";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $medicineConfig);
        $qb1->execute();

    }

    public function getEcommerceItem($config)
    {

        $stockUpdate = "SELECT i.name as ProductName,i.id as ProductID,i.productBengalName as ProductBengalName,u.name as ProductUnit
,b.name as Brand, c.name as Category,s.name as Size,pu.name as SizeUnit,i.quantity as Quantity, i.salesPrice as SalesPrice,i.purchasePrice as PurchasePrice,i.path as ImageLink FROM ecommerce_item as i
LEFT JOIN ProductUnit AS u ON i.productUnit_id = u.id
LEFT JOIN categories AS c ON i.category_id = c.id
LEFT JOIN ecommerce_item_brand AS b ON i.brand_id = b.id
LEFT JOIN product_size AS s ON i.size_id = s.id
LEFT JOIN ProductUnit AS pu ON i.sizeUnit_id = pu.id
WHERE i.ecommerceConfig_id={$config}";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->execute();
        $result =  $qb1->fetchAll();
        return $result;

    }

}
