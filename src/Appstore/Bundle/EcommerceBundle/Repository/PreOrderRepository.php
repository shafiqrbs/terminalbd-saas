<?php

namespace Appstore\Bundle\EcommerceBundle\Repository;
use Appstore\Bundle\EcommerceBundle\Entity\EcommerceConfig;
use Appstore\Bundle\EcommerceBundle\Entity\PreOrder;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * PreOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreOrderRepository extends EntityRepository
{
    public function updatePreOder(PreOrder $entity,$process = '')
    {

        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('EcommerceBundle:PreOrderItem','e')
            ->select('sum(e.convertTotal) as convertTotal , sum(e.convertSubTotal) as convertSubTotal , sum(e.subTotal) as subTotal , sum(e.shippingCharge) as shippingCharge , count(e.id) as item, sum(e.quantity) as quantity')
            ->where('e.preOrder = :preOrder')
            ->andWhere('e.status = :status')
            ->setParameter('preOrder', $entity ->getId())
            ->setParameter('status', 1)
            ->getQuery()->getSingleResult();
        if($total['item'] > 0){
            
            $entity->setTotalAmount(floatval($total['convertTotal']));
            $entity->setTotalShippingCharge($total['shippingCharge']);
            $entity->setItem($total['item']);
            $entity->setQuantity($total['quantity']);
            $vat = $this->getCulculationVat($entity->getGlobalOption(),$total['convertTotal']);
            $entity->setVat($vat);
            $grandTotal = floatval($total['convertTotal'] + $vat + $entity->getDeliveryCharge() + $entity->getTotalShippingCharge() - $entity->getDiscountAmount());
            $entity->setGrandTotalAmount($grandTotal);
            $grandTotal = $entity->getGrandTotalAmount();
            $payment = $entity->getAdvanceAmount() + $entity->getPaidAmount();
            if($payment > $grandTotal ){
                $entity->setReturnAmount( $payment - $grandTotal);
                $entity->setDueAmount(0);
            }elseif($payment < $grandTotal ){
                $entity->setReturnAmount(0);
                $entity->setDueAmount($grandTotal - $payment);
            }
        }else{
            
            $entity->setTotalAmount(0);
            $entity->setTotalShippingCharge(0);
            $entity->setItem(0);
            $entity->setQuantity(0);
            $entity->setGrandTotalAmount(0);
            $entity->setReturnAmount(0);
            $entity->setDueAmount(0);
        }
        $em->persist($entity);
        $em->flush();
    }

    public function updatePreOderPayment(PreOrder $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('EcommerceBundle:PreOrderPayment','e')
            ->select('sum(e.amount) as totalAmount')
            ->where('e.preOrder = :preOrder')
            ->andWhere('e.status = :status')
            ->setParameter('preOrder', $entity ->getId())
            ->setParameter('status', 1)
            ->getQuery()->getSingleResult();

        $entity->setPaidAmount(floatval($total['totalAmount']));
        $due = $entity->getGrandTotalAmount() - $entity->getPaidAmount();
        $entity->setDueAmount($due);
        $em->persist($entity);
        $em->flush();
    }

    public function getCulculationVat(GlobalOption $globalOption,$total)
    {

        /* @var EcommerceConfig $config */

        $totalVat = 0;
        $config = $globalOption->getEcommerceConfig();
        if($config->isVatEnable() == 1 and $config->getVat() > 0 ){
            $vat = $config->getVat();
            $totalVat = round(($total  * $vat )/100);
        }
        return $totalVat;


    }

}
