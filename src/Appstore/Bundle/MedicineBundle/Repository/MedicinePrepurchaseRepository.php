<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePrepurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * MedicinePurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicinePrepurchaseRepository extends EntityRepository
{

    protected function handleSearchBetween($qb,$data)
    {

        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $medicine = isset($data['name'])? $data['name'] :'';
        $brand = isset($data['brandName'])? $data['brandName'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $vendorId = isset($data['vendorId'])? $data['vendorId'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';

        if (!empty($grn)) {
            $qb->andWhere($qb->expr()->like("e.grn", "'%$grn%'"  ));
        }
        if(!empty($medicine)){
            $qb->andWhere($qb->expr()->like("ms.name", "'%$medicine%'"  ));
        }
        if(!empty($brand)){
            $qb->andWhere($qb->expr()->like("ms.brandName", "'%$brand%'"  ));
        }
        if(!empty($mode)){
            $qb->andWhere($qb->expr()->like("ms.mode", "'%$mode%'"  ));
        }
        if(!empty($vendor)){
            $qb->join('e.medicineVendor','v');
            $qb->andWhere("v.companyName = :vendor")->setParameter('vendor', $vendor);
        }
        if(!empty($vendorId)){
            $qb->join('e.medicineVendor','v');
            $qb->andWhere("v.id = :vendorId")->setParameter('vendorId', $vendorId);
        }
        if (!empty($startDate) ) {
            $datetime = new \DateTime($data['startDate']);
            $start = $datetime->format('Y-m-d 00:00:00');
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $start);
        }

        if (!empty($endDate)) {
            $datetime = new \DateTime($data['endDate']);
            $end = $datetime->format('Y-m-d 23:59:59');
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $end);
        }
    }

    public function findWithSearch($config,$data = array(),$instant = '')
    {

        $qb = $this->createQueryBuilder('e');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config);
        if (!empty($instant)){
            $qb->andWhere('e.instantPurchase = :instant')->setParameter('instant', $instant);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function updatePurchaseTotalPrice(MedicinePrepurchase $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicinePrepurchaseItem','si')
            ->select('sum(si.subTotal) as total')
            ->where('si.medicinePrepurchase = :entity')
            ->setParameter('entity', $entity ->getId())
            ->getQuery()->getSingleResult();
        $subTotal = $total['total'];
        $discount = $this->getUpdateDiscount($entity,$subTotal);
        if($subTotal > 0){
            $entity->setSubTotal(round($subTotal));
            $entity->setDiscount(round($discount));
            $entity->setNetTotal($subTotal - $discount);
        }else{
            $entity->setSubTotal(0);
            $entity->setDiscount(0);
            $entity->setNetTotal(0);
        }
        $em->persist($entity);
        $em->flush();
        return $entity;

    }

    public function getUpdateDiscount(MedicinePrepurchase $invoice,$subTotal)
    {
        $discount = ($subTotal * $invoice->getDiscountCalculation())/100;
        return round($discount,2);
    }

    public function reportPurchaseOverview(User $user ,$data)
    {
        $global =  $user->getGlobalOption()->getId();

        $qb = $this->_em->createQueryBuilder();
        $qb->from('AccountingBundle:AccountPurchase','e');
        $qb->select('sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
        $qb->where('e.globalOption = :config');
        $qb->setParameter('config', $global);
        $qb->andWhere('e.process = :process');
        $qb->setParameter('process', 'approved');
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }

}
