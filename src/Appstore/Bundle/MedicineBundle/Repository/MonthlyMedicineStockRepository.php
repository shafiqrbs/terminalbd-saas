<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineBrand;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSales;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Gregwar\Image\Image;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * PathologyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MonthlyMedicineStockRepository extends EntityRepository
{


    protected function handleSearchBetween($qb,$data)
    {

        $name = isset($data['name'])? $data['name'] :'';
        $rackNo = isset($data['rackNo'])? $data['rackNo'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $sku = isset($data['sku'])? $data['sku'] :'';
        $brandName = isset($data['brandName'])? $data['brandName'] :'';
        $keyword = isset($data['keyword'])? $data['keyword'] :'';
        if (!empty($name)) {
            $qb->andWhere("e.name = :name")->setParameter('name', $name);
        }
        if (!empty($sku)) {
            $qb->andWhere($qb->expr()->like("e.sku", "'%$sku%'"  ));
        }
         if (!empty($brandName)) {
            $qb->andWhere($qb->expr()->like("e.brandName", "'%$brandName%'"  ));
        }
        if(!empty($rackNo)){
            $qb->andWhere("e.rackNo = :rack")->setParameter('rack', $rackNo);
        }
        if(!empty($mode)){
            $qb->andWhere("e.mode = :mode")->setParameter('mode', $mode);
        }
        if (!empty($keyword)) {
            $keyword = $this->clean($keyword);
            $qb->leftJoin('e.medicineBrand','mb');
            $qb->leftJoin('mb.medicineGeneric','mg');
            $qb->andWhere('e.name LIKE :searchTerm OR e.brandName LIKE :searchTerm OR mg.name LIKE :searchTerm OR e.slug LIKE :searchTerm');
            $qb->setParameter('searchTerm', '%'.$keyword.'%');
        }
    }


    public function  clean($string) {
        $res = preg_replace('/[0-9\@\&\^\%\(\)\#\$\!\]\[\}\{\*\'\"\.\;\" "]+/', ' ', $string);
        return $res;

    }

    public function checkDuplicateStockMedicine(MedicineConfig $config, MedicineBrand $brand)
    {

        $stock =  $this->findOneBy(array('medicineConfig'=>$config,'medicineBrand'=> $brand));
        return $stock;
    }

    public function checkDuplicateStockNonMedicine(MedicineConfig $config,$brand)
    {
        $stock =  $this->findOneBy(array('medicineConfig' => $config,'name' => $brand));
        return $stock;
    }

    public function getPurchaseDetails(MedicineConfig $config,MedicineStock $stock){

    	$qb = $this->_em->createQueryBuilder();
	    $qb->from('MedicineBundle:MedicinePurchaseItem','e');
	    $qb->join('e.medicinePurchase','mp');
	    $qb->select('e');
	    $qb->where('e.medicineStock = :item')->setParameter('item',$stock->getId());
	    $qb->andWhere('mp.medicineConfig = :config')->setParameter('config',$config->getId());
	    $qb->orderBy('mp.created','DESC');
	    $result = $qb->getQuery();
	    return $result;

    }

    public function getPurchaseReturnDetails(MedicineConfig $config,MedicineStock $stock){

    	$qb = $this->_em->createQueryBuilder();
	    $qb->from('MedicineBundle:MedicinePurchaseReturnItem','e');
	    $qb->join('e.medicinePurchaseReturn','mp');
	    $qb->select('e');
	    $qb->where('e.medicineStock = :item')->setParameter('item',$stock->getId());
	    $qb->andWhere('mp.medicineConfig = :config')->setParameter('config',$config->getId());
	    $qb->orderBy('mp.created','DESC');
	    $result = $qb->getQuery();
	    return $result;

    }

    public function getSalesDetails(MedicineConfig $config,MedicineStock $stock){

    	$qb = $this->_em->createQueryBuilder();
	    $qb->from('MedicineBundle:MedicineSalesItem','e');
	    $qb->join('e.medicineSales','mp');
	    $qb->select('e');
	    $qb->where('e.medicineStock = :item')->setParameter('item',$stock->getId());
	    $qb->andWhere('mp.medicineConfig = :config')->setParameter('config',$config->getId());
	    $qb->orderBy('mp.created','DESC');
	    $result = $qb->getQuery();
	    return $result;

    }

    public function getSalesReturnDetails(MedicineConfig $config,MedicineStock $stock){

    	$qb = $this->_em->createQueryBuilder();
	    $qb->from('MedicineBundle:MedicineSalesReturn','e');
	    $qb->select('e');
	    $qb->where('e.medicineStock = :item')->setParameter('item',$stock->getId());
	    $qb->andWhere('e.medicineConfig = :config')->setParameter('config',$config->getId());
	    $qb->orderBy('e.created','DESC');
	    $result = $qb->getQuery();
	    return $result;

    }

    public function getDamageDetails(MedicineConfig $config,MedicineStock $stock){

    	$qb = $this->_em->createQueryBuilder();
	    $qb->from('MedicineBundle:MedicineDamage','e');
	    $qb->select('e');
	    $qb->where('e.medicineStock = :item')->setParameter('item',$stock->getId());
	    $qb->andWhere('e.medicineConfig = :config')->setParameter('config',$config->getId());
	    $qb->orderBy('e.created','DESC');
	    $result = $qb->getQuery();
	    return $result;

    }

    public function findEcommerceWithSearch($config,$data){

        $sort = isset($data['sort'])? $data['sort'] :'e.sku';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.rackNo','p');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function findWithSearch($config,$data){

        $sort = isset($data['sort'])? $data['sort'] :'e.name';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';
        $process = isset($data['process'])? $data['process'] :'';
        $startQuantity = isset($data['quantityStart'])? $data['quantityStart'] :0;
        $endQuantity = isset($data['quantityEnd'])? $data['quantityEnd'] :0;

        $qb = $this->createQueryBuilder('e');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('e.isDelete != 1');
        if($process == 'Current Stock' and $startQuantity == 0 and $endQuantity == 0){
            $qb->andWhere('e.remainingQuantity  > 0');
        }elseif($process == 'Current Stock'  and $startQuantity >= 0 and $endQuantity > 0){
            $qb->andWhere("e.remainingQuantity  >= {$startQuantity}");
            $qb->andWhere("e.remainingQuantity  <= {$endQuantity}");
        }
        if($process == 'Empty Brand Name'){
            $qb->andWhere('e.brandName  IS NULL');
        }
        if($process == 'Empty Stock'){
            $qb->andWhere('e.remainingQuantity  = 0');
            $qb->andWhere('e.salesQuantity = 0');
        }
        if($process == 'Active'){
            $qb->andWhere('e.status = 1');
        }
        if($process == 'In-active'){
            $qb->andWhere('e.status != 1');
        }
        if($process == 'Sales' and $startQuantity == 0 and $endQuantity == 0){
            $qb->andWhere('e.salesQuantity  <= 0');
        }elseif ($process == 'Sales'  and $startQuantity >= 0 and $endQuantity > 0){
            $qb->andWhere("e.salesQuantity  >= {$startQuantity}");
            $qb->andWhere("e.salesQuantity  <= {$endQuantity}");
        }

        if($process == 'Sales Minus' and $startQuantity == 0 and $endQuantity == 0){
            $qb->andWhere('e.remainingQuantity  < 0');
        }elseif ($process == 'Sales Minus'  and $startQuantity >= 0 and $endQuantity > 0){
             $qb->andWhere("e.remainingQuantity  >= -{$startQuantity}");
             $qb->andWhere("e.remainingQuantity  <= -{$endQuantity}");
        }
        if($process == "Opening Quantity" and $startQuantity == 0 and $endQuantity == 0){
            $qb->andWhere('e.openingQuantity > 0');
        }elseif($process == "Opening Quantity"  and $startQuantity >= 0 and $endQuantity > 0){
            $qb->andWhere("e.openingQuantity  >= {$startQuantity}");
            $qb->andWhere("e.openingQuantity  <= {$endQuantity}");
        }
        if($process == "Min Quantity" and $startQuantity == 0 and $endQuantity == 0){
            $qb->andWhere('e.minQuantity > 0');
        }elseif($process == "Min Quantity"  and $startQuantity >= 0 and $endQuantity > 0){
            $qb->andWhere("e.minQuantity  >= {$startQuantity}");
            $qb->andWhere("e.minQuantity  <= {$endQuantity}");
        }
        if($process == "MRP < Purchase AVG") {
            $qb->andWhere('e.averagePurchasePrice >= e.salesPrice');
        }
        if($process == "MRP < Purchase Price") {
            $qb->andWhere('e.purchasePrice >= e.salesPrice');
        }
        if($process == "Purchase AVG = 0") {
            $qb->andWhere('e.averagePurchasePrice = 0');
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $result = $qb->getQuery();
        return  $result;
    }

    public function insertBarcodeMedicineStock($config,$data)
    {
        $em = $this->_em;
        $quantity = (float)(trim($data['quantity'])) ? trim($data['quantity']):1;
        $subTotal = (float)(trim($data['salesPrice'])) ? trim($data['salesPrice']):0;
        $price = ($subTotal/$quantity);
        $entity = new MedicineStock();
        $entity->setMedicineConfig($config);
        $entity->setBarcode(trim($data['barcode']));
        $entity->setName(trim($data['name']));
        $entity->setSlug(strtolower($data['name']));
        $entity->setSalesPrice($price);
        $unit = $em->getRepository('SettingToolBundle:ProductUnit')->find(4);
        $entity->setUnit($unit);
        $em->persist($entity);
        $em->flush();
        return $entity;

    }

    public function findWithGlobalSearch($data){

        $sort = isset($data['sort'])? $data['sort'] :'e.sku';
        $direction = isset($data['direction'])? $data['direction'] :'ASC';
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.remainingQuantity > 0');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy("{$sort}",$direction);
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function reportCurrentStockPrice(User $user)
    {

	    $config =  $user->getGlobalOption()->getMedicineConfig()->getId();
	    $qb = $this->createQueryBuilder('e');
	    $qb->select('SUM(e.purchasePrice * e.remainingQuantity) as purchasePrice, SUM(e.salesPrice * e.remainingQuantity) as salesPrice, SUM(e.remainingQuantity) as quantity, SUM(e.salesQuantity) as salesQuantity');
	    $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
	    $result = $qb->getQuery()->getOneOrNullResult();
	    return $result;

    }

	public function findMedicineShortListCount($user)
	{
		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$qb = $this->createQueryBuilder('item');
		$qb->select('COUNT(item.id) as totalShortList');
		$qb->where("item.medicineConfig = :config");
		$qb->setParameter('config', $config);
		$qb->andWhere("item.minQuantity > 0");
		$qb->andWhere("item.minQuantity >= item.remainingQuantity");
		$count = $qb->getQuery()->getSingleScalarResult();
		return  $count;

	}

    public function getBrands($config)
	{
        $nots = array('.','-',1,',',' ','`',"'",'0','O');
		$qb = $this->createQueryBuilder('item');
		$qb->select('item.brandName as name');
		$qb->where("item.medicineConfig = :config")->setParameter('config', $config);
		$qb->andWhere($qb->expr()->notIn('item.brandName', $nots));
		$qb->groupBy("item.brandName");
		$qb->orderBy("item.brandName",'ASC');
		$result = $qb->getQuery()->getArrayResult();
		return  $result;

	}

    public function findWithShortListSearch($config,$data)
    {

        $name = isset($data['name'])? $data['name'] :'';
        $brand = isset($data['brandName'])? $data['brandName'] :'';
        $sku = isset($data['sku'])? $data['sku'] :'';
        $minQnt = isset($data['minQnt'])? $data['minQnt'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.medicineConfig = :config");
        $qb->setParameter('config', $config);
        $qb->andWhere("e.minQuantity > 0");
        if($minQnt == 'minimum') {
            $qb->andWhere("e.minQuantity > e.remainingQuantity");
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.name','ASC');
        $qb->getQuery();
        return  $qb;

    }

    public function findWithRemainingStock($config,$brand)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id as id ,e.brandName as brandName , e.name as name','e.purchasePrice as purchasePrice , e.salesPrice as salesPrice','e.remainingQuantity as quantity , e.pack as pack');
        $qb->addSelect('u.name as unit');
        $qb->join("e.unit",'u');
        $qb->where("e.medicineConfig = :config");
        $qb->setParameter('config', $config);
        if (!empty($brand)) {
            $qb->andWhere($qb->expr()->like("e.brandName", "'%$brand%'"  ));
        }
        $qb->orderBy('e.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function misRemainingStock($config)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id as id ,e.brandName as brandName , e.name as name','e.purchasePrice as purchasePrice' ,'e.averagePurchasePrice as averagePurchasePrice' ,'e.salesPrice as salesPrice', 'e.averageSalesPrice as averageSalesPrice','SUM(mpi.quantity) as remainingQuantity' , 'e.openingQuantity as openingQuantity','SUM(e.purchaseQuantity + e.salesReturnQuantity) as purchaseQuantity','SUM(e.salesQuantity + e.purchaseReturnQuantity+ e.damageQuantity) as salesQuantity','e.adjustmentQuantity as adjustmentQuantity','e.bonusQuantity as bonusQuantity','e.pack as pack');
        $qb->leftJoin('e.medicineSalesItems', 'msi');
        $qb->leftJoin('msi.medicineSales', 'ms');
        $qb->leftJoin('e.medicinePurchaseItems', 'mpi');
        $qb->leftJoin('mpi.medicinePurchase', 'mp');
        $qb->where("e.medicineConfig = :config")->setParameter('config', $config);
        $qb->andWhere('e.openingQuantity >= :searchTerm OR e.purchaseQuantity >= :searchTerm');
        $qb->setParameter('searchTerm', 0);
      //  $qb->orWhere($qb->expr()->orX('mp.created BETWEEN :startDate AND :endDate'));
       // $qb->setParameter('startDate', '2023-01-01 00:00:00')->setParameter('endDate', '2023-01-30 23:59:59');
        $qb->orderBy('e.brandName', 'ASC')->addOrderBy('e.name', 'ASC');
        $qb->groupBy('e.id');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }



    public function findWithSelectedItems($config,$ids)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id as id ,e.brandName as brandName , e.name as name','e.minQuantity as minQuantity , e.salesPrice as salesPrice','e.remainingQuantity as remainingQuantity , e.pack as pack',"SELECT salesSub.meddicineStock_id, SUM(quantity)");
        $qb->addSelect('u.name as unit');
        $qb->join("e.unit",'u');
        $qb->where("e.medicineConfig = :config");
        $qb->setParameter('config', $config);
        $qb->andWhere($qb->expr()->in('e.id', $ids));
        $qb->orderBy('e.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function getBrandLists($user)
    {
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.brandName as brandName , e.mode as mode');
        $qb->where('e.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->groupBy("e.brandName");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function getFindWithParticular($hospital,$services){

        $qb = $this->createQueryBuilder('e')
            ->leftJoin('e.service','s')
            ->select('e.id')
            ->addSelect('e.name')
            ->addSelect('e.name')
            ->addSelect('e.particularCode')
            ->addSelect('e.mobile')
            ->addSelect('e.price')
            ->addSelect('e.minimumPrice')
            ->addSelect('e.quantity')
            ->addSelect('s.name as serviceName')
            ->addSelect('s.code as serviceCode')
            ->where('e. = :config')->setParameter('config', $hospital)
            ->andWhere('s.id IN(:service)')
            ->setParameter('service',array_values($services))
            ->orderBy('e.service','ASC')
            ->orderBy('e.name','ASC')
            ->getQuery()->getArrayResult();
        return  $qb;
    }

    public function getPurchaseUpdateQnt(MedicinePurchase $purchase){

        /** @var  $purchaseItem MedicinePurchaseItem */

        if(!empty($purchase->getMedicinePurchaseItems())) {
            foreach ($purchase->getMedicinePurchaseItems() as $purchaseItem) {
                 $stockItem = $purchaseItem->getMedicineStock();
                 $this->updateRemovePurchaseQuantity($stockItem);
                 $this->updatePurchasePrice($stockItem,$purchaseItem);
            }
        }
    }

    public function updateRemovePurchaseQuantity(MedicineStock $stock , $fieldName = '', $pack = 0, $min = 0, $openStock = 0 ){

    	$em = $this->_em;
        if($fieldName == 'sales'){
            $qnt = $em->getRepository('MedicineBundle:MedicineSalesItem')->salesStockItemUpdate($stock);
            $stock->setSalesQuantity($qnt);
        }elseif($fieldName == 'sales-return'){
	        $quantity = $this->_em->getRepository('MedicineBundle:MedicineSalesReturn')->salesReturnStockUpdate($stock);
            $stock->setSalesReturnQuantity($quantity);
        }elseif($fieldName == 'purchase-return'){
            $qnt = $em->getRepository('MedicineBundle:MedicinePurchaseReturnItem')->purchaseReturnStockUpdate($stock);
            $stock->setPurchaseReturnQuantity($qnt);
        }elseif($fieldName == 'damage'){
            $quantity = $em->getRepository('MedicineBundle:MedicineDamage')->damageStockItemUpdate($stock);
            $stock->setDamageQuantity($quantity);
        }else{
            $qnt = $em->getRepository('MedicineBundle:MedicinePurchaseItem')->purchaseStockItemUpdate($stock);
            $bonusQnt = $em->getRepository('MedicineBundle:MedicinePurchaseItem')->purchaseStockBonusItemUpdate($stock);
            if($openStock > 0){
                $stock->setOpeningQuantity($openStock);
            }
            $stock->setPack($pack);
            if($min > 0){
                $stock->setMinQuantity($min);
            }
            $stock->setBonusQuantity($bonusQnt);
            $stock->setPurchaseQuantity($qnt);
        }
        $em->persist($stock);
        $em->flush();
        $this->remainingQnt($stock);
    }

    public function stockAdjustment(MedicineStock $stock){
        $em = $this->_em;
        $adjustment = $em->getRepository('MedicineBundle:MedicineStockAdjustment')->adjustmentStockItemUpdate($stock);
        $stock->setAdjustmentQuantity($adjustment['quantity']);
        $stock->setBonusAdjustment($adjustment['bonus']);
        $em->persist($stock);
        $em->flush();
        $this->remainingQnt($stock);
    }

    public function remainingQnt(MedicineStock $stock)
    {
        $em = $this->_em;
	    $qnt = ($stock->getOpeningQuantity() + $stock->getPurchaseQuantity() + $stock->getSalesReturnQuantity() + $stock->getBonusQuantity() + $stock->getBonusAdjustment() + $stock->getAdjustmentQuantity()) - ($stock->getPurchaseReturnQuantity() + $stock->getSalesQuantity() + $stock->getDamageQuantity());
        $stock->setRemainingQuantity($qnt);
        $em->persist($stock);
        $em->flush();
    }

    public function updatePurchasePrice(MedicineStock $stock,MedicinePurchaseItem $item)
    {
        $em = $this->_em;
        $avg = $em->getRepository('MedicineBundle:MedicinePurchaseItem')->getPurchaseSalesAvg($stock);
        $stock->setPurchasePrice($item->getPurchasePrice());
	    $stock->setSalesPrice($item->getSalesPrice());
	    if($avg['purchase']){
            $stock->setAveragePurchasePrice(floatval($avg['purchase']));
        }else{
            $stock->setAveragePurchasePrice($item->getPurchasePrice());
        }
        if($avg['sales']){
            $stock->setAverageSalesPrice(floatval($avg['sales']));
        }else{
            $stock->setAverageSalesPrice($item->getSalesPrice());
        }
        if($avg['tradePrice']){
            $stock->setTradePrice(floatval($avg['tradePrice']));
        }else{
            $tp = $this->dpGenerate($item);
            $stock->setTradePrice($tp);
        }
        $em->persist($stock);
        $em->flush();
    }

    public function dpGenerate(MedicinePurchaseItem $entity)
    {
        $config = $entity->getMedicinePurchase()->getMedicineConfig();
        $dpVat = $config->getTpVatPercent();
        if($entity->getMedicinePurchase()->getMedicineVendor() and $entity->getMedicinePurchase() ->getMedicineVendor()->getTpPercent() > 0){
            $pPrice = $entity->getMedicinePurchase()->getMedicineVendor()->getTpPercent();
            $dpPrice = ( $pPrice + $dpVat);
        }else{
            $pPrice = $config->getTpPercent();
            $dpPrice = ($pPrice + $dpVat);
        }
        if($dpPrice > 0){
            $dp = ($entity->getSalesPrice() - ($entity->getSalesPrice() * ($dpPrice/100)));
        }
        return $dp;
    }

    public function getSalesUpdateQnt(MedicineSales $invoice){

        $em = $this->_em;

        /** @var $item MedicineSalesItem */
        if($invoice->getMedicineSalesItems()){
            foreach($invoice->getMedicineSalesItems() as $item ){
                /** @var  $stock MedicineStock */
                $stock = $item->getMedicineStock();
                $qnt = $this->_em->getRepository('MedicineBundle:MedicineSalesItem')->salesStockItemUpdate($stock);
                $stock->setSalesQuantity($qnt);
                $em->persist($stock);
                $em->flush();
                $this->remainingQnt($stock);
            }
        }
    }

    public function updateRemoveSalesQuantity(MedicineStock $stock){

        $em = $this->_em;
        $qnt = $em->getRepository('MedicineBundle:MedicineSalesItem')->salesStockItemUpdate($stock);
        $stock->setPurchaseQuantity($qnt);
        $em->persist($stock);
        $em->flush();
        $this->remainingQnt($stock);
    }

    public function searchAutoComplete($q, MedicineConfig $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->leftJoin('e.rackNo', 'rack');
        $query->leftJoin('e.unit', 'unit');
        $query->select('e.id as id');
        if($config->getItemSearch() == "Brand"){
            $query->addSelect("CASE WHEN (e.brandName IS NULL) THEN CONCAT(e.name,' [',e.remainingQuantity, '] ','- Tk.', e.salesPrice)  ELSE CONCAT(e.name,' [',e.remainingQuantity, '] ', e.brandName , '- Tk.', e.salesPrice)  END as text");
        }else{
            $query->addSelect("CASE WHEN (e.rackNo IS NULL) THEN CONCAT(e.name,' [',e.remainingQuantity, '] ','- Tk.', e.salesPrice)  ELSE CONCAT(e.name,' [',e.remainingQuantity, '] ', rack.name , '- Tk.', e.salesPrice)  END as text");
        }
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        if($config->isActiveQuantity() == 1){
            $query->andWhere('e.purchaseQuantity > :searchTerm OR e.openingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        if($config->isRemainingQuantity() == 1){
            $query->andWhere('e.remainingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        $query->andWhere('e.status = 1');
        $query->groupBy('e.name');
        $query->orderBy('e.slug', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getArrayResult();

    }

    public function liveSearchAutoComplete($q, MedicineConfig $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->leftJoin('e.rackNo', 'r');
        $query->leftJoin('e.unit', 'u');
        $query->select('e.id as id');
        $query->addSelect('e.name as name');
        $query->addSelect('r.name as rack');
        $query->addSelect('e.brandName as brand');
        $query->addSelect('e.remainingQuantity as remainQty');
        $query->addSelect('e.salesPrice as salesPrice');
        $query->addSelect('e.purchasePrice as purchasePrice');
        $query->addSelect('u.name as unit');
     //   $query->addSelect("CASE WHEN (e.rackNo IS NULL) THEN CONCAT(e.name,' [',e.remainingQuantity, '] ','- Tk.', e.salesPrice)  ELSE CONCAT(e.name,' [',e.remainingQuantity, '] ', rack.name , '- Tk.', e.salesPrice)  END as text");
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->andWhere('e.status = 1');
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getArrayResult();

    }

    public function searchGenericStockComplete($q, MedicineConfig $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->leftJoin('e.rackNo', 'rack');
        $query->leftJoin('e.unit', 'unit');
        $query->leftJoin('e.medicineBrand', 'brand');
        $query->leftJoin('brand.medicineGeneric', 'generic');
        $query->select('e.id as id');
        $query->addSelect("CASE WHEN (e.rackNo IS NULL) THEN CONCAT(e.name,' [',e.remainingQuantity, '] ','- Tk.', e.salesPrice,'-',e.brandName)  ELSE CONCAT(e.name,' [',e.remainingQuantity, '] ', rack.name , '- Tk.', e.salesPrice,'-',e.brandName)  END as text");
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        $query->andWhere($query->expr()->like("generic.name", "'%$q%'"  ));
        $query->andWhere('e.status = 1');
        $query->groupBy('e.name');
        $query->orderBy('e.slug', 'ASC');
        $query->setMaxResults( '100' );
        return $query->getQuery()->getArrayResult();

    }

    public function getGenericStockMedicine(MedicineStock $stock)
    {
        if($stock->getMedicineBrand()){
            $generic = $stock->getMedicineBrand()->getMedicineGeneric()->getId();
            $form = $stock->getMedicineBrand()->getMedicineForm();
            $query = $this->createQueryBuilder('e');
            $query->join('e.medicineBrand', 'brand');
            $query->where("e.medicineConfig = :config")->setParameter('config', $stock->getMedicineConfig()->getId());
            $query->andWhere("brand.medicineGeneric = :medicineGenericId")->setParameter('medicineGenericId', $generic);
            $query->andWhere("brand.medicineForm = :medicineFor")->setParameter('medicineFor',$form);
            $query->orderBy('e.slug', 'ASC');
            return $query->getQuery()->getResult();
        }
        return false;
    }

    public function ecommerceSearchAutoComplete($q, MedicineConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->leftJoin('e.rackNo', 'rack');
        $query->leftJoin('e.unit', 'unit');
        $query->leftJoin('e.medicineBrand', 'brand');
        $query->leftJoin('brand.medicineGeneric', 'generic');
        $query->select('e.id as id');
        $query->addSelect("e.name as text");
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }



    public function searchAutoPurchaseStock($q, MedicineConfig $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->select('e.id as id');
        $query->addSelect("CONCAT(e.name,' => MRP - ', e.salesPrice) as text");
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->andWhere('e.status =1');
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoPurchaseStockItemWithBrand($q, MedicineConfig $config, $brand = "")
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->select('e.id as id');
        $query->addSelect("CONCAT(e.name,' => MRP - ', e.salesPrice) as text");
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($brand){
            $query->andWhere("e.brandName = :brandName")->setParameter('brandName', $brand);
        }
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->andWhere('e.status =1');
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }


    public function searchNameAutoComplete($q, MedicineConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->select('e.name as id');
        $query->addSelect('e.name as text');
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->andWhere("e.status = 1");
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }

    public function searchWebStock($q, MedicineConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->select('e.id as id');
        $query->addSelect('e.name as text');
        $query->where("ic.id = :config")->setParameter('config', $config->getId());
        if($config->isSearchSlug() == 1){
            $query->andWhere($query->expr()->like("e.slug", "'$q%'"  ));
        }else{
            $query->andWhere($query->expr()->like("e.name", "'%$q%'"  ));
        }
        $query->groupBy('e.name');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }



    public function searchAutoCompleteBrandName($q, MedicineConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->join('e.medicineConfig', 'ic');
        $query->select('e.brandName as id');
        $query->addSelect('e.brandName as text');
        $query->where($query->expr()->like("e.brandName", "'%$q%'"  ));
        $query->andWhere("ic.id = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.brandName');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

    public function getApiSpalshStock(GlobalOption $option)
    {
        $config = $option->getMedicineConfig();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.medicineBrand','brand');
        $qb->leftJoin('e.unit','u');
        $qb->select('e.id as stockId','e.barcode as barcode','e.name as name','e.remainingQuantity as remainingQuantity','e.salesPrice as salesPrice','e.purchasePrice as purchasePrice','e.printHide as printHidden','e.path as path');
        $qb->addSelect('e.name as brandName','brand.strength as strength');
        $qb->addSelect('u.id as unitId','u.name as unitName');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config->getId()) ;
        if($config->isActiveQuantity() == 1){
            $qb->andWhere('e.purchaseQuantity > :searchTerm OR e.openingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        if($config->isRemainingQuantity() == 1){
            $qb->andWhere('e.remainingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        $qb->andWhere('e.status = 1');
        $qb->orderBy('e.sku','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($result as $key => $row) {

            $data[$key]['global_id']            = (int) $option->getId();
            $data[$key]['item_id']              = (int) $row['stockId'];
            $printName = trim($row['name']);
            $data[$key]['category_id']      = 0;
            $data[$key]['categoryName']     = '';
            $data[$key]['barcode']          = $row['barcode'];
            $data[$key]['unit']             = ($row['unitName']) ? $row['unitName'] : "";
            $data[$key]['name']                 = $row['name'];
            $data[$key]['printName']            = $printName;
            $data[$key]['quantity']             = $row['remainingQuantity'];
            $data[$key]['salesPrice']           = $row['salesPrice'];
            $data[$key]['purchasePrice']        = $row['purchasePrice'];
            $data[$key]['printHidden']          = ($row['printHidden']) ? $row['printHidden'] : ""; $row['printHidden'];
            if($row['path']){
                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/product/{$row['path']}");
                $data[$key]['imagePath']            =  $path;
            }else{
                $data[$key]['imagePath']            = "";
            }

        }
        return $data;
    }

    public function updateRemainingQuantityReset($config)
    {
        $sqlStockPurchase = "UPDATE medicine_stock as stock
            
             inner join (select pi.medicineStock_id, ROUND(COALESCE(SUM(pi.quantity),0),2) as purchaseQuantity
              from medicine_purchase_item as pi
              join medicine_stock  as ms ON  pi.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config}
              group by pi.medicineStock_id) as pa on stock.id = pa.medicineStock_id
  SET stock.purchaseQuantity = pa.purchaseQuantity";
        $qb4 = $this->getEntityManager()->getConnection()->prepare($sqlStockPurchase);
        $qb4->execute();
        

        $sqlStockRemin = "UPDATE medicine_stock as stock
             inner join (
              select ele.medicineStock_id, ROUND(COALESCE(SUM(ele.quantity),0),2) as salesQuantity
              from medicine_sales_item as ele
              join medicine_stock  as ms ON  ele.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config}
              group by ele.medicineStock_id
            ) as pa on stock.id = pa.medicineStock_id
  SET stock.remainingQuantity = ((COALESCE(stock.openingQuantity,0) + COALESCE(stock.purchaseQuantity,0) + COALESCE(stock.salesReturnQuantity,0)+ COALESCE(stock.bonusQuantity,0)+ COALESCE(stock.bonusAdjustment,0)+ COALESCE(stock.adjustmentQuantity,0)) - (COALESCE(pa.salesQuantity,0) + COALESCE(stock.purchaseReturnQuantity,0) + COALESCE(stock.damageQuantity,0)))
 , stock.salesQuantity = pa.salesQuantity";
        $qb5 = $this->getEntityManager()->getConnection()->prepare($sqlStockRemin);
        $qb5->execute();


    }


    public function getApiStock(GlobalOption $option)
    {
        $config = $option->getMedicineConfig();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.medicineBrand','brand');
        $qb->leftJoin('e.unit','u');
        $qb->select('e.id as stockId','e.barcode as barcode','e.name as name','e.remainingQuantity as remainingQuantity','e.salesPrice as salesPrice','e.purchasePrice as purchasePrice','e.printHide as printHidden','e.path as path');
        $qb->addSelect('e.name as brandName','brand.strength as strength');
        $qb->addSelect('u.id as unitId','u.name as unitName');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config->getId()) ;
        if($config->isActiveQuantity() == 1){
            $qb->andWhere('e.purchaseQuantity > :searchTerm OR e.openingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        if($config->isRemainingQuantity() == 1){
            $qb->andWhere('e.remainingQuantity > :searchTerm')->setParameter('searchTerm', 0);
        }
        $qb->andWhere('e.status = 1');
        $qb->orderBy('e.sku','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $data = array();
        foreach($result as $key => $row) {

            $data[$key]['global_id']            = (int) $option->getId();
            $data[$key]['item_id']              = (int) $row['stockId'];
            $printName = trim($row['name']);
            $data[$key]['category_id']      = 0;
            $data[$key]['categoryName']     = '';
            if ($row['unitId']){
                $data[$key]['unit_id']          = $row['barcode'];
                $data[$key]['unit']             = $row['unitName'];
            }else{
                $data[$key]['unit_id']          = $row['barcode'];
                $data[$key]['unit']             = '';
            }
            $data[$key]['name']                 = $row['name'];
            $data[$key]['printName']            = $printName;
            $data[$key]['quantity']             = $row['remainingQuantity'];
            $data[$key]['salesPrice']           = $row['salesPrice'];
            $data[$key]['purchasePrice']        = $row['purchasePrice'];
            $data[$key]['printHidden']          = $row['printHidden'];
            if($row['path']){
                $path = $this->resizeFilter("uploads/domain/{$option->getId()}/product/{$row['path']}");
                $data[$key]['imagePath']            =  $path;
            }else{
                $data[$key]['imagePath']            = "";
            }

        }
        return $data;
    }

    public function resizeFilter($pathToImage, $width = 256, $height = 256)
    {
        $path = '/' . Image::open(__DIR__.'/../../../../../web/' . $pathToImage)->cropResize($width, $height, 'transparent', 'top', 'left')->guess();
        return $_SERVER['HTTP_HOST'].$path;
    }


    public function brandStock(User $user,$data)
    {
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.brandName as name','SUM(e.remainingQuantity) as quantity' );
        $qb->addSelect('COALESCE(SUM(e.averagePurchasePrice * e.remainingQuantity),0) as avgPurchase');
        $qb->addSelect('COALESCE(SUM(e.purchasePrice * e.remainingQuantity),0) as purchase');
        $qb->addSelect('COALESCE(SUM(e.averageSalesPrice * e.remainingQuantity),0) as avgSales ' );
        $qb->addSelect('COALESCE(SUM(e.salesPrice * e.remainingQuantity),0) as sales ' );
        $qb->addSelect('(COALESCE(SUM(e.averageSalesPrice * e.remainingQuantity),0))-(COALESCE(SUM(e.averagePurchasePrice * e.remainingQuantity),0)) as avgProfit');
        $qb->addSelect('(COALESCE(SUM(e.salesPrice * e.remainingQuantity),0))-(COALESCE(SUM(e.purchasePrice * e.remainingQuantity),0)) as profit');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config);
        $qb->groupBy("e.brandName");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function  processStockMigration($from, $to)
    {

        $em = $this->_em;
        $stock = $em->createQuery("DELETE MedicineBundle:MedicineStock e WHERE e.medicineConfig={$to}");
        if($stock){
            $stock->execute();
        }
        $elem = "INSERT INTO medicine_stock(`unit_id`,`name`,`slug`,`minQuantity`,`remainingQuantity`,`salesPrice`, `purchasePrice`,`averagePurchasePrice`, `medicineBrand_id`,`brandName`,`pack`,`isAndroid`,`printHide`,mode,status,`medicineConfig_id`)
  SELECT `unit_id`, trim(name),trim(slug),0,0, `salesPrice`,(salesPrice - ((salesPrice * 12.5)/100)),(salesPrice - ((salesPrice * 12.5)/100)),`medicineBrand_id`, `brandName`, `pack`, `isAndroid`, `printHide`,mode,1,$to
  FROM medicine_stock
  WHERE medicineConfig_id =:config AND status=1";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
        $qb1->bindValue('config', $from);
        $qb1->execute();

        $stockUpdate = "UPDATE medicine_stock SET mode = 'medicine' WHERE  medicineConfig_id =:config AND mode IS NULL";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->bindValue('config', $to);
        $qb1->execute();
    }

    public function insertGlobalToLocalStock(GlobalOption $option,MedicineBrand $brand)
    {
        $config = $option->getMedicineConfig();
        $em = $this->_em;
        $find = $this->findOneBy(array('medicineConfig'=>$config,'medicineBrand' => $brand));
        if(empty($find)){
            $entity = new MedicineStock();
            $entity->setMedicineConfig($config);
            $name = $brand->getMedicineForm().' '.$brand->getName().' '.$brand->getStrength();
            $entity->setName($name);
            $entity->setBrandName($brand->getMedicineCompany()->getName());
            $entity->setMedicineBrand($brand);
            $unit = $em->getRepository('SettingToolBundle:ProductUnit')->findOneBy(array('name'=>'Pcs'));
            $entity->setUnit($unit);
            $entity->setSalesPrice($brand->getPrice());
            if($brand->getPrice()){
                $purchasePrice = ((float)$brand->getPrice()-(((float)$brand->getPrice()* 10)/100));
                $entity->setPurchasePrice($purchasePrice);
            }
            $entity->setMode('medicine');
            $em->persist($entity);
            $em->flush();
            return $entity;
        }
    }

    public function insertAndroidStock(GlobalOption $option,$data)
    {
        $config = $option->getMedicineConfig();
        $em = $this->_em;
        $find = $this->findOneBy(array('medicineConfig'=>$config,'name' => $data['name']));
        if(empty($find)){
            $entity = new MedicineStock();
            $entity->setMedicineConfig($config);
            $entity->setName($data['name']);
            $entity->setBrandName($data['brandName']);
            $medicine = $em->getRepository('MedicineBundle:MedicineBrand')->findOneBy(array('name'=>$entity->getName()));
            if($medicine){
                $entity->setMedicineBrand($medicine);
            }
            if($data['unit']){
                $unit = $em->getRepository('SettingToolBundle:ProductUnit')->findOneBy(array('name' => $data['unit']));
                $entity->setUnit($unit);
            }else{
                $unit = $em->getRepository('SettingToolBundle:ProductUnit')->findOneBy(array('name'=>'Pcs'));
                $entity->setUnit($unit);
            }
            if($data['category']){
                $category = $em->getRepository('MedicineBundle:MedicineParticular')->findOneBy(array('medicineConfig'=>$config,'name' => $data['category']));
                $entity->setCategory($category);
            }
            $entity->setOpeningQuantity($data['openingQuantity']);
            $entity->setRemainingQuantity($data['openingQuantity']);
            $entity->setSalesPrice($data['price']);
            if($data['purchasePrice']){
                $entity->setPurchasePrice($data['purchasePrice']);
            }else{
                $purchasePrice = ((float)$data['price']-(((float)$data['price'] * 10)/100));
            }
            $entity->setPurchasePrice($purchasePrice);
            $entity->setDescription($data['description']);
            $entity->setMinQuantity($data['minQuantity']);
            $entity->setMode('medicine');
            $em->persist($entity);
            $em->flush();
            return $entity;
        }
        return $find;
    }

    public function updateAndroidStock($data)
    {

        $em = $this->_em;
        $entity = $this->find($data['id']);
        /* @var $entity MedicineStock */
        if($entity){
            $entity->setName($data['name']);
            $entity->setBrandName($data['brandName']);
            if($data['category']){
                $category = $em->getRepository('MedicineBundle:MedicineParticular')->findOneBy(array('name' => $data['category']));
                $entity->setCategory($category);
            }
            if($data['unit']){
                $unit = $em->getRepository('SettingToolBundle:ProductUnit')->findOneBy(array('name' => $data['unit']));
                $entity->setUnit($unit);
            }
            $entity->setSalesPrice($data['price']);
            $purchasePrice = ((float)$data['price']-(((float)$data['price'] * 10)/100));
            $entity->setPurchasePrice($purchasePrice);
            $entity->setMinQuantity($data['minQuantity']);
            $entity->setMode('medicine');
            $em->persist($entity);
            $em->flush();
        }

    }

    public function sumOpeningQuantity(MedicineConfig $config)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('COALESCE(SUM(e.purchasePrice * e.openingQuantity),0) as opening');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config->getId()) ;
        $qb->andWhere('e.id != 1');
        $res = $qb->getQuery();
        $result = $res->getSingleScalarResult();
        return $result;

    }

    public function updateOpeningQuantity($config)
    {
        $stockUpdate = "UPDATE medicine_stock SET openingApprove = 1 WHERE  medicineConfig_id = {$config->getId()} && openingQuantity IS NOT NULL";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($stockUpdate);
        $qb1->execute();
    }

    public function getApiStockDelete(GlobalOption $option,$id)
    {
        $em = $this->_em;
        $config = $option->getMedicineConfig()->getId();
        $stock = $em->createQuery("DELETE MedicineBundle:MedicineStock e WHERE e.medicineConfig = {$config} and id = {$id}");
        $stock->execute();
        return 'success';
    }


    public function updateMinimumQty(MedicineStock $stock)
    {
        $em = $this->_em;
        $qty = $stock->getMedicineConfig()->getShortQuantity();
        $stock->setMinQuantity($qty);
        $em->flush();

    }

}
