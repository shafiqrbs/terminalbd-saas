<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineBrand;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSales;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Gregwar\Image\Image;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * PathologyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicineStockReportRepository extends EntityRepository
{


    public function yearlyStockLedgerReport($config,$data = [])
    {

        $month = "January";
        $year = "2023";

        $elem = "INSERT INTO medicine_stock_report(stockId,name,brandName,salesPrice,purchasePrice,averagePurchasePrice,configId,mode,reportMonth,reportYear,created,updated) 
SELECT id,name,brandName,salesPrice,purchasePrice,averagePurchasePrice,medicineConfig_id,'month','January','2023',now(),now()
FROM medicine_stock as ms 
WHERE medicineConfig_id ={$config} AND (openingQuantity > 0 OR remainingQuantity > 0 OR salesQuantity > 0 OR adjustmentQuantity > 0 OR purchaseQuantity > 0)
AND NOT EXISTS ( SELECT 1 FROM medicine_stock_report d WHERE d.stockId = ms.id AND d.configId = ms.medicineConfig_id)";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
        $qb1->execute();


        $sqlStockPurchase = "UPDATE medicine_stock_report as stock
 inner join (
select pi.medicineStock_id, DATE_FORMAT(pr.updated,'%M') as reportMonth,DATE_FORMAT(pr.updated,'%Y') as reportYear, ROUND(COALESCE(SUM(pi.quantity),0),2) as purchaseQuantity
from medicine_purchase_item as pi
join medicine_purchase  as pr ON  pi.medicinePurchase_id = pr.id
join medicine_stock_report as ms ON  pi.medicineStock_id = ms.stockId
where ms.configId = {$config} AND DATE_FORMAT(pr.updated,'%M') = '{$month}' AND DATE_FORMAT(pr.updated,'%Y') = '{$year}'
group by pi.medicineStock_id ) pa on stock.stockId = pa.medicineStock_id
SET stock.purchaseQuantity = pa.purchaseQuantity";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($sqlStockPurchase);
        $qb1->execute();


        $sqlStockPurchaseReturn = "UPDATE medicine_stock as stock
             inner join (select pi.medicineStock_id, ROUND(COALESCE(SUM(pi.quantity),0),2) as purchaseQuantity
              from medicine_purchase_return_item as pi
              join medicine_purchase_return  as pr ON  pi.medicinePurchaseReturn_id = pr.id
              join medicine_stock  as ms ON  pi.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config} AND pr.upadted <= '2023-01-01'
              group by pi.medicineStock_id) as pa on stock.id = pa.medicineStock_id
  SET stock.purchaseQuantity = pa.purchaseQuantity";
        $qb2 = $this->getEntityManager()->getConnection()->prepare($sqlStockPurchaseReturn);
        $qb2->execute();



        $sqlStockSales = "UPDATE medicine_stock as stock
             inner join (
              select ele.medicineStock_id, ROUND(COALESCE(SUM(ele.quantity),0),2) as salesQuantity
              from medicine_sales_item as ele
              join medicine_stock  as ms ON  ele.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config}
              group by ele.medicineStock_id
            ) as pa on stock.id = pa.medicineStock_id
  SET stock.remainingQuantity = ((COALESCE(stock.openingQuantity,0) + COALESCE(stock.purchaseQuantity,0) + COALESCE(stock.salesReturnQuantity,0)+ COALESCE(stock.bonusQuantity,0)+ COALESCE(stock.bonusAdjustment,0)+ COALESCE(stock.adjustmentQuantity,0)) - (COALESCE(pa.salesQuantity,0) + COALESCE(stock.purchaseReturnQuantity,0) + COALESCE(stock.damageQuantity,0)))
 , stock.salesQuantity = pa.salesQuantity";
        $qb2 = $this->getEntityManager()->getConnection()->prepare($sqlStockSales);
        $qb2->execute();

    }

    public function monthlyStockLedgerReport($config,$data = [])
    {
        echo $config;
        exit;
        $sqlStockPurchase = "UPDATE medicine_stock as stock
             inner join (select pi.medicineStock_id, ROUND(COALESCE(SUM(pi.quantity),0),2) as purchaseQuantity
              from medicine_purchase_item as pi
              join medicine_purchase  as pr ON  pi.medicinePurchase_id = pr.id
              join medicine_stock  as ms ON  pi.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config}  AND pr.updated >= '2023-01-01' AND pr.updated <= '2023-01-31'
              group by pi.medicineStock_id) as pa on stock.id = pa.medicineStock_id
  SET stock.purchaseQuantity = pa.purchaseQuantity";
        $qb1 = $this->getEntityManager()->getConnection()->prepare($sqlStockPurchase);
        $qb1->execute();

        exit;

        $sqlStockPurchaseReturn = "UPDATE medicine_stock as stock
             inner join (select pi.medicineStock_id, ROUND(COALESCE(SUM(pi.quantity),0),2) as purchaseQuantity
              from medicine_purchase_return_item as pi
              join medicine_purchase_return  as pr ON  pi.medicinePurchaseReturn_id = pr.id
              join medicine_stock  as ms ON  pi.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config} AND pr.upadted >= '2023-01-01' AND pr.upadted <= '2023-01-31'
              group by pi.medicineStock_id) as pa on stock.id = pa.medicineStock_id
  SET stock.purchaseQuantity = pa.purchaseQuantity";
        $qb2 = $this->getEntityManager()->getConnection()->prepare($sqlStockPurchaseReturn);
        $qb2->execute();



        $sqlStockSales = "UPDATE medicine_stock as stock
             inner join (
              select ele.medicineStock_id, ROUND(COALESCE(SUM(ele.quantity),0),2) as salesQuantity
              from medicine_sales_item as ele
              join medicine_stock  as ms ON  ele.medicineStock_id = ms.id
              where  ms.medicineConfig_id = {$config}
              group by ele.medicineStock_id
            ) as pa on stock.id = pa.medicineStock_id
  SET stock.remainingQuantity = ((COALESCE(stock.openingQuantity,0) + COALESCE(stock.purchaseQuantity,0) + COALESCE(stock.salesReturnQuantity,0)+ COALESCE(stock.bonusQuantity,0)+ COALESCE(stock.bonusAdjustment,0)+ COALESCE(stock.adjustmentQuantity,0)) - (COALESCE(pa.salesQuantity,0) + COALESCE(stock.purchaseReturnQuantity,0) + COALESCE(stock.damageQuantity,0)))
 , stock.salesQuantity = pa.salesQuantity";
        $qb2 = $this->getEntityManager()->getConnection()->prepare($sqlStockSales);
        $qb2->execute();

    }


}
