<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Appstore\Bundle\MedicineBundle\Entity\MedicineVendor;
use Doctrine\ORM\EntityRepository;


/**
 * HmsVendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicineSalesReturnRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $invoice = isset($data['invoice'])? $data['invoice'] :'';
        $transactionMethod = isset($data['transactionMethod'])? $data['transactionMethod'] :'';
        $salesBy = isset($data['salesBy'])? $data['salesBy'] :'';
        $paymentStatus = isset($data['paymentStatus'])? $data['paymentStatus'] :'';
        $bank = isset($data['bank'])? $data['bank'] :'';
        $mobileBank = isset($data['mobileBank'])? $data['mobileBank'] :'';
        $device = isset($data['device'])? $data['device'] :'';
        $customer = isset($data['customer'])? $data['customer'] :'';
        $customerName = isset($data['name'])? $data['name'] :'';
        $customerMobile = isset($data['mobile'])? $data['mobile'] :'';
        $createdStart = isset($data['startDate'])? $data['startDate'] :'';
        $createdEnd = isset($data['endDate'])? $data['endDate'] :'';
        $amount = isset($data['amount'])? $data['amount'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $due = isset($data['due'])? $data['due'] :'';
        if (!empty($invoice)) {
            $qb->andWhere($qb->expr()->like("s.invoice", "'%$invoice%'"  ));
        }
        if (!empty($customerName)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.name", "'$customerName%'"  ));
        }
        if (!empty($due)) {
            $qb->andWhere("s.due >= :due")->setParameter('due', $due);
        }
        if (!empty($process)) {
            $qb->andWhere($qb->expr()->like("s.process", "'$process%'"  ));
        }
        if (!empty($customerMobile)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.mobile", "'%$customerMobile%'"  ));
        }

        if (!empty($customer)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.mobile", "'%$customer%'"  ));
        }

        if (!empty($amount)) {
            $qb->andWhere($qb->expr()->like("s.netTotal", "'%$amount%'"  ));
        }

        if (!empty($createdStart)) {
            $compareTo = new \DateTime($createdStart);
            $created =  $compareTo->format('Y-m-d 00:00:00');
            $qb->andWhere("s.created >= :createdStart");
            $qb->setParameter('createdStart', $created);
        }

        if (!empty($createdEnd)) {
            $compareTo = new \DateTime($createdEnd);
            $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
            $qb->andWhere("s.created <= :createdEnd");
            $qb->setParameter('createdEnd', $createdEnd);
        }
        if(!empty($salesBy)){
            $qb->join("s.salesBy",'un');
            $qb->andWhere("un.username = :username");
            $qb->setParameter('username', $salesBy);
        }
        if(!empty($paymentStatus)){
            $qb->andWhere("s.paymentStatus = :status");
            $qb->setParameter('status', $paymentStatus);
        }
        if(!empty($transactionMethod)){
            $qb->andWhere("s.transactionMethod = :method");
            $qb->setParameter('method', $transactionMethod);
        }
        if(!empty($bank)){
            $qb->join("s.accountBank","bank");
            $qb->andWhere("bank.id = :bankId");
            $qb->setParameter('bankId', $bank);
        }
        if(!empty($mobileBank)){
            $qb->join("s.accountMobileBank","mobile");
            $qb->andWhere("mobile.id = :mobileId");
            $qb->setParameter('mobileId', $mobileBank);
        }
        if(!empty($device)){
            $qb->andWhere("s.androidProcess = :device");
            $qb->setParameter('device', $device);
        }


    }

    public function invoiceLists($config, $data)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('s.medicineSalesReturnInvoice IS NULL');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function salesReturnStockItemUpdate(MedicinePurchaseItem $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicinePurchaseItem = :purchaseItem')->setParameter('purchaseItem', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function salesReturnStockUpdate(MedicineStock $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicineStock = :medicineStock')->setParameter('medicineStock', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }


    public function getCustomerExistReturnItem($customer)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.medicineSalesItem','si');
        $qb->join('e.medicineSalesReturnInvoice','s');
        $qb->select('SUM(e.quantity) AS quantity','si.id as salesId');
        $qb->where('s.customer = :customer')->setParameter('customer', $customer);
        $qb->groupBy('si.id');
        $query = $qb->getQuery()->getArrayResult();
        $returnItems = array();
        foreach ($query as $row){
            $returnItems[$row['salesId']] = $row;
        }
        return $returnItems;
    }


    public function checkInInsert(MedicineConfig $config , $vendor)
    {
        $entity = $this->findOneBy(array('medicineConfig' => $config,'companyName' => $vendor));
        if(empty($entity)){
            $entity = new MedicineVendor();
            $entity->setMedicineConfig($config);
            $entity->setCompanyName($vendor);
            $entity->setName($vendor);
            $this->_em->persist($entity);
            $this->_em->flush();
        }
        return $entity;
    }

}
