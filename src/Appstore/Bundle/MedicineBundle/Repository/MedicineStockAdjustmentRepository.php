<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Appstore\Bundle\MedicineBundle\Entity\MedicineVendor;
use Doctrine\ORM\EntityRepository;


/**
 * HmsVendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicineStockAdjustmentRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $salesBy = isset($data['createdBy'])? $data['createdBy'] :'';
        $createdStart = isset($data['startDate'])? $data['startDate'] :'';
        $createdEnd = isset($data['endDate'])? $data['endDate'] :'';
        $name = isset($data['name'])? $data['name'] :'';
        $brand = isset($data['brandName'])? $data['brandName'] :'';
        if (!empty($createdStart)) {
            $compareTo = new \DateTime($createdStart);
            $created =  $compareTo->format('Y-m-d 00:00:00');
            $qb->andWhere("e.created >= :createdStart");
            $qb->setParameter('createdStart', $created);
        }

        if (!empty($createdEnd)) {
            $compareTo = new \DateTime($createdEnd);
            $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
            $qb->andWhere("e.created <= :createdEnd");
            $qb->setParameter('createdEnd', $createdEnd);
        }
        if(!empty($salesBy)){
            $qb->andWhere("u.username = :username");
            $qb->setParameter('username', $salesBy);
        }
        if (!empty($brand)) {
            $qb->andWhere($qb->expr()->like("s.brandName", "'%$brand%'"  ));
        }
        if (!empty($name)) {
            $qb->andWhere($qb->expr()->like("s.name", "'%$name%'"  ));
        }

    }


    public function findWithSearch(MedicineConfig $config,$data)
   {

       $qb = $this->createQueryBuilder('e');
       $qb->select('e');
       $qb->join('e.medicineStock','s');
       $qb->where('e.medicineConfig = :config')->setParameter('config', $config->getId());
       $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return $result;
   }

    public function damagePurchaseStockItemUpdate(MedicinePurchaseItem $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicinePurchaseItem = :purchaseItem')->setParameter('purchaseItem', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function adjustmentStockItemUpdate(MedicineStock $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity','SUM(e.bonus) AS bonus');
        $qb->where('e.medicineStock = :medicineStock')->setParameter('medicineStock', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt;
    }


    public function stockAdjustmentReport($config,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity','SUM(e.bonus) AS bonus');
        $qb->addSelect('s.name as name','s.brandName as brandName','s.id as stock');
        $qb->addSelect('u.username as username');
        $qb->join('e.createdBy','u');
        $qb->join('e.medicineStock','s');
        $qb->where('e.medicineConfig = :medicineConfig')->setParameter('medicineConfig', $config);
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('s.id');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }


    public function checkInInsert(MedicineConfig $config , $vendor)
    {
        $entity = $this->findOneBy(array('medicineConfig' => $config,'companyName' => $vendor));
        if(empty($entity)){
            $entity = new MedicineVendor();
            $entity->setMedicineConfig($config);
            $entity->setCompanyName($vendor);
            $entity->setName($vendor);
            $this->_em->persist($entity);
            $this->_em->flush();
        }
        return $entity;
    }

}
