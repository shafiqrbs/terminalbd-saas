<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePrepurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePrepurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchase;
use Appstore\Bundle\MedicineBundle\Entity\MedicinePurchaseItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineParticular;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Appstore\Bundle\MedicineBundle\Entity\MedicineVendor;
use Appstore\Bundle\RestaurantBundle\Form\StockType;
use Doctrine\ORM\EntityRepository;


/**
 * MedicinePurchaseItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicinePrepurchaseItemRepository extends EntityRepository
{

    protected function handleSearchBetween($qb,$data)
    {

        $grn = isset($data['grn'])? $data['grn'] :'';
        $vendor = isset($data['vendor'])? $data['vendor'] :'';
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';
	    $name = isset($data['name'])? $data['name'] :'';
        $rackNo = isset($data['rackNo'])? $data['rackNo'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $sku = isset($data['sku'])? $data['sku'] :'';
        $brandName = isset($data['brandName'])? $data['brandName'] :'';

        if (!empty($name)) {
            $qb->andWhere($qb->expr()->like("s.name", "'%$name%'"  ));
        }
        if (!empty($sku)) {
            $qb->andWhere($qb->expr()->like("s.sku", "'%$sku%'"  ));
        }
        if (!empty($brandName)) {
            $qb->andWhere($qb->expr()->like("s.brandName", "'%$brandName%'"  ));
        }
        if(!empty($rackNo)){
            $qb->andWhere("s.rackNo = :rack")->setParameter('rack', $rackNo);
        }
        if(!empty($mode)){
            $qb->andWhere("e.mode = :mode")->setParameter('mode', $mode);
        }
        if (!empty($grn)) {
            $qb->andWhere($qb->expr()->like("e.grn", "'%$grn%'"  ));
        }
        if(!empty($vendor)){
            $qb->andWhere("e.medicineVendor = :vendor")->setParameter('vendor', $vendor);
        }
        if (!empty($startDate) ) {
            $datetime = new \DateTime($data['startDate']);
            $start = $datetime->format('Y-m-d 00:00:00');
            $qb->andWhere("mpi.expirationEndDate >= :startDate");
            $qb->setParameter('startDate', $start);
        }

        if (!empty($endDate)) {
            $datetime = new \DateTime($data['endDate']);
            $end = $datetime->format('Y-m-d 23:59:59');
            $qb->andWhere("mpi.expirationEndDate <= :endDate");
            $qb->setParameter('endDate', $end);
        }
    }

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function findWithInstantItemSearch($config,$data = array(),$instant = ''){

        $qb = $this->createQueryBuilder('mpi');
        $qb->join('mpi.medicinePurchase','e');
        $qb->join('mpi.medicineStock','s');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
        if($instant == 1 ) {
            $qb->andWhere('e.instantPurchase = :instant')->setParameter('instant', $instant);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $qb->getQuery();
        return  $qb;
    }



    public function findWithSearch($config,$data = array(),$instant = ''){

        $qb = $this->createQueryBuilder('mpi');
        $qb->join('mpi.medicinePurchase','e');
        $qb->join('mpi.medicineStock','s');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('e.process = :process')->setParameter('process', 'Approved');
       // $qb->andWhere('mpi.remainingQuantity > 0');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.name','ASC');
        $qb->getQuery();
        return  $qb;
    }

    public function expiryMedicineSearch($config,$data = array(),$instant = ''){

        $qb = $this->createQueryBuilder('mpi');
        $qb->join('mpi.medicinePurchase','e');
        $qb->join('mpi.medicineStock','s');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('e.process = :process')->setParameter('process', 'Approved');
        $qb->andWhere('mpi.expirationStartDate IS NOT NULL');
        $qb->andWhere('mpi.remainingQuantity > 0');
        if($instant == 1 ) {
            $qb->andWhere('e.instantPurchase = :instant')->setParameter('instant', $instant);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('mpi.expirationStartDate','ASC');
        $qb->getQuery();
        return  $qb;
    }

    public function medicinePurchaseItemUpdate(MedicinePurchaseItem $item,$fieldName)
    {
        $qb = $this->createQueryBuilder('e');
        if($fieldName == 'sales'){
            $qb->select('e.salesQuantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('e.quantity AS quantity');
        }else{
            $qb->select('SUM(e.quantity) AS quantity');
        }
        $qb->addSelect('e.remainingQuantity AS remainingQuantity');
        $qb->where('e.id = :item')->setParameter('item', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt;
    }

    public function purchaseStockItemUpdate(MedicineStock $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.medicinePurchase', 'mp');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.medicineStock = :medicineStock')->setParameter('medicineStock', $stockItem->getId());
        $qb->andWhere('mp.process = :process')->setParameter('process', 'Approved');
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }


    public function updatePurchaseItem($data)
    {
        $em = $this->_em;
        $entity = $this->_em->getRepository('MedicineBundle:MedicinePrepurchaseItem')->find($data['purchaseItemId']);
        $entity->setQuantity($data['quantity']);
        $entity->setSalesprice($data['salesPrice']);
        $entity->setSubtotal($data['salesPrice'] * $data['quantity']);
        $em->persist($entity);
        $em->flush();
        return $entity->getMedicinePrepurchase();

    }


    public function insertStockPurchaseItems(MedicinePrepurchase $purchase,MedicineStock $item, $quantity)
    {
        $em = $this->_em;
        $entity = new MedicinePrepurchaseItem();
        $entity->setMedicinePrepurchase($purchase);
        $entity->setMedicineStock($item);
        $entity->setQuantity($quantity);
        $entity->setSalesPrice($item->getSalesPrice());
        $entity->setSubTotal($entity->getSalesPrice() * $entity->getQuantity());
        $em->persist($entity);
        $em->flush();
    }

	public function insertShortList(MedicinePrepurchase $purchase,MedicineStock $item)
	{
		$em = $this->_em;
		$entity = new MedicinePrepurchaseItem();
		$entity->setMedicinePrepurchase($purchase);
		$entity->setMedicineStock($item);
		$entity->setSalesPrice($item->getSalesPrice());
		$entity->setQuantity($item->getReorderQuantity());
		$entity->setSubTotal($item->getSalesPrice() * $item->getReorderQuantity());
		$em->persist($entity);
		$em->flush();
	}


	public function checkInsertStockItem(MedicineConfig $config,$data){

        if(empty($data['medicineId'])) {
            $checkStockMedicine = $this->_em->getRepository('MedicineBundle:MedicineStock')->checkDuplicateStockNonMedicine($config, $data['medicineBrand']);
        }else{
            $medicine =  $this->_em->getRepository('MedicineBundle:MedicineBrand')->find($data['medicineId']);
            $checkStockMedicine =  $this->_em->getRepository('MedicineBundle:MedicineStock')->checkDuplicateStockMedicine($config, $medicine);
        }

        if (empty($checkStockMedicine)){
            $em = $this->_em;
            $entity = new MedicineStock();
            $entity->setMedicineConfig($config);
            if(empty($data['medicineId'])){
                if($data['mode']){
                    $brandName = $this->_em->getRepository('MedicineBundle:MedicineParticular')->find($data['mode']);
                    $entity->setMode($brandName->getParticularType()->getSlug());
                    $entity->setBrandName($brandName->getName());
                }
                $entity->setName($data['medicineBrand']);
            }else{
                $entity->setMedicineBrand($medicine);
                $name = $medicine->getMedicineForm().' '.$medicine->getName().' '.$medicine->getStrength();
                $entity->setName($name);
                $entity->setBrandName($medicine->getMedicineCompany()->getName());
                $entity->setMode('medicine');
            }
            if(!empty($data['rackNo'])){
                $entity->setRackNo($this->_em->getRepository('MedicineBundle:MedicineParticular')->find($data['rackNo']));
            }
            $entity->setSalesPrice($data['salesPrice']);
            $entity->setPurchasePrice($this->stockInstantPurchaseItemPrice($config->getInstantVendorPercentage(),$data['salesPrice']));
            $em->persist($entity);
            $em->flush();
            return $entity;
        }else{
            return $checkStockMedicine;
        }
    }

    public function stockInstantPurchaseItemPrice($percentage,$price)
    {

        $discount = (($price * $percentage )/100);
        $purchasePrice = ($price - $discount);
        return round($purchasePrice,2);

    }

    public function stockPurchaseItemPrice(MedicineConfig $config,$price)
    {
        $discount = (($price * $config->getVendorPercentage())/100);
        $purchasePrice = ($price - $discount);
        return round($purchasePrice,2);
    }

   public function getPurchaseItems(MedicinePrepurchase $sales)
    {
        $entities = $sales->getMedicinePrepurchaseItems();
        $data = '';
        $i = 1;
        /* @var $entity MedicinePrepurchaseItem */

        foreach ($entities as $entity) {

            $rack ="";
            if(!empty($entity->getMedicineStock()->getRackNo())){
               $rack = $entity->getMedicineStock()->getRackNo()->getName();
            }
            $subTotal = ($entity->getQuantity() * $entity->getSalesPrice());
            $data .= '<tr id="remove-'. $entity->getId().'">';
            $data .= '<td class="span3" >' . $entity->getMedicineStock()->getName() .'</td>';
            $data .= '<th class="span1" >' .$rack. '</th>';
	        $data .= "<td class='span1' >";
            $data .= "<input type='text' class='numeric td-inline-input salesPrice' data-id='{$entity->getid()}' autocomplete='off' id='salesPrice-{$entity->getId()}' name='salesPrice' value='{$entity->getSalesPrice()}'>";
            $data .= "</td>";
            $data .= "<td class='span1' >";
            $data .= "<input type='hidden' id='purchaseQuantity-{$entity->getId()}'  value='{$entity->getQuantity()}' >";
            $data .= "<input type='text' class='numeric td-inline-input quantity' data-id='{$entity->getid()}' autocomplete='off' id='quantity-{$entity->getId()}' name='quantity' value='{$entity->getQuantity()}'>";
            $data .= "</td>";
            $data .= "<td class='span1' id='subTotal-{$entity->getid()}'>{$subTotal}</td>";
            $data .= '<td class="span1" >
                     <a id="'.$entity->getId(). '" data-url="/medicine/prepurchase/' . $sales->getId() . '/' . $entity->getId() . '/particular-delete" href="javascript:" class="btn red mini delete" ><i class="icon-trash"></i></a>
                     </td>';
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function mergePurchaseItem(MedicinePurchase $purchase , MedicineVendor $vendor){


        $em = $this->_em;
        $qb = $this->createQueryBuilder('pi');
        $qb->join('pi.medicinePurchase','e');
        $qb->where('e.medicineConfig = :config')->setParameter('config',$purchase->getMedicineConfig()->getId());
        $qb->andWhere('e.medicineVendor = :vendor')->setParameter('vendor',$vendor->getId());
        $result = $qb->getQuery()->getResult();

        /* @var $row MedicinePurchaseItem */

        foreach ($result as $row){

            $entity = new MedicinePurchaseItem();
            $entity->setMedicinePurchase($purchase);
            $entity->setActualPurchasePrice($row->getActualPurchasePrice());
            $entity->setPurchasePrice($row->getActualPurchasePrice());
            $entity->setSalesPrice($row->getSalesPrice());
            $entity->setMedicineStock($row->getMedicineStock());
            $entity->setExpirationEndDate($row->getExpirationStartDate());
            $entity->setExpirationStartDate($row->getExpirationEndDate());
            $em->persist($entity);
            $em->flush();

        }






    }


}
