<?php

namespace Appstore\Bundle\MedicineBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountBank;
use Appstore\Bundle\AccountingBundle\Entity\AccountMobileBank;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\EcommerceBundle\Entity\Order;
use Appstore\Bundle\EcommerceBundle\Entity\sales_item;
use Appstore\Bundle\MedicineBundle\Entity\MedicineAndroidProcess;
use Appstore\Bundle\MedicineBundle\Entity\MedicineConfig;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSales;
use Appstore\Bundle\MedicineBundle\Entity\MedicineSalesItem;
use Appstore\Bundle\MedicineBundle\Entity\MedicineStock;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * MedicineSalesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedicineSalesRepository extends EntityRepository
{

    public function getLastInvoice(MedicineConfig $config)
    {
        $entity = $this->findOneBy(
            array('medicineConfig' => $config),
            array('id' => 'DESC')
        );
        return $entity;
    }

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $invoice = isset($data['invoice'])? $data['invoice'] :'';
        $transactionMethod = isset($data['transactionMethod'])? $data['transactionMethod'] :'';
        $salesBy = isset($data['salesBy'])? $data['salesBy'] :'';
        $paymentStatus = isset($data['paymentStatus'])? $data['paymentStatus'] :'';
        $bank = isset($data['bank'])? $data['bank'] :'';
        $mobileBank = isset($data['mobileBank'])? $data['mobileBank'] :'';
        $device = isset($data['device'])? $data['device'] :'';
        $customer = isset($data['customer'])? $data['customer'] :'';
        $customerName = isset($data['name'])? $data['name'] :'';
        $customerMobile = isset($data['mobile'])? $data['mobile'] :'';
        $createdStart = isset($data['startDate'])? $data['startDate'] :'';
	    $createdEnd = isset($data['endDate'])? $data['endDate'] :'';
	    $amount = isset($data['amount'])? $data['amount'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $due = isset($data['due'])? $data['due'] :'';
	    if (!empty($invoice)) {
            $qb->andWhere($qb->expr()->like("s.invoice", "'%$invoice%'"  ));
        }
        if (!empty($customerName)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.name", "'$customerName%'"  ));
        }
        if (!empty($due)) {
            $qb->andWhere("s.due >= :due")->setParameter('due', $due);
        }
        if (!empty($process)) {
            $qb->andWhere($qb->expr()->like("s.process", "'$process%'"  ));
        }
        if (!empty($customerMobile)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.mobile", "'%$customerMobile%'"  ));
        }

		if (!empty($customer)) {
            $qb->join('s.customer','c');
            $qb->andWhere($qb->expr()->like("c.mobile", "'%$customer%'"  ));
        }

        if (!empty($amount)) {
            $qb->andWhere($qb->expr()->like("s.netTotal", "'%$amount%'"  ));
        }

        if (!empty($createdStart)) {
            $compareTo = new \DateTime($createdStart);
            $created =  $compareTo->format('Y-m-d 00:00:00');
            $qb->andWhere("s.created >= :createdStart");
            $qb->setParameter('createdStart', $created);
        }

        if (!empty($createdEnd)) {
            $compareTo = new \DateTime($createdEnd);
	        $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
            $qb->andWhere("s.created <= :createdEnd");
            $qb->setParameter('createdEnd', $createdEnd);
        }
        if(!empty($salesBy)){
            $qb->join("s.salesBy",'un');
            $qb->andWhere("un.username = :username");
            $qb->setParameter('username', $salesBy);
        }
	    if(!empty($paymentStatus)){
            $qb->andWhere("s.paymentStatus = :status");
            $qb->setParameter('status', $paymentStatus);
        }
        if(!empty($transactionMethod)){
            $qb->andWhere("s.transactionMethod = :method");
            $qb->setParameter('method', $transactionMethod);
        }
        if(!empty($bank)){
            $qb->join("s.accountBank","bank");
            $qb->andWhere("bank.id = :bankId");
            $qb->setParameter('bankId', $bank);
        }
        if(!empty($mobileBank)){
            $qb->join("s.accountMobileBank","mobile");
            $qb->andWhere("mobile.id = :mobileId");
            $qb->setParameter('mobileId', $mobileBank);
        }
        if(!empty($device)){
            $qb->andWhere("s.androidProcess = :device");
            $qb->setParameter('device', $device);
        }


    }

	protected function handleSearchStockBetween($qb,$data)
	{

		$grn = isset($data['grn'])? $data['grn'] :'';
		$vendor = isset($data['vendor'])? $data['vendor'] :'';
		$createdStart = isset($data['startDate'])? $data['startDate'] :'';
		$createdEnd = isset($data['endDate'])? $data['endDate'] :'';
		$name = isset($data['name'])? $data['name'] :'';
		$rackNo = isset($data['rackNo'])? $data['rackNo'] :'';
		$mode = isset($data['mode'])? $data['mode'] :'';
		$sku = isset($data['sku'])? $data['sku'] :'';
		$brandName = isset($data['brandName'])? $data['brandName'] :'';

		if (!empty($name)) {
			$qb->andWhere($qb->expr()->like("mds.name", "'%$name%'"  ));
		}
		if (!empty($sku)) {
			$qb->andWhere($qb->expr()->like("mds.sku", "'%$sku%'"  ));
		}
		if (!empty($brandName)) {
			$qb->andWhere($qb->expr()->like("mds.brandName", "'%$brandName%'"  ));
		}
		if(!empty($rackNo)){
			$qb->andWhere("mds.rackNo = :rack")->setParameter('rack', $rackNo);
		}
		if (!empty($createdStart)) {
			$compareTo = new \DateTime($createdStart);
			$created =  $compareTo->format('Y-m-d 00:00:00');
			$qb->andWhere("s.created >= :createdStart");
			$qb->setParameter('createdStart', $created);
		}

		if (!empty($createdEnd)) {
			$compareTo = new \DateTime($createdEnd);
			$createdEnd =  $compareTo->format('Y-m-d 23:59:59');
			$qb->andWhere("s.created <= :createdEnd");
			$qb->setParameter('createdEnd', $createdEnd);
		}

	}

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d 00:00:00',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d 23:59:59',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("it.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }

        if (!empty($data['endDate'])) {
            $qb->andWhere("it.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function updateSalesPaymentReceive(AccountSales $accountSales)
    {
        /* @var MedicineSales $sales **/

        $sales = $accountSales->getMedicineSales();
        $received = $sales->getReceived() + $accountSales->getAmount();
        $sales->setReceived($received);
        $sales->setDue($sales->getDue() - $accountSales->getAmount());
        if($sales->getDue() == 0 ){
            $sales->setPaymentStatus('Paid');
        }
        $this->_em->flush();
    }


    public function invoiceLists(User $user, $data, $hold = "")
    {
      //  var_dump($data);
        $config = $user->getGlobalOption()->getMedicineConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config) ;
        if($hold == "Hold"){
            $qb->andWhere($qb->expr()->like("s.process", "'$hold%'"  ));
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function salesReverseMigration($config, $data)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->andWhere('s.androidProcess IS NULL');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.created','DESC');
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function updateMedicineSalesTotalPrice(MedicineSales $invoice)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineSalesItem','si')
            ->select('sum(si.subTotal) as subTotal')
            ->addSelect('sum(si.purchasePrice * si.quantity) as purchasePrice')
            ->where('si.medicineSales = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->getQuery()->getOneOrNullResult();

        $subTotal = !empty($total['subTotal']) ? $total['subTotal'] :0;
        $purchasePrice = !empty($total['purchasePrice']) ? $total['purchasePrice'] :0;
        if($subTotal > 0){
            $invoice->setSubTotal(floor($subTotal));
            $invoice->setPurchasePrice(floor($purchasePrice));
            $invoice->setDiscount($this->getUpdateDiscount($invoice,$subTotal));
            $invoice->setNetTotal(floor($subTotal - $invoice->getDiscount()));
            $invoice->setDue(floor($subTotal - $invoice->getDiscount()));

        }else{

            $invoice->setSubTotal(0);
            $invoice->setPurchasePrice(0);
            $invoice->setNetTotal(0);
            $invoice->setDue(0);
            $invoice->setDiscount(0);
            $invoice->setVat(0);
        }
        $em->persist($invoice);
        $em->flush();
        return $invoice;

    }

    public function findAndroidDeviceSales($x)
    {
        $ids = [];
        foreach ($x as $y){
            $ids[]=$y['id'];
        }
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.androidProcess','a');
        $qb->select('a.id as androidId');
        $qb->addSelect('sum(s.subTotal) as subTotal ,sum(s.netTotal) as total ,sum(s.received) as salesReceive ,sum(s.due) as due ,sum(s.discount) as discount , count(s.id) as voucher');
        $qb->where("s.androidProcess IN (:salesId)")->setParameter('salesId', $ids);
        $qb->groupBy('androidId');
        $result = $qb->getQuery()->getArrayResult();
        $array= [];
        foreach ($result as $row ){
            $array[$row['androidId']]= $row;
        }
        return $array;
    }

    public function getUpdateDiscount(MedicineSales $invoice,$subTotal)
    {
        if($invoice->getDiscountType() == 'flat'){
            $discount = $invoice->getDiscountCalculation();
        }else{
            $discount = ($subTotal * $invoice->getDiscountCalculation())/100;
        }
        return round($discount,2);
    }

    public function updatePaymentReceive(MedicineSales $invoice)
    {
        $em = $this->_em;
        $res = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineTreatmentPlan','si')
            ->select('sum(si.price) as subTotal ,sum(si.payment) as payment ,sum(si.discount) as discount')
            ->where('si.medicineInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->andWhere('si.status = :status')
            ->setParameter('status', 1)
            ->getQuery()->getOneOrNullResult();
        $subTotal = !empty($res['subTotal']) ? $res['subTotal'] :0;
        $payment = !empty($res['payment']) ? $res['payment'] :0;
        $discount = !empty($res['discount']) ? $res['discount'] :0;
        $invoice->setSubTotal($subTotal);
        $invoice->setPayment($payment);
        $invoice->setDiscount($discount);
        $invoice->setTotal($invoice->getSubTotal() - $discount);
        $invoice->setDue($invoice->getTotal() - $invoice->getPayment());
        $em->flush();

    }

    public function getCulculationVat(MedicineSales $sales,$totalAmount)
    {
        $vat = ( ($totalAmount * (int)$sales->getMedicineConfig()->getVatPercentage())/100 );
        return round($vat);
    }

    public function reportSalesOverview(User $user ,$data)
    {

        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->select('sum(s.subTotal) as subTotal , sum(s.netTotal) as total ,sum(s.received) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function androidDeviceSalesOverview(GlobalOption $option ,$data)
    {
        $config =  $option->getMedicineConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        $qb->select('sum(s.netTotal) as total ,sum(s.received) as salesReceive , count(s.id) as voucher');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config);
        $qb->andWhere('s.process = :process')->setParameter('process', 'Done');
        $qb->andWhere('s.androidDevice = :device')->setParameter('device', $data['device']);
        $this->handleSearchBetween($qb,$data);
        return $qb->getQuery()->getOneOrNullResult();
    }


    public  function reportSalesItemPurchaseSalesOverview(User $user, $data = array()){

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.medicineSalesItems','si');
        $qb->select('SUM(si.quantity) AS quantity');
        $qb->addSelect('COUNT(si.id) AS totalItem');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice) AS totalPurchase');
        $qb->addSelect('SUM(si.quantity * si.salesPrice) AS totalSales');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        if ($userBranch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $userBranch);
        }
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function reportSalesTransactionOverview(User $user , $data = array())
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.transactionMethod','t');
        $qb->select('t.name as transactionName , sum(s.subTotal) as subTotal , sum(s.netTotal) as total ,sum(s.received) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $this->handleSearchBetween($qb,$data);
        if ($userBranch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $userBranch);
        }
        $qb->groupBy("s.transactionMethod");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function reportSalesProcessOverview(User $user,$data)
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->select('s.process as name , sum(s.subTotal) as subTotal , sum(s.netTotal) as total ,sum(s.received) as totalPayment , count(s.id) as totalVoucher, sum(s.due) as totalDue, sum(s.discount) as totalDiscount, sum(s.vat) as totalVat');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $this->handleSearchBetween($qb,$data);
        if ($userBranch){
            $qb->andWhere("s.branches = :branch")->setParameter('branch', $userBranch);
        }
        $qb->groupBy("s.process");
        $res = $qb->getQuery();
        return $result = $res->getArrayResult();
    }

    public function dailySalesPrice(User $user , $data = [])
    {
        $option = $user->getGlobalOption()->getMedicineConfig()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(invoice.created,'%d-%m-%Y') as date ,COALESCE(SUM(invoice.netTotal),0) as salesPrice
                FROM medicine_sales as invoice
                WHERE invoice.medicineConfig_id = :option AND MONTHNAME(invoice.created) =:month AND YEAR(invoice.created) =:year AND invoice.process =:process 
                GROUP BY date";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('option', $option);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->bindValue('process', 'Done');
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = [];
        foreach ($results as $result){
            $arrays[$result['date']] = $result;
        }
        return $arrays;
    }

    public function dailySalesPurchasePrice(User $user, $data = [])
    {
        $option = $user->getGlobalOption()->getMedicineConfig()->getId();
        $compare = new \DateTime();
        $month =  $compare->format('F');
        $year =  $compare->format('Y');
        $month = isset($data['month'])? $data['month'] :$month;
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT DATE_FORMAT(invoice.created,'%d-%m-%Y') as date,COALESCE(SUM(salesItem.quantity * salesItem.purchasePrice),0) as purchasePrice
                FROM medicine_sales as invoice
                JOIN medicine_sales_item as salesItem ON invoice.id = salesItem.medicineSales_id
                WHERE invoice.medicineConfig_id = :option AND MONTHNAME(invoice.created) =:month AND YEAR(invoice.created) =:year AND invoice.process =:process 
                GROUP BY date";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('option', $option);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->bindValue('process', 'Done');
        $stmt->execute();
        $results =  $stmt->fetchAll();
        $arrays = [];
        foreach ($results as $result){
            $arrays[$result['date']] = $result;
        }
        return $arrays;
    }

	public function medicineSalesMonthly(User $user , $data = array())
	{

		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$compare = new \DateTime();
		$year =  $compare->format('Y');
		$year = isset($data['year'])? $data['year'] :$year;
		$sql = "SELECT MONTH (sales.created) as month,SUM(sales.netTotal) AS total
                FROM medicine_sales as sales
                WHERE sales.medicineConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year
                GROUP BY month ORDER BY month ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->execute();
		$result =  $stmt->fetchAll();
		return $result;


	}

    public function medicineSalesDaily(User $user , $data = array())
	{

		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$compare = new \DateTime('now');
		$year =  $compare->format('Y');
		$year = isset($data['year'])? $data['year'] :$year;
        $month = isset($data['month'])? $data['month'] :$compare->format('m');
		$sql = "SELECT DAY (sales.created) as day,SUM(sales.netTotal) AS total
                FROM medicine_sales as sales
                WHERE sales.medicineConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year AND MONTH(sales.created) =:month
                GROUP BY day ORDER BY day ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->bindValue('month', $month);
		$stmt->execute();
		$result =  $stmt->fetchAll();
	    $medicineSalesMonthlyArr = array();
        foreach($result as $row) {
            $medicineSalesMonthlyArr[$row['day']] = $row['total'];
        }
        return $medicineSalesMonthlyArr;


	}

    public function medicineSalesHourly(User $user , $data = array())
	{

		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$compare = new \DateTime('now');
		$year =  $compare->format('Y');
        $year = isset($data['year'])? $data['year'] :$year;
        $month = isset($data['month'])? $data['month'] :$compare->format('m');
        $day = isset($data['day'])? $data['day'] :$compare->format('d');
		$sql = "SELECT HOUR(sales.created) as hour,SUM(sales.netTotal) AS total
                FROM medicine_sales as sales
                WHERE sales.medicineConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year AND MONTH (sales.created) =:month AND DAY(sales.created) =:day
                GROUP BY hour ORDER BY hour ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->bindValue('month', $month);
		$stmt->bindValue('day', $day);
		$stmt->execute();
		$result =  $stmt->fetchAll();
        $medicineSalesMonthlyArr = array();
        foreach($result as $row) {
            $medicineSalesMonthlyArr[$row['hour']] = $row['total'];
        }
        return $medicineSalesMonthlyArr;


	}

    public function salesReport( User $user , $data)
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.customer', 'c');
        $qb->leftJoin('s.transactionMethod', 't');
        $qb->addSelect('t.name as transactionMethod');
        $qb->addSelect('s.id as id');
        $qb->addSelect('s.created as created');
        $qb->addSelect('s.invoice as invoice');
        $qb->addSelect('(s.due) as due');
        $qb->addSelect('(s.subTotal) as subTotal');
        $qb->addSelect('(s.netTotal) as total');
        $qb->addSelect('(s.received) as payment');
        $qb->addSelect('(s.discount) as discount');
        $qb->addSelect('c.name as name','c.mobile as mobile');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        if(!empty($userBranch)){
            $qb->andWhere("s.branches =".$userBranch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('s.updated','DESC');
        $result = $qb->getQuery();
        return $result;

    }

    public function salesUserReport( User $user , $data)
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->select('u.username as salesBy');
        $qb->addSelect('u.id as userId');
        $qb->addSelect('SUM(s.due) as due');
        $qb->addSelect('SUM(s.subTotal) as subTotal');
        $qb->addSelect('SUM(s.netTotal) as total');
        $qb->addSelect('SUM(s.received) as payment');
        $qb->addSelect('SUM(s.discount) as discount');
        $qb->addSelect('SUM(s.vat) as vat');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        if(!empty($userBranch)){
            $qb->andWhere("s.branches =".$userBranch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->groupBy('salesBy');
        $qb->orderBy('total','DESC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function salesPurchasePriceReport(User $user,$data,$x)
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $ids = array();
        foreach ($x as $y){
            $ids[]=$y['id'];
        }

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.medicineSalesItems','si');
        $qb->select('s.id as salesId');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        $qb->andWhere("s.id IN (:salesId)")->setParameter('salesId', $ids);
        if(!empty($userBranch)){
            $qb->andWhere("s.branches =".$userBranch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('totalPurchaseAmount','DESC');
        $qb->groupBy('salesId');
        $result = $qb->getQuery()->getArrayResult();
        $array= array();
        foreach ($result as $row ){
            $array[$row['salesId']]= $row['totalPurchaseAmount'];
        }
        return $array;
    }



	public  function reportSalesItem(User $user, $data=''){

		$userBranch = $user->getProfile()->getBranches();
		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$group = isset($data['group']) ? $data['group'] :'medicineStock';

		$qb = $this->createQueryBuilder('s');
		$qb->join('s.medicineSalesItems','si');
		$qb->join('si.medicineStock','mds');
		$qb->select('SUM(si.quantity) AS quantity');
		$qb->addSelect('SUM(si.quantity * si.discountPrice ) AS salesPrice');
		$qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS purchasePrice');
		$qb->addSelect('mds.name AS name');
		$qb->where('s.medicineConfig = :config');
		$qb->setParameter('config', $config);
		$qb->andWhere('s.process = :process');
		$qb->setParameter('process', 'Done');
		$qb->groupBy('si.medicineStock');
		$qb->orderBy('mds.name','ASC');
		return $qb->getQuery()->getArrayResult();
	}

    public  function reportSalesStockItem(User $user, $data=''){

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();
        $group = isset($data['group']) ? $data['group'] :'medicineStock';

        $qb = $this->createQueryBuilder('s');
        $qb->join('s.medicineSalesItems','si');
        $qb->join('si.medicinePurchaseItem','item');
        $qb->join('si.medicineStock','mds');
        $qb->select('SUM(si.quantity) AS quantity');
        $qb->addSelect('SUM(si.quantity * si.discountPrice ) AS salesPrice');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS purchasePrice');
        $qb->addSelect('mds.name AS name');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        if($group == 'medicinePurchaseItem') {
            $qb->addSelect('item.barcode AS barcode');
        }
        $this->handleSearchStockBetween($qb,$data);
        if ($userBranch){
            $qb->andWhere("s.branches = :branch");
            $qb->setParameter('branch', $userBranch);
        }
        $qb->groupBy('si.'.$group);
        $qb->orderBy('s.created','DESC');
        return $qb;
    }

    public function monthlySales(User $user , $data =array())
    {

        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $compare = new \DateTime();
        $year =  $compare->format('Y');
        $year = isset($data['year'])? $data['year'] :$year;
        $sql = "SELECT sales.salesBy_id as salesBy, MONTH (sales.created) as month,SUM(sales.netTotal) AS total
                FROM medicine_sales as sales
                WHERE sales.medicineConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year
                GROUP BY month , salesBy ORDER BY salesBy ASC";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('config', $config);
        $stmt->bindValue('process', 'Done');
        $stmt->bindValue('year', $year);
        $stmt->execute();
        $result =  $stmt->fetchAll();
        return $result;


    }

	public function currentMonthSales(User $user , $data =array())
	{


		$config =  $user->getGlobalOption()->getMedicineConfig()->getId();
		$compare    = new \DateTime();
		$year       = $compare->format('Y');
		$month      = $compare->format('m');
		$year       = isset($data['year'])? $data['year'] :$year;

		$sql = "SELECT sales.salesBy_id as salesBy, MONTH (sales.created) as month, SUM(sales.netTotal) AS total
                FROM medicine_sales as sales
                WHERE sales.medicineConfig_id = :config AND sales.process = :process  AND YEAR(sales.created) =:year AND MONTH(sales.created) =:month
                GROUP BY month , salesBy ORDER BY salesBy ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Done');
		$stmt->bindValue('year', $year);
		$stmt->bindValue('month', $month);
		$stmt->execute();
		$result =  $stmt->fetchAll();
		return $result;


	}

    public function salesUserPurchasePriceReport(User $user,$data)
    {
        $userBranch = $user->getProfile()->getBranches();
        $config =  $user->getGlobalOption()->getMedicineConfig()->getId();

        $qb = $this->createQueryBuilder('s');
        $qb->leftJoin('s.salesBy', 'u');
        $qb->join('s.medicineSalesItems','si');
        $qb->select('u.username as salesBy');
        $qb->addSelect('SUM(si.quantity * si.purchasePrice ) AS totalPurchaseAmount');
        $qb->where('s.medicineConfig = :config');
        $qb->setParameter('config', $config);
        $qb->andWhere('s.process = :process');
        $qb->setParameter('process', 'Done');
        if(!empty($userBranch)){
            $qb->andWhere("s.branches =".$userBranch);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('totalPurchaseAmount','DESC');
        $qb->groupBy('salesBy');
        $result = $qb->getQuery()->getArrayResult();
        $array= array();
        foreach ($result as $row ){
            $array[$row['salesBy']]= $row['totalPurchaseAmount'];
        }
        return $array;
    }

    public function insertApiSales(GlobalOption $option,MedicineAndroidProcess $process)
    {
            $em = $this->_em;
            $items = json_decode($process->getJsonItem(),true);
            $config = $option->getMedicineConfig()->getId();
            if($items){
                foreach ($items as $item):
                    $sales = new MedicineSales();
                    $sales->setMedicineConfig($option->getMedicineConfig());
                    $sales->setAndroidDevice($process->getAndroidDevice());
                    $sales->setAndroidProcess($process);
                    $sales->setInvoice($item['invoiceId']);
                    $sales->setDeviceSalesId($item['invoiceId']);
                    $sales->setSubTotal($item['subTotal']);
                    if(isset($item['discount']) and $item['discount'] > 0){
                        $sales->setDiscount($item['discount']);
                        $sales->setDiscountType($item['discountType']);
                        $sales->setDiscountCalculation($item['discountCalculation']);
                    }
                    $sales->setNetTotal($item['total']);
                    if($item['total'] < $item['receive']){
                        $sales->setReceived($item['total']);
                    }else{
                        $sales->setReceived($item['receive']);
                        $sales->setDue($item['total'] - $item['receive']);
                    }
                    $sales->setVat($item['vat']);
                    if(isset($item['transactionMethod']) and $item['transactionMethod']){
                        $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>$item['transactionMethod']));
                        if($method){
                            $sales->setTransactionMethod($method);
                        }
                    }elseif(isset($item['transactionMethod']) and empty($item['transactionMethod']) and $sales->getReceived() > 0){
                        $method = $em->getRepository('SettingToolBundle:TransactionMethod')->findOneBy(array('slug'=>'cash'));
                        $sales->setTransactionMethod($method);
                    }
                    if(isset($item['bankAccount']) and $item['bankAccount'] > 0 ){
                        $bank = $em->getRepository('AccountingBundle:AccountBank')->find($item['bankAccount']);
                        if($bank){
                            $sales->setAccountBank($bank);
                        }
                        if(isset($item['paymentCard']) and $item['paymentCard']){
                            $card = $em->getRepository('SettingToolBundle:PaymentCard')->find($item['paymentCard']);
                            $sales->setPaymentCard($card);
                        }
                    }
                    if(isset($item['paymentCardNo']) and $item['paymentCardNo']) {
                        $sales->setCardNo($item['paymentCardNo']);
                    }
                    if(isset($item['transactionId']) and $item['transactionId']) {
                        $sales->setCardNo($item['transactionId']);
                    }
                    if(isset($item['mobileBankAccount']) and $item['mobileBankAccount'] > 0){
                        $mobile = $em->getRepository('AccountingBundle:AccountMobileBank')->find($item['mobileBankAccount']);
                        if($mobile){
                            $sales->setAccountMobileBank($mobile);
                        }
                    }
                    if(isset($item['paymentMobile']) and $item['paymentMobile']) {
                        $sales->setPaymentMobile($item['paymentMobile']);
                    }
                    if(isset($item['customerName']) and $item['customerName'] and isset($item['customerMobile']) and $item['customerMobile']){
                        $customer = $em->getRepository('DomainUserBundle:Customer')->newExistingCustomerForSales($option,$item['customerMobile'],$item);
                        $sales->setCustomer($customer);
                    }elseif(($item['customerId']) and $item['customerId'] > 0 ){
                        $customer = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('globalOption'=>$option,'id'=>$item['customerId']));
                        $sales->setCustomer($customer);
                    }else{
                        $customer = $em->getRepository('DomainUserBundle:Customer')->findOneBy(array('globalOption' => $option, 'mobile' => $option->getMobile()));
                        $sales->setCustomer($customer);
                    }
                    if(($item['createdBy']) and $item['createdBy'] > 0){
                        $createdBy = $em->getRepository('UserBundle:User')->find($item['createdBy']);
                        $sales->setCreatedBy($createdBy);
                    }
                    if(($item['salesBy']) and $item['salesBy'] > 0){
                        $salesBy = $em->getRepository('UserBundle:User')->find($item['salesBy']);
                        $sales->setSalesBy($salesBy);
                    }
                    if($sales->getTransactionMethod() and $sales->getTransactionMethod()->getSlug() == 'mobile' and $sales->getAccountMobileBank() and $sales->getAccountMobileBank()->getServiceCharge() > 0){
                        $serviceCharge = $this->getCalculationBankServiceCharge($sales);
                        $sales->setDiscount($serviceCharge['discount']);
                        $sales->setNetTotal($serviceCharge['total']);
                        $sales->setReceived($serviceCharge['total']);
                    }elseif($sales->getTransactionMethod() and $sales->getTransactionMethod()->getSlug() == 'bank' and $sales->getAccountBank() and $sales->getAccountBank()->getServiceCharge() > 0){
                        $serviceCharge = $this->getCalculationBankServiceCharge($sales);
                        $sales->setDiscount($serviceCharge['discount']);
                        $sales->setNetTotal($serviceCharge['total']);
                        $sales->setReceived($serviceCharge['total']);
                    }
                    $created = new \DateTime($item['created']);
                    $sales->setCreated($created);
                    $sales->setUpdated($created);
                    $sales->setProcess("Device");
                    $sales->setPaymentStatus("Paid");
                    $em->persist($sales);
                    $em->flush();

                endforeach;
                $this->insertApiSalesItem( $option, $process);
            }
    }

    public function insertApiSalesItem(GlobalOption $option,MedicineAndroidProcess $process){

        $em = $this->_em;
        $conf = $option->getMedicineConfig();

        $items = json_decode($process->getJsonSubItem(),true);
        $numSubItems = count($items);
        $em = $this->_em;
        if($items  and $numSubItems > 0 ) {
            foreach ($items as $item):
                $deviceSalesId = $item['salesId'];
                $sales = $em->getRepository('MedicineBundle:MedicineSales')->findOneBy(array('medicineConfig' => $conf, 'deviceSalesId' => $deviceSalesId));
                if ($sales) {
                    $salesItem = new MedicineSalesItem();
                    $salesItem->setAndroidProcess($process);
                    $salesItem->setMedicineSales($sales);
                    $stockId = $em->getRepository('MedicineBundle:MedicineStock')->find($item['stockId']);
                    if ($stockId) {
                        $salesItem->setMedicineStock($stockId);
                        $salesItem->setPurchasePrice($stockId->getAveragePurchasePrice());
                        $salesItem->setMrpPrice($stockId->getSalesPrice());
                    }
                    $salesItem->setQuantity($item['quantity']);
                    if (isset($item['unitPrice']) and $item['unitPrice']) {
                        $salesItem->setSalesPrice(floatval($item['unitPrice']));
                    }
                    $salesItem->setSubTotal($item['subTotal']);
                    $em->persist($salesItem);
                    $em->flush();
                    if ($salesItem->getMedicineStock()) {
                        $em->getRepository('MedicineBundle:MedicineStock')->updateRemovePurchaseQuantity($salesItem->getMedicineStock(), 'sales');
                    }
                }
            endforeach;
        }
        $countRecords = $this->countNumberSalesSubItem($process->getId());
        if( $countRecords > 0 and $process->getItemCount() != $countRecords){
            $batch = $process->getId();
            $remove = $em->createQuery("DELETE MedicineBundle:MedicineSalesItem e WHERE e.androidProcess = {$batch}");
            $remove->execute();
            return "failed";
        }elseif(empty($items) and $numSubItems == 0 ) {
            return "failed";
        }
        return "success";
    }

    public function updateApiSalesPurchasePrice($android)
    {
        $sql = "Update medicine_sales as sales
            inner join (
              select ele.medicineSales_id, ROUND(COALESCE(SUM(ele.quantity * ele.purchasePrice),0),2) as purchasePrice
              from medicine_sales_item as ele
              where ele.medicineSales_id is not NULL AND sales.androidProcess_id =:android
              group by ele.medicineSales_id
            ) as pa on sales.id = pa.medicineSales_id
            set sales.purchasePrice = pa.purchasePrice";
        $qb = $this->getEntityManager()->getConnection()->prepare($sql);
        $qb->bindValue('android', $android);
        $qb->execute();
    }

    public function insertApiSalesManual(GlobalOption $option,MedicineAndroidProcess $process)
    {
        $em = $this->_em;

        $items = json_decode($process->getJsonItem(),true);
        $subItems = json_decode($process->getJsonSubItem(),true);

        $numItems = count($items);
        $numSubItems = count($subItems);
        $em = $this->_em;
        if($numItems > 0 and $numSubItems > 0 ){
        $rows = '';
        $config = $option->getMedicineConfig()->getId();
        $androidProcess_id = $process->getId();
        $androidDevice_id = $process->getAndroidDevice()->getId();
        $optionId = $option->getId();

        $default = $em->getRepository(Customer::class)->findOneBy(array('globalOption'=>$option,'name'=>'Default'));
        $i = 0;
        $comma =',';
            foreach ($items as $item):

                $accountBank = (isset($item['bankAccount']) and $item['bankAccount']) ?  $item['bankAccount'] : 'NULL';
                $mobileBankAccount = (isset($item['mobileBankAccount']) and $item['mobileBankAccount']) ?  $item['mobileBankAccount'] : 'NULL';
                $paymentCard = (isset($item['paymentCard']) and $item['paymentCard']) ?  $item['paymentCard'] : 'NULL';
                $flat = (isset($item['discountType']) and $item['discountType']) ?  $item['discountType'] : 'flat';
                $receive = (isset($item['receive']) and $item['receive']) ?  $item['receive'] : 0;
                $due = 0;
                $cardCommission = 0;
                if(isset($item['transactionMethod']) and $item['transactionMethod'] == 'cash'){
                    $method = 1;
                    $discount = ($item['discount']);
                    $total = ($item['total']);
                    if($item['total'] < $receive){
                        $received = ($item['total']);
                    }else{
                        $received = $receive;
                        $due = ($item['total'] - $receive);
                    }
                }elseif(isset($item['transactionMethod']) and $item['transactionMethod'] == 'bank'){
                    $method = 2;
                    $bank = $em->getRepository(AccountBank::class)->find($accountBank);
                    if($bank and $bank->getServiceCharge() > 0) {

                        $serviceCharge = $this->getCalculationBankServiceChargeManual($item,$bank->getServiceCharge());
                        $discount = ($serviceCharge['discount']);
                        $total = ($serviceCharge['total']);
                        $received = ($serviceCharge['total']);
                        $cardCommission = ($serviceCharge['cardCommission']);

                    }
                }elseif(isset($item['transactionMethod']) and $item['transactionMethod'] == 'mobile'){
                    $method = 3;
                    $mobile = $em->getRepository(AccountMobileBank::class)->find($mobileBankAccount);
                    if($mobile and $mobile->getServiceCharge() > 0) {

                        $serviceCharge = $this->getCalculationBankServiceChargeManual($item,$mobile->getServiceCharge());
                        $discount = ($serviceCharge['discount']);
                        $total = ($serviceCharge['total']);
                        $received = ($serviceCharge['total']);
                        $cardCommission = ($serviceCharge['cardCommission']);

                    }
                }else{
                    $method = 'NULL';
                }

                if(isset($item['customerName'])  and $item['customerName'] == 'Default'){
                    $customer = $default->getId();
                }elseif(isset($item['customerName']) and $item['customerName'] and isset($item['customerMobile']) and $item['customerMobile']){
                    $customer = $em->getRepository('DomainUserBundle:Customer')->newExistingCustomerForMedicineSales($option,$item['customerMobile'],$item)->getId();
                }else{
                    $customer = $default->getId();
                }
                if(++$i === $numItems) { $comma =  ""; }
                $device ="Done";
                $rows .='('.(int)$config.',"'.(string)$item['created'].'","'.(string)$item['created'].'",'.(string)$item['invoiceId'].','.(string)$item['invoiceId'].','.(int)$customer.','.(int)$item['createdBy'].','.(int)$item['salesBy'].','.(int)$item['createdBy'].','.(int)$method.','.(float)$item['subTotal'].','.(float)$discount.','.(float)$total.','.(float)$received.','.(float)$due.',"'.(string)$flat.'",'.(int)$item['discountCalculation'].','.$cardCommission.','.$accountBank.','.$mobileBankAccount.','.$paymentCard.','.(int)$androidProcess_id.','.(int)$androidDevice_id.',"'.(string)$device.'")'.$comma;

            endforeach;

            $sql = "INSERT INTO medicine_sales (medicineConfig_id,created,updated,invoice,deviceSalesId,customer_id,createdBy_id,salesBy_id,approvedBy_id,transactionMethod_id,subTotal,discount,netTotal,received,due,discountType,discountCalculation,cardCommission,accountBank_id,accountMobileBank_id,cardNo,androidProcess_id,androidDevice_id,process) VALUES {$rows}";
            $qb = $this->getEntityManager()->getConnection()->prepare($sql);
            $qb->execute();

            $stockIds = array();
            if($subItems  and $numSubItems > 0 ) {
                foreach ($subItems as $sub):
                    $deviceSalesId = $sub['salesId'];
                    $sales = $em->getRepository('MedicineBundle:MedicineSales')->findOneBy(array('medicineConfig' => $config, 'deviceSalesId' => $deviceSalesId));
                    if ($sales) {
                        $salesItem = new MedicineSalesItem();
                        $salesItem->setAndroidProcess($process);
                        $salesItem->setMedicineSales($sales);
                        $stockId = $em->getRepository('MedicineBundle:MedicineStock')->find($sub['stockId']);
                        if ($stockId) {
                            $stockIds[] = $stockId->getId();
                            $salesItem->setMedicineStock($stockId);
                            $salesItem->setPurchasePrice($stockId->getAveragePurchasePrice());
                            $salesItem->setMrpPrice($stockId->getSalesPrice());
                            $salesItem->setSalesPrice($stockId->getSalesPrice());
                        }
                        $salesItem->setQuantity($sub['quantity']);
                        if (isset($sub['unitPrice']) and $sub['unitPrice']) {
                            $salesItem->setSalesPrice(floatval($sub['unitPrice']));
                        }
                        $salesItem->setSubTotal($sub['subTotal']);
                        $em->persist($salesItem);

                    }
                endforeach;
                $em->flush();
            }


            $array = implode(",",$stockIds);
            $sqlStockRemin = "UPDATE medicine_stock as stock
            inner join (
              select ele.medicineStock_id, ROUND(COALESCE(SUM(ele.quantity),0),2) as salesQuantity
              from medicine_sales_item as ele
              join medicine_stock  as ms ON  ele.medicineStock_id = ms.id
              where ele.medicineStock_id IN ({$array}) AND ms.medicineConfig_id = {$config}
              group by ele.medicineStock_id
            ) as pa on stock.id = pa.medicineStock_id
  SET stock.remainingQuantity = ((COALESCE(stock.openingQuantity,0) + COALESCE(stock.purchaseQuantity,0) + COALESCE(stock.salesReturnQuantity,0)+ COALESCE(stock.bonusQuantity,0)+ COALESCE(stock.bonusAdjustment,0)+ COALESCE(stock.adjustmentQuantity,0)) - (COALESCE(pa.salesQuantity,0) + COALESCE(stock.purchaseReturnQuantity,0) + COALESCE(stock.damageQuantity,0)))
 , stock.salesQuantity = pa.salesQuantity";
            $qb5 = $this->getEntityManager()->getConnection()->prepare($sqlStockRemin);
            $qb5->execute();

            $sqlPurchasePrice = "Update medicine_sales as sales
            inner join (
              select ele.medicineSales_id, ROUND(COALESCE(SUM(ele.quantity * ele.purchasePrice),0),2) as purchasePrice
              from medicine_sales_item as ele
              where ele.medicineSales_id is not NULL AND ele.androidProcess_id = {$androidProcess_id}
              group by ele.medicineSales_id
            ) as pa on sales.id = pa.medicineSales_id
            set sales.purchasePrice = pa.purchasePrice";
            $qbPurchasePrice = $this->getEntityManager()->getConnection()->prepare($sqlPurchasePrice);
            $qbPurchasePrice->execute();

            $accountCash = $em->createQuery("DELETE AccountingBundle:AccountSales e WHERE e.globalOption = '{$optionId}' AND e.androidProcessId = '{$androidProcess_id}' AND e.processHead = 'medicine' AND e.processType = 'sales' ");
            if(!empty($accountCash)){
                $accountCash->execute();
            }

            $elem = "INSERT INTO account_sales
    (`globalOption_id`,medicine_sales_id,transactionMethod_id,`accountBank_id`,`accountMobileBank_id`,`customer_id`,`totalAmount`,`purchasePrice`, `amount`,`createdBy_id`, `approvedBy_id`,`sourceInvoice`,`processHead`,`processType`,`process`,`created`,updated,accountRefNo,androidProcessId)
  SELECT
    $optionId,id,transactionMethod_id,accountBank_id,accountMobileBank_id,customer_id,netTotal, `purchasePrice`,received,`createdBy_id`, `approvedBy_id`, `invoice`, 'medicine', 'sales', 'approved',`created`,`updated`,invoice,$androidProcess_id
  FROM medicine_sales
  WHERE medicineConfig_id ={$config} AND androidProcess_id={$androidProcess_id}";
            $qb1 = $this->getEntityManager()->getConnection()->prepare($elem);
            $qb1->execute();


            $elem1 = "INSERT INTO AccountCash
    (`globalOption_id`,accountSales_id,transactionMethod_id,`accountBank_id`,`accountMobileBank_id`,`debit`,`createdBy_id`, `accountRefNo`,`processHead`,`created`,updated,accountHead_id)
  SELECT 
    $optionId,id,transactionMethod_id,accountBank_id,accountMobileBank_id,amount,`createdBy_id`, `accountRefNo`, 'Sales', `created`,`updated`,
    (case when (account_sales.transactionMethod_id > 1 ) THEN 10 ELSE  30  END) as head
  FROM account_sales
  WHERE globalOption_id ={$optionId} AND androidProcessId={$androidProcess_id}";
            $qbCash = $this->getEntityManager()->getConnection()->prepare($elem1);
            $qbCash->execute();

            $total = $em->createQueryBuilder()
                ->from('MedicineBundle:MedicineSales','si')
                ->select('count(si.id) as totalCount')
                ->where("si.androidProcess={$androidProcess_id}")
                ->getQuery()->getSingleResult();
            return $total['totalCount'];
        }
        return 0;

    }


    public function countNumberSalesItem($batch)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineSales','si')
            ->select('count(si.id) as totalCount')
            ->where("si.androidProcess={$batch}")
            ->getQuery()->getOneOrNullResult();
        return $total['totalCount'];

    }

    public function countNumberSalesSubItem($batch)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('MedicineBundle:MedicineSalesItem','si')
            ->select('count(si.id) as totalCount')
            ->where("si.androidProcess={$batch}")
            ->getQuery()->getOneOrNullResult();
        return $total['totalCount'];

    }

    public function androidDeviceSales($config)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.createdBy', 'u');
        $qb->join('e.androidDevice','a');
        $qb->select('u.username as salesBy');
        $qb->addSelect('a.id as deviceId','a.device as device');
        $qb->addSelect('COUNT(e.id) as totalInvoice','SUM(e.subTotal) as subTotal','SUM(e.discount) as discount','SUM(e.netTotal) as total','SUM(e.received) as received','SUM(e.due) as due');
        $qb->where('e.medicineConfig = :config')->setParameter('config', $config);
        $qb->andWhere('e.deviceApproved = :deviceApproved')->setParameter('deviceApproved', 0);
        $compareTo = new \DateTime("now");
        $created =  $compareTo->format('Y-m-d 00:00:00');
        $qb->andWhere("e.created >= :createdStart")->setParameter('createdStart', $created);
        $createdEnd =  $compareTo->format('Y-m-d 23:59:59');
        $qb->andWhere("e.created <= :createdEnd")->setParameter('createdEnd', $createdEnd);
        $qb->groupBy('e.androidDevice');
        $qb->groupBy('e.createdBy');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function androidDeviceSalesProcess($device)
    {
        $em = $this->_em;
        $entities = $this->findBy(array('androidDevice' => $device,'deviceApproved' => 0));

        /* @var $entity MedicineSales */

        foreach ($entities as $entity){

            $entity->setProcess('Done');
            $entity->setSalesBy($entity->getCreatedBy());
            $entity->setApprovedBy($entity->getCreatedBy());
            $entity->setUpdated($entity->getCreated());
            $entity->setDeviceApproved(true);
            $em->flush();
            $em->getRepository('MedicineBundle:MedicineStock')->getSalesUpdateQnt($entity);
            $em->getRepository('AccountingBundle:AccountSales')->insertMedicineAccountInvoice($entity);
        }
    }

    public function deleteSalesRecords(MedicineConfig $config){
      //  $this->_em->getRepository('AccountingBundle:AccountSales')->accountMedicineSalesReverse($sales);
    }

    public function getCalculationBankServiceCharge(MedicineSales $entity){

        if($entity->getTransactionMethod()->getSlug() == 'mobile' and !empty($entity->getAccountMobileBank()) and !empty($entity->getAccountMobileBank()->getServiceCharge())){
            $serviceCharge = $entity->getAccountMobileBank()->getServiceCharge();
            $totalServiceCharge = (($entity->getNetTotal() * $serviceCharge)/100);
            $discount = round($entity -> getDiscount() + $totalServiceCharge);
            $total = ( $entity->getSubTotal()- $discount);
            return $data = ['total'=>$total,'discount' => $discount];
        }elseif($entity->getTransactionMethod()->getSlug() == 'bank' and !empty($entity->getAccountBank()) and !empty($entity->getAccountBank()->getServiceCharge())){
            $serviceCharge = $entity->getAccountBank()->getServiceCharge();
            $totalServiceCharge = (($entity->getNetTotal() * $serviceCharge)/100);
            $discount = round($entity -> getDiscount() + $totalServiceCharge);
            $total = ( $entity->getSubTotal()- $discount);
            return $data = ['total' => $total,'discount' => $discount];
        }
    }

    public function getCalculationBankServiceChargeManual($data,$charge){

        $totalServiceCharge = (($data['total'] * $charge)/100);
        $discount = round($data['discount'] + $totalServiceCharge);
        $total = ( $data['subTotal'] - $discount);
        return $data = array('total' => $total,'discount' => $discount,'cardCommission' => $totalServiceCharge);
    }

    public function androidDuplicateSalesDelete(MedicineConfig $config , MedicineAndroidProcess $android)
    {
        $sql = "DELETE sales FROM medicine_sales_item as salesItem
RIGHT JOIN medicine_sales as sales ON salesItem.`medicineSales_id` = sales.id
WHERE  salesItem.`medicineSales_id` IS NULL AND sales.androidProcess_id =:android AND sales.medicineConfig_id =:config";
        $qb = $this->getEntityManager()->getConnection()->prepare($sql);
        $qb->bindValue('config', $config->getId());
        $qb->bindValue('android', $android->getId());
        $qb->execute();
    }



    public function androidMissingSalesImport(MedicineConfig $conf,MedicineSales $sales , MedicineAndroidProcess $process){

        $em = $this->_em;
        $items = json_decode($process->getJsonSubItem(),true);
        if($items) {
            foreach ($items as $item):
                if ($sales) {
                    $salesItem = new MedicineSalesItem();
                    $salesItem->setAndroidProcess($process);
                    $salesItem->setMedicineSales($sales);
                    $stockId = $em->getRepository('MedicineBundle:MedicineStock')->find($item['stockId']);
                    if ($stockId) {
                        $salesItem->setMedicineStock($stockId);
                        $salesItem->setPurchasePrice($stockId->getAveragePurchasePrice());
                    }
                    $salesItem->setQuantity($item['quantity']);
                    if (isset($item['unitPrice']) and $item['unitPrice']) {
                        $salesItem->setSalesPrice(floatval($item['unitPrice']));
                    }
                    $salesItem->setSubTotal($item['subTotal']);
                    $em->persist($salesItem);
                    $em->flush();
                    if ($salesItem->getMedicineStock()) {
                        $em->getRepository('MedicineBundle:MedicineStock')->updateRemovePurchaseQuantity($salesItem->getMedicineStock(), 'sales');
                    }
                }
            endforeach;
        }

    }

    public function insertEcommerceDirectOrder(Order $order)
    {
        $em = $this->_em;
        $option = $order->getGlobalOption();

        $sales = new MedicineSales();
        $sales->setMedicineConfig($option->getMedicineConfig());
        $sales->setDeviceSalesId($order->getInvoice());
        $sales->setOrder($order);
        $sales->setSubTotal($order->getSubTotal());
        $sales->setDiscount($order->getDiscount());
        $sales->setNetTotal($order->getTotal());
        $sales->setPayment($order->getReceive());
        $sales->setPayment($order->getReceive());
        $sales->setVat($order->getVat());
        $sales->setDeliveryCharge($order->getShippingCharge());
        $sales->setDue($order->getDue());
        $sales->setTransactionMethod($order->getTransactionMethod());
        $sales->setTransactionId($order->getTransaction());
        $sales->setPaymentMobile($order->getPaymentMobile());
        if($order->getAccountMobileBank()){
            $sales->setAccountMobileBank($order->getAccountMobileBank());
        }
        $sales->setCreatedBy($order->getProcessBy());
        $sales->setCustomer($order->getCustomer());
        $sales->setCreated($order->getCreated());
        $sales->setUpdated($order->getUpdated());
        $sales->setSalesBy($order->getProcessBy());
        $sales->setProcess("In-progress");
        $sales->setProcess("Ecommerce");
        $em->persist($sales);
        $em->flush();
        $this->insertEcommerecSalesItem($sales,$order);

    }

    private function insertEcommerecSalesItem(MedicineSales $sales,Order $order)
    {
        $em = $this->_em;
        if($order->getsales_items()){

            /* @var $item sales_item */

            foreach ($order->getsales_items() as $item):

                $salesItem = new MedicineSalesItem();
                $salesItem->setMedicineSales($sales);
                $stockId = $item->getItem()->getMedicineItem();
                if ($stockId) {
                    /* @var MedicineStock $stockId */
                    $salesItem->setMedicineStock($stockId);
                    $salesItem->setStockName($stockId);
                    $salesItem->setPurchasePrice($stockId->getAveragePurchasePrice());
                }
                $salesItem->setQuantity($item->getQuantity());
                $salesItem->setMrpPrice(floatval($item->getPrice()));
                $salesItem->setSalesPrice(floatval($item->getPrice()));
                $salesItem->setSubTotal($salesItem->getQuantity() * $salesItem->getSalesPrice());
                $em->persist($salesItem);
                $em->flush();
                $em->getRepository( 'MedicineBundle:MedicineStock' )->updateRemovePurchaseQuantity($stockId, 'sales' );

            endforeach;

        }

    }


    public function apiSalesLists(GlobalOption $option, $search)
    {
        $em = $this->_em;
     //   $customer = $search['customer'];
        $config = $option->getMedicineConfig()->getId();
        $qb = $this->createQueryBuilder('s');
        //  $qb->from(MedicineSales::class,'s');
        // $qb->select('s.invoice');
        $qb->where('s.medicineConfig = :config')->setParameter('config', $config) ;
        $qb->join('s.customer','c');
        //   $qb->andWhere("s.customer = :customer")->setParameter('customer', $customer);
        // $this->handleSearchBetween($qb,$search);
        $qb->setMaxResults(100);
        $qb->orderBy('s.created','DESC');
        $entities = $qb->getQuery()->getResult();
        $data = array();
        /* @var $entity MedicineSales */
        foreach ($entities as $key => $entity):
            if($entity) {
                $data[$key]['sales_id'] = (string)$entity->getId();
                $data[$key]['customer_id'] = (int) $entity->getCustomer()->getId();
                $data[$key]['bankId'] = (int) 0;
                $data[$key]['invoiceFor'] = (string)$entity->getInvoiceFor();
                $data[$key]['deviceSalesId'] = (int)$entity->getDeviceSalesId();
                $data[$key]['cardNo'] = (string)$entity->getCardNo();
                $data[$key]['paymentMobile'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getName():'';
                $data[$key]['paymentInWord'] = '';
                $data[$key]['process'] = $entity->getProcess();
                $data[$key]['discountType'] = $entity->getDiscountType();
                $data[$key]['transactionId'] = $entity->getTransactionId();
                $data[$key]['invoice'] = $entity->getInvoice();
                $data[$key]['subTotal'] = (Double) $entity->getSubTotal();
                $data[$key]['discount'] = (Double) $entity->getDiscount();
                $data[$key]['discountCalculation'] = (Double) $entity->getDiscountCalculation();
                $data[$key]['netTotal'] = (Double) $entity->getNetTotal();
                $data[$key]['purchasePrice'] = (Double) $entity->getPurchasePrice();
                $data[$key]['received'] =(Double) $entity->getReceived();
                $data[$key]['due'] = (Double) $entity->getDue();
                $data[$key]['revised'] = (int) $entity->getRevised();
                $data[$key]['printWithoutDiscount'] = (int) $entity->isPrintWithoutDiscount();
                $data[$key]['customer_name'] = $entity->getCustomer()->getName();
                $data[$key]['customer_mobile'] = $entity->getCustomer()->getMobile();
                $data[$key]['customer_address'] = $entity->getCustomer()->getAddress();
                $data[$key]['created'] = $entity->getCreated()->format('d-m-Y h:i A');
                $data[$key]['updated'] = $entity->getUpdated()->format('d-m-Y h:i A');
                $data[$key]['medicineConfigId'] = (int) 0;
                $data[$key]['transactionMethod'] = ($entity->getTransactionMethod()) ? $entity->getTransactionMethod()->getName():0;
                $data[$key]['transactionMethodId'] = ($entity->getTransactionMethod()) ? $entity->getTransactionMethod()->getId():0;
                $data[$key]['salesBy'] = $entity->getSalesBy()->getUserFullName();
                $data[$key]['salesBy_id'] = $entity->getSalesBy()->getId();
                $data[$key]['createdBy_id'] = $entity->getCreatedBy()->getId();
                $data[$key]['createdBy'] = $entity->getCreatedBy()->getUserFullName();
                $data[$key]['approvedBy_id'] = $entity->getCreatedBy()->getId();
                $data[$key]['accountBank_id'] = ($entity->getAccountBank()) ? $entity->getAccountBank()->getId():0;
                $data[$key]['accountBank_name'] = ($entity->getAccountBank()) ? $entity->getAccountBank()->getName():'';
                $data[$key]['accountMobileBank_id'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getId():0;
                $data[$key]['accountMobileBank_name'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getName():'';
                $data[$key]['paymentCard_id'] = (int) ($entity->getPaymentCard()) ? $entity->getPaymentCard()->getId():0;
                $data[$key]['paymentCard_name'] = ($entity->getPaymentCard()) ? $entity->getPaymentCard()->getName():'';
                $data[$key]['mode'] = (string) $entity->getMode();
                $data[$key]['deliveryCharge'] = (int) $entity->getDeliveryCharge();
                $data[$key]['cardCommission'] = (double) $entity->getCardCommission();
                $data[$key]['isHold'] = (int) 0;
                $data[$key]['vat'] = (Double)$entity->getVat();
                $data[$key]['sd'] = 0;
            }
            endforeach;
            return $data;

    }

    public function apiSalesInvoiceDetails(GlobalOption $option, $id)
    {
        $em     = $this->_em;
        /* @var $entity MedicineSales */
        $entity = $this->findOneBy(array('medicineConfig'=> $option->getMedicineConfig(),'id' => $id));
        $data = array();
        if($entity) {

            $data['sales_id'] = (string)$entity->getId();
            $data['customer_id'] = (int) $entity->getCustomer()->getId();
            $data['bankId'] = (int) 0;
            $data['invoiceFor'] = (string)$entity->getInvoiceFor();
            $data['deviceSalesId'] = (int)$entity->getDeviceSalesId();
            $data['cardNo'] = (string)$entity->getCardNo();
            $data['paymentMobile'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getName():'';
            $data['paymentInWord'] = '';
            $data['process'] = $entity->getProcess();
            $data['discountType'] = $entity->getDiscountType();
            $data['transactionId'] = $entity->getTransactionId();
            $data['invoice'] = $entity->getInvoice();
            $data['subTotal'] = (Double) $entity->getSubTotal();
            $data['discount'] = (Double) $entity->getDiscount();
            $data['discountCalculation'] = (Double) $entity->getDiscountCalculation();
            $data['netTotal'] = (Double) $entity->getNetTotal();
            $data['purchasePrice'] = (Double) $entity->getPurchasePrice();
            $data['received'] = (double) $entity->getReceived();
            $data['due'] = (Double) $entity->getDue();
            $data['revised'] = (int) $entity->getRevised();
            $data['printWithoutDiscount'] = (int) $entity->isPrintWithoutDiscount();
            $data['customer_name'] = $entity->getCustomer()->getName();
            $data['customer_mobile'] = $entity->getCustomer()->getMobile();
            $data['customer_address'] = $entity->getCustomer()->getAddress();
            $data['created'] = $entity->getCreated()->format('d-m-Y h:i A');
            $data['updated'] = $entity->getUpdated()->format('d-m-Y h:i A');
            $data['medicineConfigId'] = (int) 0;
            $data['transactionMethod'] = ($entity->getTransactionMethod()) ? $entity->getTransactionMethod()->getName():0;
            $data['transactionMethodId'] = ($entity->getTransactionMethod()) ? $entity->getTransactionMethod()->getId():0;
            $data['salesBy'] = $entity->getSalesBy()->getUserFullName();
            $data['salesBy_id'] = $entity->getSalesBy()->getId();
            $data['createdBy_id'] = $entity->getCreatedBy()->getId();
            $data['createdBy'] = $entity->getCreatedBy()->getUserFullName();
            $data['approvedBy_id'] = $entity->getCreatedBy()->getId();
            $data['accountBank_id'] = ($entity->getAccountBank()) ? $entity->getAccountBank()->getId():0;
            $data['accountBank_name'] = ($entity->getAccountBank()) ? $entity->getAccountBank()->getName():'';
            $data['accountMobileBank_id'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getId():0;
            $data['accountMobileBank_name'] = ($entity->getAccountMobileBank()) ? $entity->getAccountMobileBank()->getName():'';
            $data['paymentCard_id'] = (int) ($entity->getPaymentCard()) ? $entity->getPaymentCard()->getId():0;
            $data['paymentCard_name'] = ($entity->getPaymentCard()) ? $entity->getPaymentCard()->getName():'';
            $data['mode'] = (string) $entity->getMode();
            $data['deliveryCharge'] = (int) $entity->getDeliveryCharge();
            $data['cardCommission'] = (double) $entity->getCardCommission();
            $data['isHold'] = (int) 0;
            $data['vat'] = (Double) $entity->getVat();
            $data['sd'] = 0;
            if ($entity->getMedicineSalesItems()) {
                /* @var $item MedicineSalesItem */
                foreach ($entity->getMedicineSalesItems() as $i => $item) {
                    $data['sales_item'][$i]['sales_id'] = (string)$item->getId();
                    $data['sales_item'][$i]['barcode'] = (string)$entity->getId();
                    $data['sales_item'][$i]['stockName'] = (string)$item->getMedicineStock()->getName();
                    $data['sales_item'][$i]['brandName'] = (string)$item->getMedicineStock()->getBrandName();
                    $data['sales_item'][$i]['unit'] = ($item->getMedicineStock()->getUnit()) ? (string)$item->getMedicineStock()->getUnit()->getName() : '';
                    $data['sales_item'][$i]['mrpPrice'] = (Double)$item->getMrpPrice();
                    $data['sales_item'][$i]['salesPrice'] = (Double)$item->getSalesPrice();
                    $data['sales_item'][$i]['discountPrice'] = (Double)$item->getDiscountPrice();
                    $data['sales_item'][$i]['purchasePrice'] = (Double)$item->getPurchasePrice();
                    $data['sales_item'][$i]['itemPercent'] = (Double)$item->getItemPercent();
                    $data['sales_item'][$i]['customPrice'] = (Double)$item->getDiscountPrice();
                    $data['sales_item'][$i]['quantity'] = (Double)$item->getQuantity();
                    $data['sales_item'][$i]['subTotal'] = (Double)$item->getSubTotal();
                }

            } else {
                $data['sales_item'] = array();
            }
            return $data;
        }

    }

    public function getApiSalesInvoice(GlobalOption $option, $invoice)
    {
        $em     = $this->_em;
        /* @var $entity MedicineSales */
        $entity = $this->findOneBy(array('medicineConfig'=> $option->getMedicineConfig(),'invoice'=>$invoice));
        $data = array();
        if($entity) {

            $data['id'] = (int)$entity->getId();
            $data['created'] = $entity->getCreated()->format('d-m-Y h:i A');
            $data['invoice'] = $entity->getInvoice();
            $data['customer'] = $entity->getCustomer()->getName();
            $data['customerMobile'] = $entity->getCustomer()->getMobile();
            $data['address'] = $entity->getCustomer()->getAddress();
            $data['method'] = $entity->getTransactionMethod()->getName();
            $data['salesBy'] = $entity->getSalesBy()->getUsername();
            $data['subTotal'] = $entity->getSubTotal();
            $data['discount'] = $entity->getDiscount();
            $data['total'] = $entity->getNetTotal();
            $data['payment'] = $entity->getReceived();
            $data['vat'] = $entity->getVat();
            $data['sd'] = 0;
            if ($entity->getMedicineSalesItems()) {
                /* @var $item MedicineSalesItem */
                foreach ($entity->getMedicineSalesItems() as $i => $item) {
                    $data['sales_item'][$i]['subItemId'] = (integer)$item->getId();
                    $data['sales_item'][$i]['name'] = (string)$item->getMedicineStock()->getName();
                    $data['sales_item'][$i]['unit'] = ($item->getMedicineStock()->getUnit()) ? (string)$item->getMedicineStock()->getUnit()->getName() : '';
                    $data['sales_item'][$i]['price'] = (integer)$item->getQuantity();
                    $data['sales_item'][$i]['quantity'] = (integer)$item->getQuantity();
                    $data['sales_item'][$i]['bonus'] = 0;
                    $data['sales_item'][$i]['totalQuantity'] = 0;
                    $data['sales_item'][$i]['subTotal'] = (integer)$item->getSubTotal();
                }

            } else {
                $data['sales_item'] = array();
            }
            return $data;
        }

    }



}
