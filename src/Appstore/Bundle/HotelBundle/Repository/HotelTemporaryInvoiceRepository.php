<?php

namespace Appstore\Bundle\HotelBundle\Repository;
use Appstore\Bundle\HotelBundle\Entity\HotelConfig;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoice;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceParticular;
use Appstore\Bundle\HotelBundle\Entity\HotelParticular;
use Appstore\Bundle\HotelBundle\Entity\HotelProductionElement;
use Appstore\Bundle\HotelBundle\Entity\HotelPurchaseItem;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceParticular;
use Appstore\Bundle\HotelBundle\Entity\HotelTemporaryInvoice;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionElement;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * HotelInvoiceParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HotelTemporaryInvoiceRepository extends EntityRepository
{

	public function insertTemporaryRoom(User $user , $data)
    {

	    $room = $data['particular'];
	    $start = strtotime($data['tempBookingStartDate']);
	    $end = strtotime($data['tempBookingEndDate']);
	    $quantity = ceil(abs($end - $start) / 86400)+1;

	    $begin = new \DateTime( $data['tempBookingStartDate']);
	    $end = new \DateTime( $data['tempBookingEndDate'] );
	    $end = $end->modify( '+1 day' );

	    $interval = new \DateInterval('P1D');
	    $period = new \DatePeriod($begin, $interval ,$end);

	    $bookingDate =array();
	    foreach ($period as $key => $date) {
		    $bookingDate[] = (string)$date->format('d-m-Y');
	    }

	    $em = $this->_em;
	    $particular = $this->_em->getRepository('HotelBundle:HotelParticular')->find($room);
	    $existRoom = $this->findOneBy(array('createdBy'=> $user, 'hotelParticular'=>$particular));
	    if(!empty($existRoom)){
		    $entity =  $existRoom;
	    }else{
		    $entity = new HotelTemporaryInvoice();
	    }

	    $entity->setCreatedBy($user);
	    $entity->setQuantity((int)$quantity);
	    $entity->setHotelParticular($particular);
	    $entity->setGuestName($data['guestName']);
	    $entity->setGuestMobile($data['guestMobile']);
	    $entity->setChild($data['child']);
	    $entity->setAdult($data['adult']);
	    $entity->setStartDate((new \DateTime( $data['tempBookingStartDate'])));
	    $entity->setEndDate((new \DateTime( $data['tempBookingEndDate'])));
	    $entity->setBookingDate($bookingDate);
	    $entity->setPrice($data['salesPrice']);
	    $entity->setPurchasePrice($particular->getPurchasePrice());
	    $subTotal = ($entity->getQuantity() * $entity->getPrice());
	    $entity->setSubTotal($subTotal);
	    $em->persist($entity);
	    $em->flush();
    }

    private function getSummary(User $user){

	    $qb = $this->createQueryBuilder('e');
	    $qb->select('SUM(e.subTotal) as subTotal');
	    $qb->andWhere('e.createdBy = :user')->setParameter('user',$user->getId());
	    $result = $qb->getQuery()->getOneOrNullResult();
	    return $result['subTotal'];
	}

    public function invoiceGenerate($user)
    {
    	$entities = $this->findBy(array('createdBy' => $user));
    	$summary = $this->getSummary($user);

	    $em = $this->_em;
	    $entity = new HotelInvoice();
	    $option = $user->getGlobalOption();
	    $hotelConfig = $option->getHotelConfig();
	    $entity->setCreatedBy($user);
	    $customer = $em->getRepository('DomainUserBundle:Customer')->defaultCustomer($option);
	    $entity->setCustomer($customer);
	    $transactionMethod = $em->getRepository('SettingToolBundle:TransactionMethod')->find(1);
	    $entity->setTransactionMethod($transactionMethod);
	    $entity->setHotelConfig($hotelConfig);
	    $entity->setPaymentStatus('Pending');
	    $entity->setCreatedBy($user);
	    $entity->setSubTotal($summary);
	    $entity->setTotal($summary);
	    $entity->setDue($summary);
	    $em->persist($entity);
	    $em->flush();
	    $this->_em->getRepository('HotelBundle:HotelInvoiceTransactionSummary')->insertTransactionSummary($entity);

	    /* @var $room HotelTemporaryInvoice */

	    foreach ($entities as $room ){

	    	$invoiceParticular = new HotelInvoiceParticular();
		    $invoiceParticular->setHotelInvoice($entity);
		    $invoiceParticular->setQuantity($room->getQuantity());
		    $invoiceParticular->setHotelParticular($room->getHotelParticular());
		    $invoiceParticular->setParticular($room->getHotelParticular()->getName());
		    $invoiceParticular->setGuestName($room->getGuestName());
		    $invoiceParticular->setGuestMobile($room->getGuestMobile());
		    $invoiceParticular->setChild($room->getChild());
		    $invoiceParticular->setAdult($room->getAdult());
		    $invoiceParticular->setStartDate($room->getStartDate());
		    $invoiceParticular->setEndDate($room->getEndDate());
		    $invoiceParticular->setBookingDate($room->getBookingDate());
		    $invoiceParticular->setPrice($room->getPrice());
		    $invoiceParticular->setPurchasePrice($room->getPurchasePrice());
		    $subTotal = ($room->getQuantity() * $room->getPrice());
		    $invoiceParticular->setSubTotal($subTotal);
		    $em->persist($invoiceParticular);
		    $em->flush();
	    }
	    return $entity;
    }

	public function getSalesItems(User $user)
	{
		$entities = $user->getHotelTemporary();
		$data = '';
		$i = 1;

		/* @var $entity HotelInvoiceParticular */

		foreach ($entities as $entity) {

			$startDate =  $entity->getStartDate()->format('d-m-Y');
			$endDate =  $entity->getEndDate()->format('d-m-Y');

			$data .= "<tr id='remove-{$entity->getId()}'>";
			$data .= "<td>{$i}.</td>";
			$data .= "<td>{$entity->getHotelParticular()->getName()}</td>";
			$data .= "<td>{$startDate} To {$endDate}</td>";
			$data .= "<td>{$entity->getGuestName()}/{$entity->getGuestMobile()}</td>";
			$data .= "<td>{$entity->getAdult()}</td>";
			$data .= "<td>{$entity->getChild()}</td>";
			$data .= "<td>{$entity->getPrice()}</td>";
			$data .= "<td>{$entity->getQuantity()}</td>";
			$data .= "<td>{$entity->getSubTotal()}</td>";
			$data .= "<td>";
			$data .= "<a id='{$entity->getId()}' data-id='{$entity->getId()}' data-url='/hotel/{$entity->getId()}/booking-room-delete' href='javascript:' class='btn red mini particularDelete' ><i class='icon-trash'></i></a>";
			$data .= "</td>";
			$data .= '</tr>';
			$i++;
		}
		return $data;
	}

	public function getSubTotalAmount(User $user)
	{
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.createdBy','u');
		$qb->select('SUM(e.subTotal) AS subTotal');
		$qb->where('u.id = :user')->setParameter('user', $user->getId());
		$res = $qb->getQuery()->getOneOrNullResult();
		return $res;
	}

    public function removeTemporaryRoom(User $user)
    {
	    $em = $this->_em;
	    $transaction = $em->createQuery("DELETE HotelBundle:HotelTemporaryInvoice e WHERE e.createdBy = {$user->getId()}");
	    $transaction->execute();
    }

}
