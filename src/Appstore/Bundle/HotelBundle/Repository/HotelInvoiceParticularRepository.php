<?php

namespace Appstore\Bundle\HotelBundle\Repository;
use Appstore\Bundle\HotelBundle\Entity\HotelConfig;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoice;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceParticular;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransaction;
use Appstore\Bundle\HotelBundle\Entity\HotelParticular;
use Appstore\Bundle\HotelBundle\Entity\HotelProductionElement;
use Appstore\Bundle\HotelBundle\Entity\HotelPurchaseItem;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionElement;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * HotelInvoiceParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HotelInvoiceParticularRepository extends EntityRepository
{

    public function handleDateRangeFind($qb,$data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function getInvoicePurchasePrice($entity)
    {
        $sql = "SELECT COALESCE(SUM(salesItem.quantity * salesItem.purchasePrice),0) as total FROM hotel_invoice_particular as salesItem
                WHERE salesItem.hotelInvoice_id = :invoice";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue('invoice', $entity);
        $stmt->execute();
        $result =  $stmt->fetch();
        return $result['total'];
    }


    public function insertStockItem(HotelInvoice $invoice, $data)
    {

	    $start = strtotime($data['startDate']);
	    $end = strtotime($data['endDate']);
	    $quantity = ceil(abs($end - $start) / 86400)+1;

	    $begin = new \DateTime( $data['startDate']);
	    $end = new \DateTime( $data['endDate'] );
	    $end = $end->modify( '+1 day' );

	    $interval = new \DateInterval('P1D');
	    $period = new \DatePeriod($begin, $interval ,$end);

	    $bookingDate =array();
	    foreach ($period as $key => $date) {
		    $bookingDate[] = (string)$date->format('d-m-Y');
	    }

    	$em = $this->_em;
	    $particular = $data['particular'];
	    $price = $data['salesPrice'];
	    $stock = $em->getRepository('HotelBundle:HotelParticular')->find($particular);

	    $category = !empty($stock->getCategory()) ? $stock->getCategory()->getName() :'';
	    $unit = !empty($stock->getUnit()) ? $stock->getUnit()->getName() :'';
	    $roomName = $category.' '.$stock->getName().' '.$unit;

	    if(!empty($stock)){
		    $entity = new HotelInvoiceParticular();
		    $entity->setQuantity((int)$quantity);
		    $entity->setParticular(trim($roomName));
		    $entity->setHotelParticular($stock);
		    $entity->setGuestName($data['guestName']);
		    $entity->setGuestMobile($data['guestMobile']);
		    $entity->setChild($data['child']);
		    $entity->setAdult($data['adult']);
		    $entity->setStartDate((new \DateTime( $data['startDate'])));
		    $entity->setEndDate((new \DateTime( $data['endDate'])));
		    $entity->setBookingDate($bookingDate);
		    $entity->setPrice($price);
		    $entity->setProcess(strtolower($invoice->getProcess()));
		    $entity->setPurchasePrice($stock->getPurchasePrice());
		    $subTotal = ($entity->getQuantity() * $price);
		    $entity->setSubTotal($subTotal);
		    $entity->setHotelInvoice($invoice);
		    $em->persist($entity);
		    $em->flush();
	    }
    }

	public function insertFoodItem(HotelInvoice $invoice, $data)
	{


		$em = $this->_em;
		$particular = $data['particular'];
		$price = $data['salesPrice'];
		$stock = $em->getRepository('HotelBundle:HotelParticular')->find($particular);

		if(!empty($stock)){
			$entity = new HotelInvoiceParticular();
			$entity->setQuantity((int)$data['quantity']);
			$entity->setParticular($stock->getName());
			$entity->setHotelParticular($stock);
			$entity->setPrice($price);
			$entity->setPurchasePrice($stock->getPurchasePrice());
			$subTotal = ($entity->getQuantity() * $price);
			$entity->setSubTotal($subTotal);
			$entity->setHotelInvoice($invoice);
			$em->persist($entity);
			$em->flush();
		}
	}


	public function checkBooking(HotelParticular $particular,$data)
	{

		$begin = new \DateTime( $data['startDate']);
		$end = new \DateTime( $data['endDate'] );
		$end = $end->modify( '+1 day' );

		$interval = new \DateInterval('P1D');
		$period = new \DatePeriod($begin, $interval ,$end);

		$bookingDate =array();
		foreach ($period as $key => $date) {
			$bookingDate[] = (string)$date->format('d-m-Y');
		}

		$qb = $this->createQueryBuilder('e');
		$qb->join('e.hotelInvoice','h');
		$qb->join('e.hotelParticular','p');
		$qb->join('p.hotelParticularType','hpt');
		$qb->select('e.bookingDate AS bookingDate');
		$qb->where('e.hotelParticular = :particular')->setParameter('particular', $particular->getId());
		$qb->andWhere('e.process IN (:process)')->setParameter('process',array('booked','check-in'));
		$qb->andWhere('hpt.slug IN (:slugs)')->setParameter('slugs', array('room','package'));
		$result = $qb->getQuery()->getArrayResult();
		$booked =array();
		foreach ($result as $row){
			$period = $row['bookingDate'];
			foreach ($period as $key => $date) {
				$booked[] = $date;
			}
		}
		$booked = array_unique($booked);
		$result = array_intersect($booked,$bookingDate);
		return empty($result) ? 'valid':'in-valid';

	}

	public function checkRoomProcessing($config,$data)
	{

		$process = isset($data['process'])? $data['process'] :'';
		$begin = new \DateTime( $data['bookingStartDate']);
		$end = new \DateTime( $data['bookingEndDate'] );
		$end = $end->modify( '+1 day' );

		$interval = new \DateInterval('P1D');
		$period = new \DatePeriod($begin, $interval ,$end);

		$bookingDate =array();
		foreach ($period as $key => $date) {
			$bookingDate[] = (string)$date->format('d-m-Y');
		}
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.hotelParticular','p');
		$qb->join('p.hotelParticularType','hpt');
		$qb->select('e.id as id , p.id as roomId');
		$qb->where('p.hotelConfig = :config')->setParameter('config', $config);
		if(!empty($process) and $process != 'available'){
			$qb->andWhere('e.process = :process')->setParameter('process',$process);
		}else{
			$qb->andWhere('e.process IN (:process)')->setParameter('process',array('booked','check-in'));
		}
		$qb->andWhere('hpt.slug IN (:slugs)')->setParameter('slugs', array('room','package'));
		$orStatements = $qb->expr()->orX();
		foreach ($bookingDate as $date) {
			$orStatements->add(
				$qb->expr()->like('e.bookingDate', $qb->expr()->literal("%$date%"))
			);
		}
		$qb->andWhere($orStatements);
		return $result = $qb->getQuery()->getArrayResult();

	}

	public function updateRoomProcess(HotelInvoice $entity){

    	$em = $this->_em;
    	if(!empty($entity->getHotelInvoiceParticulars())){
    		/* @var $room HotelInvoiceParticular */
    		foreach ($entity->getHotelInvoiceParticulars()  as $room):
			    $room->setProcess(strtolower($entity->getProcess()));
			    $em->flush();
		    endforeach;
	    }
	}


	public function getCheckinRoom(HotelConfig $config,$date){

	   	$config =  $config->getId();
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.hotelInvoice','h');
		$qb->join('e.hotelParticular','p');
		$qb->join('p.hotelParticularType','pt');
		$qb->select('e.id as id , e.particular as roomName');
		$qb->andWhere('h.hotelConfig = :config')->setParameter('config',$config);
		$qb->andWhere('pt.slug IN (:slugs)')->setParameter('slugs', array('room','package'));
		$qb->andWhere('e.process IN (:process)')->setParameter('process',array('check-in'));
		$qb->andWhere($qb->expr()->like("e.bookingDate", "'%$date%'"  ));
		$result = $qb->getQuery()->getArrayResult();
		return $result;
	}



	public function getBookedRoom(HotelConfig $config){

		$date = date('d-m-Y');
		$config =  $config->getId();
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.hotelInvoice','h');
		$qb->join('e.hotelParticular','p');
		$qb->leftJoin('p.category','c');
		$qb->select('p.id as id, e.process as roomStatus');
		$qb->where('h.hotelConfig = :config')->setParameter('config',$config);
		$qb->andWhere('e.process IN (:process)')->setParameter('process',array('booked','check-in'));
		$qb->andWhere($qb->expr()->like("e.bookingDate", "'%$date%'"  ));
		$qb->groupBy('p.id');
		$result = $qb->getQuery()->getArrayResult();
		return $result;
	}

	public function getBookedRoomDetails(HotelConfig $config,$roomId){

		$config =  $config->getId();
		$qb = $this->createQueryBuilder('e');
		$qb->join('e.hotelInvoice','h');
		$qb->join('e.hotelParticular','p');
		$qb->andWhere('h.hotelConfig = :config')->setParameter('config',$config);
		$qb->andWhere('e.process IN (:process)')->setParameter('process',array('booked','check-in'));
		$qb->andWhere('e.hotelParticular = :room')->setParameter('room',$roomId);
		$result = $qb->getQuery()->getResult();
		return $result;
	}


	public function salesStockItemProduction(HotelInvoiceParticular $invoice_particular,HotelProductionElement $element)
	{
		$qb = $this->createQueryBuilder('e');
		if(!empty($element->getParticular()->getUnit()) and ($element->getParticular()->getUnit()->getName() != 'Sft')){
			$qb->select('e.quantity AS quantity');
		}else{
			$qb->select('SUM(e.totalQuantity) AS quantity');
		}
		$qb->where('e.id = :particular')->setParameter('particular', $invoice_particular->getId());
		$qnt = $qb->getQuery()->getOneOrNullResult();
		$qnt = ($qnt['quantity'] == 'NULL') ? 0 : $qnt['quantity'];
		$stockQuantity = floatval($element->getParticular()->getSalesQuantity());
		return ($stockQuantity + $qnt);

	}

	public function checkOutHotelInvoice(HotelInvoice $invoice){

		/* @var $particular HotelInvoiceTransaction */

		$em = $this->_em;
		foreach ($invoice->getHotelInvoiceParticulars() as $particular){
			$particular->setProcess('check-out');
			$em->flush();
		}
	}

	public function checkInHotelInvoice(HotelInvoice $invoice){

		/* @var $particular HotelInvoiceTransaction */

		$em = $this->_em;
		foreach ($invoice->getHotelInvoiceParticulars() as $particular){
			$particular->setProcess('check-in');
			$em->flush();
		}
	}

	public function salesStockItemUpdate(HotelParticular $stockItem)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.hotelParticular = :stock')->setParameter('stock', $stockItem->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function getSalesItems(HotelInvoice $sales)
    {
        $entities = $sales->getHotelInvoiceParticulars();
        $data = '';
        $i = 1;

        /* @var $entity HotelInvoiceParticular */

        foreach ($entities as $entity) {

	        $startDate =  $entity->getStartDate()->format('d-m-Y');
	        $endDate =  $entity->getEndDate()->format('d-m-Y');

            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td>{$i}.</td>";
            $data .= "<td>{$entity->getParticular()}</td>";
            $data .= "<td>{$startDate} To {$endDate}</td>";
            $data .= "<td>{$entity->getGuestName()}/{$entity->getGuestMobile()}</td>";
            $data .= "<td>{$entity->getAdult()}</td>";
            $data .= "<td>{$entity->getChild()}</td>";
            $data .= "<td>{$entity->getPrice()}</td>";
            $data .= "<td>{$entity->getQuantity()}</td>";
            $data .= "<td>{$entity->getSubTotal()}</td>";
            $data .= "<td>";
            $data .= "<a id='{$entity->getId()}' data-id='{$entity->getId()}' data-url='/hotel/invoice/{$sales->getId()}/{$entity->getId()}/particular-delete' href='javascript:' class='btn red mini particularDelete' ><i class='icon-trash'></i></a>";
            $data .= "</td>";
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function getFoodSalesItems(HotelInvoice $sales)
    {
        $entities = $sales->getHotelInvoiceParticulars();
        $data = '';
        $i = 1;

        /* @var $entity HotelInvoiceParticular */

        foreach ($entities as $entity) {
			$unit = !empty($entity->getHotelParticular()->getUnit()) ? $entity->getHotelParticular()->getUnit()->getName():'';
	        $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td>{$i}.</td>";
            $data .= "<td>{$entity->getHotelParticular()->getParticularCode()} - {$entity->getParticular()}</td>";
	        $data .= "<td>";
	        $data .= "<input type='hidden' name='salesItem[]' value='{$entity->getId()}'>";
	        $data .= "<input type='text' class='numeric td-inline-input salesPrice' data-id='{$entity->getId()}' autocomplete='off' id='salesPrice-{$entity->getId()}' name='salesPrice' value='{$entity->getPrice()}'>";
	        $data .= "</td>";
	        $data .= "<td>";
	        $data .= "<input type='text' class='numeric td-inline-input-qnt quantity' data-id='{$entity->getId()}' autocomplete='off' min=1  id='quantity-{$entity->getId()}' name='quantity[]' value='{$entity->getQuantity()}' placeholder='Qnt'>";
	        $data .= "</td>";
	        $data .= "<td>{$unit}</td>";
	        $data .= "<td id='subTotal-{$entity->getId()}'>{$entity->getSubTotal()}</td>";
            $data .= "<td>";
	        $data .= "<a id='{$entity->getId()}' data-id='{$entity->getId()}'  href='javascript:' class='btn blue mini itemUpdate' ><i class='icon-save'></i></a>";
	        $data .= "<a id='{$entity->getId()}' data-id='{$entity->getId()}' data-url='/hotel/restaurant-invoice/{$sales->getId()}/{$entity->getId()}/particular-delete' href='javascript:' class='btn red mini particularDelete' ><i class='icon-trash'></i></a>";
            $data .= "</td>";
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }


	/**
	 * @param $qb
	 * @param $data
	 */

	protected function handleSearchStockBetween($qb,$data)
	{

		$createdStart = isset($data['startDate'])? $data['startDate'] :'';
		$createdEnd = isset($data['endDate'])? $data['endDate'] :'';
		$name = isset($data['name'])? $data['name'] :'';
		$customer = isset($data['customer'])? $data['customer'] :'';
		$category = isset($data['category'])? $data['category'] :'';
		$type = isset($data['type'])? $data['type'] :'';
		$sku = isset($data['sku'])? $data['sku'] :'';

		if (!empty($customer)) {
			$qb->join('e.customer','c');
			$qb->andWhere($qb->expr()->like("c.name", "'%$customer%'"  ));
		}
		if (!empty($name)) {
			$qb->andWhere($qb->expr()->like("mds.name", "'%$name%'"  ));
		}
		if (!empty($sku)) {
			$qb->andWhere($qb->expr()->like("mds.sku", "'%$sku%'"  ));
		}
		if(!empty($category)){
			$qb->andWhere("mds.category = :category");
			$qb->setParameter('category', $category);
		}
		if(!empty($type)){
			$qb->andWhere("mds.hotelParticularType = :type");
			$qb->setParameter('type', $type);
		}

		if (!empty($category)) {
			$qb->join('e.hotelCategory','c');
			$qb->andWhere("c.id = :cid");
			$qb->setParameter('cid', $category);
		}

		if (!empty($createdStart)) {
			$compareTo = new \DateTime($createdStart);
			$created =  $compareTo->format('Y-m-d 00:00:00');
			$qb->andWhere("s.created >= :createdStart");
			$qb->setParameter('createdStart', $created);
		}

		if (!empty($createdEnd)) {
			$compareTo = new \DateTime($createdEnd);
			$createdEnd =  $compareTo->format('Y-m-d 23:59:59');
			$qb->andWhere("s.created <= :createdEnd");
			$qb->setParameter('createdEnd', $createdEnd);
		}

	}


	public  function reportSalesStockItem(User $user, $data=''){

		$userBranch = $user->getProfile()->getBranches();
		$config =  $user->getGlobalOption()->getHotelConfig()->getId();

		$qb = $this->createQueryBuilder('si');
		$qb->join('si.hotelInvoice','e');
		$qb->join('si.hotelParticular','mds');
		$qb->select('SUM(si.quantity) AS quantity');
		$qb->addSelect('SUM(si.totalQuantity * si.purchasePrice) AS purchasePrice');
		$qb->addSelect('SUM(si.subTotal) AS salesPrice');
		$qb->addSelect('mds.name AS name');
		$qb->addSelect('mds.particularCode AS sku');
		$qb->where('e.hotelConfig = :config');
		$qb->setParameter('config', $config);
		$qb->andWhere('e.process IN (:process)');
		$qb->setParameter('process', array('Done','Delivered','Chalan'));
		$this->handleSearchStockBetween($qb,$data);
		$qb->groupBy('si.hotelParticular');
		$qb->orderBy('mds.name','ASC');
		return $qb->getQuery()->getArrayResult();
	}

    public  function reportCustomerSalesItem(User $user, $data=''){

		$userBranch = $user->getProfile()->getBranches();
		$config =  $user->getGlobalOption()->getHotelConfig()->getId();

		$qb = $this->createQueryBuilder('si');
		$qb->join('si.hotelInvoice','e');
		$qb->join('si.hotelParticular','mds');
		$qb->leftJoin('mds.unit','u');
		$qb->select('si.totalQuantity AS quantity');
		$qb->addSelect('si.totalQuantity * si.purchasePrice AS purchasePrice');
		$qb->addSelect('si.subTotal AS salesPrice');
		$qb->addSelect('e.invoice AS invoice');
		$qb->addSelect('e.created AS created');
		$qb->addSelect('mds.name AS name');
		$qb->addSelect('u.name AS unit');
		$qb->addSelect('mds.particularCode AS sku');
		$qb->where('e.hotelConfig = :config');
		$qb->setParameter('config', $config);
		$qb->andWhere('e.process IN (:process)');
		$qb->setParameter('process', array('Done','Delivered','Chalan'));
		$this->handleSearchStockBetween($qb,$data);
		$qb->orderBy('mds.name','ASC');
		return $qb->getQuery()->getArrayResult();
	}

    public function searchAutoComplete(HotelConfig $config,$q)
    {
        $query = $this->createQueryBuilder('e');
        $query->join('e.hotelInvoice', 'i');
        $query->select('e.particular as id');
        $query->where($query->expr()->like("e.particular", "'$q%'"  ));
        $query->andWhere("i.hotelConfig = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.particular');
        $query->orderBy('e.particular', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getArrayResult();
    }

    public function updateInvoiceItems($data)
    {

        $em = $this->_em;
        $invoiceParticular = $this->find($data['itemId']);
        if(!empty($invoiceParticular)) {
            $entity = $invoiceParticular;
            $entity->setQuantity($data['quantity']);
            $entity->setPrice($data['salesPrice']);
            $entity->setSubTotal($entity->getPrice() * $entity->getQuantity());
        }
        $em->persist($entity);
        $em->flush();
        return $invoiceParticular->getHotelInvoice();

    }

}
