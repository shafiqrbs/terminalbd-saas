<?php

namespace Appstore\Bundle\HotelBundle\Repository;
use Appstore\Bundle\AccountingBundle\Entity\AccountSales;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoice;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransaction;
use Appstore\Bundle\HotelBundle\Entity\HotelInvoiceTransactionSummary;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * HotelHotelInvoiceTransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HotelInvoiceTransactionSummaryRepository extends EntityRepository
{

	public function insertTransactionSummary(HotelInvoice $invoice)
	{
		$entity = new HotelInvoiceTransactionSummary();
		$entity->setHotelInvoice($invoice);
		$entity->setHotelConfig($invoice->getHotelConfig());
		$entity->setDiscount(0);
		$entity->setVat(0);
		$entity->setServiceCharge(0);
		$entity->setSubTotal(0);
		$entity->setTotal(0);
		$entity->setReceived(0);
		$entity->setDue(0);
		$this->_em->persist($entity);
		$this->_em->flush();
	}

	public function updateTransactionSummary(HotelInvoice $invoice)
	{

		/* @var $entity HotelInvoiceTransactionSummary */

		$entity = $this->findOneBy(array('hotelConfig' => $invoice->getHotelConfig(),'hotelInvoice'=> $invoice));
		$em = $this->_em;
		$res = $em->createQueryBuilder()
		          ->from('HotelBundle:HotelInvoiceTransaction','si')
		          ->join('si.hotelInvoice','e')
		          ->select('COALESCE(SUM(si.discount),0) as discount , COALESCE(SUM(si.vat),0) as vat, COALESCE(SUM(si.serviceCharge),0) as serviceCharge , COALESCE(SUM(si.subTotal),0) as subTotal , COALESCE(sum(si.total),0) as total, COALESCE(sum(si.received),0) as received')
		          ->where('si.referenceInvoice = :invoice')
		          ->setParameter('invoice', $invoice->getId())
		          ->andWhere('e.hotelConfig = :config')
		          ->setParameter('config', $invoice->getHotelConfig()->getId())
		          ->andWhere('si.process = :process')
		          ->setParameter('process', 'Done')
		          ->getQuery()->getOneOrNullResult();

		$discount   = $res['discount'];
		$vat        = $res['vat'];
		$charge     = $res['serviceCharge'];
		$subTotal   = $res['subTotal'];
		$total      = $res['total'];
		$received   = $res['received'];
        $grandTotal = (($total + $vat + $charge) - $discount);
        $due = ($grandTotal - $received);
        $entity->setDiscount($discount);
		$entity->setVat(floatval($vat));
		$entity->setServiceCharge(floatval($charge));
		$entity->setSubTotal($subTotal);
		$entity->setTotal($grandTotal);
		$entity->setReceived($received);
		$entity->setDue($due);
		$em->flush();

	}

}