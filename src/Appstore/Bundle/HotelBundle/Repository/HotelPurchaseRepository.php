<?php

namespace Appstore\Bundle\HotelBundle\Repository;
use Appstore\Bundle\HotelBundle\Entity\HotelPurchase;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * HotelPurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HotelPurchaseRepository extends EntityRepository
{


	protected function handleSearchBetween($qb,$data)
	{

		$grn = isset($data['grn'])? $data['grn'] :'';
		$vendor = isset($data['vendor'])? $data['vendor'] :'';
		$hotel = isset($data['name'])? $data['name'] :'';
		$brand = isset($data['brandName'])? $data['brandName'] :'';
		$mode = isset($data['mode'])? $data['mode'] :'';
		$vendorId = isset($data['vendorId'])? $data['vendorId'] :'';
		$startDate = isset($data['startDate'])? $data['startDate'] :'';
		$endDate = isset($data['endDate'])? $data['endDate'] :'';

		if (!empty($grn)) {
			$qb->andWhere($qb->expr()->like("e.grn", "'%$grn%'"  ));
		}
		if(!empty($hotel)){
			$qb->andWhere($qb->expr()->like("ms.name", "'%$hotel%'"  ));
		}
		if(!empty($brand)){
			$qb->andWhere($qb->expr()->like("ms.brandName", "'%$brand%'"  ));
		}
		if(!empty($mode)){
			$qb->andWhere($qb->expr()->like("ms.mode", "'%$mode%'"  ));
		}
		if(!empty($vendor)){
			$qb->join('e.hotelVendor','v');
			$qb->andWhere("v.companyName = :vendor")->setParameter('vendor', $vendor);
		}
		if(!empty($vendorId)){
			$qb->join('e.hotelVendor','v');
			$qb->andWhere("v.id = :vendorId")->setParameter('vendorId', $vendorId);
		}
		if (!empty($startDate) ) {
			$datetime = new \DateTime($data['startDate']);
			$start = $datetime->format('Y-m-d 00:00:00');
			$qb->andWhere("e.created >= :startDate");
			$qb->setParameter('startDate', $start);
		}

		if (!empty($endDate)) {
			$datetime = new \DateTime($data['endDate']);
			$end = $datetime->format('Y-m-d 23:59:59');
			$qb->andWhere("e.created <= :endDate");
			$qb->setParameter('endDate', $end);
		}
	}


	public function updatePurchaseTotalPrice(HotelPurchase $entity)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('HotelBundle:HotelPurchaseItem','si')
            ->select('sum(si.purchaseSubTotal) as total')
            ->where('si.hotelPurchase = :entity')
            ->setParameter('entity', $entity ->getId())
            ->getQuery()->getSingleResult();

        if($total['total'] > 0){
            $subTotal = $total['total'];
            $entity->setSubTotal($subTotal);
            $entity->setDiscount($this->getUpdateDiscount($entity,$subTotal));
            $entity->setNetTotal($entity->getSubTotal() - $entity->getDiscount());
            $entity->setDue($entity->getNetTotal() - $entity->getPayment() );

        }else{

            $entity->setSubTotal(0);
            $entity->setNetTotal(0);
            $entity->setDue(0);
            $entity->setDiscount(0);
        }

        $em->persist($entity);
        $em->flush();

        return $entity;

    }

    public function getUpdateDiscount(HotelPurchase $invoice,$subTotal)
    {
        if($invoice->getDiscountType() == 'flat'){
            $discount = $invoice->getDiscountCalculation();
        }else{
            $discount = ($subTotal * $invoice->getDiscountCalculation())/100;
        }
        return $discount;
    }

	public function monthlyPurchase(User $user , $data =array())
	{

		$config =  $user->getGlobalOption()->getHotelConfig()->getId();
		$compare = new \DateTime();
		$year =  $compare->format('Y');
		$year = isset($data['year'])? $data['year'] :$year;
		$sql = "SELECT MONTH (purchase.created) as month,SUM(purchase.netTotal) AS total
                FROM hotel_purchase as purchase
                WHERE purchase.hotelConfig_id = :config AND purchase.process = :process  AND YEAR(purchase.updated) =:year
                GROUP BY month ORDER BY month ASC";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->bindValue('config', $config);
		$stmt->bindValue('process', 'Approved');
		$stmt->bindValue('year', $year);
		$stmt->execute();
		$result =  $stmt->fetchAll();
		return $result;


	}


	public function reportPurchaseOverview(User $user ,$data)
	{
		$global =  $user->getGlobalOption()->getId();

		$qb = $this->_em->createQueryBuilder();
		$qb->from('AccountingBundle:AccountPurchase','e');
		$qb->select('sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
		$qb->where('e.globalOption = :config');
		$qb->setParameter('config', $global);
		$qb->andWhere('e.process = :process');
		$qb->setParameter('process', 'approved');
		$this->handleSearchBetween($qb,$data);
		return $qb->getQuery()->getOneOrNullResult();
	}

	public function reportPurchaseTransactionOverview(User $user , $data = array())
	{

		$global =  $user->getGlobalOption()->getId();

		$qb = $this->_em->createQueryBuilder();
		$qb->from('AccountingBundle:AccountPurchase','e');
		$qb->join('e.transactionMethod','t');
		$qb->select('t.name as transactionName , sum(e.purchaseAmount) as total ,sum(e.payment) as totalPayment');
		$qb->where('e.globalOption = :config');
		$qb->setParameter('config', $global);
		$qb->andWhere('e.process = :process');
		$qb->setParameter('process', 'approved');
		$this->handleSearchBetween($qb,$data);
		$qb->groupBy("e.transactionMethod");
		$res = $qb->getQuery();
		return $result = $res->getArrayResult();

	}

	public function reportPurchaseProcessOverview(User $user,$data)
	{
		$config =  $user->getGlobalOption()->getHotelConfig()->getId();
		$qb = $this->createQueryBuilder('s');
		$qb->select('e.process as name , sum(e.subTotal) as subTotal , sum(e.netTotal) as total ,sum(e.payment) as totalPayment , count(e.id) as totalVoucher, sum(e.due) as totalDue, sum(e.discount) as totalDiscount');
		$qb->where('e.hotelConfig = :config');
		$qb->setParameter('config', $config);
		$this->handleSearchBetween($qb,$data);
		$qb->groupBy("e.process");
		$res = $qb->getQuery();
		return $result = $res->getArrayResult();
	}

	public function reportPurchaseModeOverview(User $user,$data)
	{
		$config =  $user->getGlobalOption()->getHotelConfig()->getId();
		$qb = $this->createQueryBuilder('e');
		$qb->select('sum(e.netTotal) as total , sum(e.payment) as totalPayment ,  sum(e.due) as totalDue, sum(e.discount) as totalDiscount');
		$qb->where('e.hotelConfig = :config');
		$qb->setParameter('config', $config);
		$qb->andWhere('e.process = :process');
		$qb->setParameter('process', 'Approved');
		$this->handleSearchBetween($qb,$data);
		$qb->groupBy("e.mode");
		$res = $qb->getQuery();
		return $result = $res->getArrayResult();
	}



	public function purchaseVendorReport(User $user , $data = array())
	{

		$global =  $user->getGlobalOption()->getId();
		$qb = $this->_em->createQueryBuilder();
		$qb->from('AccountingBundle:AccountPurchase','e');
		$qb->join('e.accountVendor','t');
		$qb->select('t.companyName as companyName ,t.name as vendorName ,t.mobile as vendorMobile , sum(e.purchaseAmount) as total ,sum(e.payment) as payment');
		$qb->where('e.globalOption = :config');
		$qb->setParameter('config', $global);
		$qb->andWhere('e.process = :process');
		$qb->setParameter('process', 'approved');
		$this->handleSearchBetween($qb,$data);
		$qb->groupBy("e.accountVendor");
		$qb->orderBy("t.companyName",'ASC');
		$res = $qb->getQuery();
		return $result = $res->getArrayResult();

	}


}
