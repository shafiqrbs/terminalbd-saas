<?php

namespace Appstore\Bundle\DomainUserBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\DomainUserBundle\Entity\Notepad;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\InventoryBundle\Entity\Sales;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotepadRepository extends EntityRepository
{



    public function findWithSearch($globalOption,$data)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.globalOption = :globalOption");
        $qb->setParameter('globalOption', $globalOption);
	    $qb->andWhere("e.content IS NOT NULL");
	    $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;

    }

    public function generateNotepad(GlobalOption $globalOption){


    	$compare = new \DateTime();
	    $year =  $compare->format('Y');
	    $month =  $compare->format('m');
	    $day =  $compare->format('d');
	    $sql = "SELECT id
                FROM domain_notepad as notepad
                WHERE notepad.globalOption_id = {$globalOption->getId()}  AND YEAR(notepad.created)= {$year} AND MONTH(notepad.created)= {$month} AND DAY(notepad.created)= {$day}";
	    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
	    $stmt->execute();
	    $result =  $stmt->fetchAll();
	    if(empty($result)){
		    $entity = new Notepad();
		    $entity->setGlobalOption($globalOption);
		    $this->_em->persist($entity);
		    $this->_em->flush();
		    return $entity->getId();
	    }else{
		    return $result[0]['id'];
	    }

    }

	protected function handleSearchBetween($qb,$data)
	{

		$keyword = isset($data['keyword'])? $data['keyword'] :'';
		$createdStart = isset($data['startDate'])? $data['startDate'] :'';
		$createdEnd = isset($data['endDate'])? $data['endDate'] :'';
		if (!empty($invoice)) {
			$qb->andWhere($qb->expr()->like("e.invoice", "'%$keyword%'"  ));
		}
		if (!empty($createdStart)) {
			$compareTo = new \DateTime($createdStart);
			$created =  $compareTo->format('Y-m-d 00:00:00');
			$qb->andWhere("e.created >= :createdStart");
			$qb->setParameter('createdStart', $created);
		}

		if (!empty($createdEnd)) {
			$compareTo = new \DateTime($createdEnd);
			$createdEnd =  $compareTo->format('Y-m-d 23:59:59');
			$qb->andWhere("e.created <= :createdEnd");
			$qb->setParameter('createdEnd', $createdEnd);
		}
		

	}



}
