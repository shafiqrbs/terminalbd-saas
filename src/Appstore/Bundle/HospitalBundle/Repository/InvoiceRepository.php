<?php

namespace Appstore\Bundle\HospitalBundle\Repository;
use Appstore\Bundle\DomainUserBundle\Entity\Customer;
use Appstore\Bundle\HospitalBundle\Entity\HmsInvoiceReturn;
use Appstore\Bundle\HospitalBundle\Entity\HospitalConfig;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTransaction;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * PathologyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {

        $department = isset($data['department'])? $data['department'] :'';
        $invoice = isset($data['invoice'])? $data['invoice'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $commission = isset($data['commission'])? $data['commission'] :'';
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $anesthesia = isset($data['anesthesia'])? $data['anesthesia'] :'';
        $referred = isset($data['referred'])? $data['referred'] :'';
        $customerName = isset($data['name'])? $data['name'] :'';
        $customerMobile = isset($data['mobile'])? $data['mobile'] :'';
        $created = isset($data['created'])? $data['created'] :'';
        $posted = isset($data['posted'])? $data['posted'] :'';
        $deliveryDate = isset($data['deliveryDate'])? $data['deliveryDate'] :'';
        $released = isset($data['released'])? $data['released'] :'';
        $transactionMethod = isset($data['transactionMethod'])? $data['transactionMethod'] :'';
        $service = isset($data['service'])? $data['service'] :'';
        $cabinGroup = isset($data['cabinGroup'])? $data['cabinGroup'] :'';
        $cabin = isset($data['cabinNo'])? $data['cabinNo'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        if (!empty($invoice)) {
            $inv = trim($invoice);
            $qb->andWhere($qb->expr()->like("e.invoice", "'%$inv%'"  ));
        }
        if (!empty($customerName)) {
            $qb->join('e.customer','c');
            $qb->andWhere($qb->expr()->like("c.customerId", "'%$customerName%'"  ));
        }

        if (!empty($customerMobile)) {
            $qb->join('e.customer','m');
            $qb->andWhere($qb->expr()->like("m.mobile", "'%$customerMobile%'"  ));
        }
        if (!empty($created)) {
            $compareTo = new \DateTime($created);
            $created =  $compareTo->format('Y-m-d');
            $qb->andWhere("e.created LIKE :created");
            $qb->setParameter('created', $created.'%');
        }

        if (!empty($posted)) {
            $compareTo = new \DateTime($posted);
            $posted =  $compareTo->format('Y-m-d');
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $posted.' 00:00:00');
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $posted.' 23:59:59');
        }

        if (!empty($deliveryDate)) {
            $compareTo = new \DateTime($deliveryDate);
            $created =  $compareTo->format('Y-m-d');
            $qb->andWhere("e.deliveryDateTime LIKE :deliveryDate");
            $qb->setParameter('deliveryDate', $created.'%');
        }

        if(!empty($mode)){
            $qb->andWhere("e.invoiceMode = :mode")->setParameter('mode', $mode);
        }
         if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
         if(!empty($commission)){
            $qb->andWhere("e.hmsCommission = :commission");
            $qb->setParameter('commission', $commission);
        }
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if(!empty($anesthesia)){
            $qb->andWhere("e.anesthesiaDoctor = :anesthesia");
            $qb->setParameter('anesthesia', $anesthesia);
        }

        if(!empty($referred)){
            $qb->andWhere("e.referredDoctor = :referredDoctor");
            $qb->setParameter('referredDoctor', $referred);
        }

        if(!empty($department)){
            $qb->andWhere("e.department = :department");
            $qb->setParameter('department', $department);
        }

        if (!empty($released)) {
            $compareTo = new \DateTime($released);
            $created =  $compareTo->format('Y-m-d');
            $qb->andWhere("e.updated LIKE :created");
            $qb->setParameter('created', $created.'%');
        }

        if(!empty($transactionMethod)){
            $qb->andWhere("e.transactionMethod = :transactionMethod");
            $qb->setParameter('transactionMethod', $transactionMethod);
        }

        if(!empty($service)){
            $qb->andWhere("e.service = :service");
            $qb->setParameter('service', $service);
        }

        if(!empty($cabin)){
            $qb->andWhere("e.cabin = :cabin");
            $qb->setParameter('cabin', $cabin);
        }
        if(!empty($cabinGroup)){
            $qb->leftJoin('e.cabin','cabin');
            $qb->leftJoin('cabin.serviceGroup','sg');
            $qb->andWhere("sg.id = :cabinGroup");
            $qb->setParameter('cabinGroup', $cabinGroup);
        }
    }

    public function handleDateRangeFind($qb,$data)
    {
        $startDate = isset($data['startDate'])? $data['startDate'] :'';
        $endDate = isset($data['endDate'])? $data['endDate'] :'';
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }elseif($startDate){
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }

        if (!empty($data['startDate']) ) {
            $qb->andWhere("it.created >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }

        if (!empty($data['endDate'])) {
            $qb->andWhere("it.created <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
    }

    public function getAdmissionProcess($hospital,$mode,$data = "")
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.process as process','count(e.id) as total');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        $qb->andWhere('e.process != :revised')->setParameter('revised', "Revised") ;
        $qb->groupBy('e.process');
        $qb->orderBy('e.process','ASC');
       // $this->handleSearchBetween($qb,$data);
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getHospitalProcess($hospital)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.process as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere("e.process IN (:process)")->setParameter('process', array('Done','In-progress','Release','Released','Dead','Death','Admitted'));
        $qb->groupBy('e.process');
        $qb->orderBy('e.process','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getExistCabin($hospital,$invoice = 0)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('c.id');
        $qb->join('e.cabin','c');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere('e.process IN (:process)')->setParameter('process', array('Admitted','Created','Release'));
        if($invoice > 0){
            $qb->andWhere('c.id != :cid')->setParameter('cid', $invoice);
        }
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }



    public function getBookingCabinLists($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('c.id as cabin','p.name as customer','e.created as created','e.invoice as invoice','e.id as invoiceId','p.mobile as mobile');
        $qb->join('e.cabin','c');
        $qb->leftJoin('e.customer','p');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere('c.status = 1');
        $qb->andWhere('e.isDelete != 1');
        $qb->andWhere('e.process IN (:process)')->setParameter('process', array('Admitted','Created','Release'));
        $result = $qb->getQuery()->getArrayResult();
        $array = array();
        foreach ( $result as $row):
            $array[$row['cabin']]= $row;
        endforeach;
        return $array;
    }

    public function getFindEmployees($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.createdBy','u');
        $qb->join('u.profile','p');
        $qb->select('u.id as id, p.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere('p.name IS NOT NULL');
        $qb->groupBy("u.id");
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getFindDiseases($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.diseasesProfile','d');
        $qb->select('d.id as id, d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->groupBy("d.id");
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function salesSummary(User $user,$data)
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','it');
        $qb->select('e.invoiceMode,sum(e.subTotal) as subTotal ,sum(e.discount) as discount ,sum(it.total) as netTotal , sum(it.payment) as netPayment, sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $this->handleDateRangeFind($qb,$data);
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Released','Death','Dead'));
        $qb->groupBy("e.invoiceMode");
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function findWithOverview(User $user , $data , $mode='')
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','it');
        $qb->select('sum(e.subTotal) as subTotal ,sum(e.discount) as discount ,sum(it.total) as netTotal , sum(it.payment) as netPayment , sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
       // $this->handleSearchBetween($qb,$data);
        $this->handleDateRangeFind($qb,$data);
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Released','Death','Dead'));
        $result = $qb->getQuery()->getOneOrNullResult();

        $subTotal = !empty($result['subTotal']) ? $result['subTotal'] :0;
        $netTotal = !empty($result['netTotal']) ? $result['netTotal'] :0;
        $netPayment = !empty($result['netPayment']) ? $result['netPayment'] :0;
        $netDue = !empty($result['netDue']) ? $result['netDue'] :0;
        $discount = !empty($result['discount']) ? $result['discount'] :0;
        $vat = !empty($result['vat']) ? $result['vat'] :0;
        $netCommission = !empty($result['netCommission']) ? $result['netCommission'] :0;
        $data = array('subTotal'=> $subTotal ,'discount'=> $discount ,'vat'=> $vat ,'netTotal'=> $netTotal , 'netPayment'=> $netPayment , 'netDue'=> $netDue , 'netCommission'=> $netCommission);
        return $data;
    }

    public function referredInvoice(User $user , $data )
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.referredDoctor','rd');
        $qb->select('sum(e.subTotal) as subTotal ,sum(e.discount) as discount,sum(e.total) as netTotal ,sum(e.payment) as netPayment , sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->addSelect('rd.name','rd.mobile','rd.particularCode');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $mode = isset($data['mode'])? $data['mode'] :'';
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Released','Death','Dead'));
        $qb->groupBy("rd.id");
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function assignDoctorInvoice(User $user , $data)
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.assignDoctor','rd');
        $qb->select('sum(e.subTotal) as subTotal ,sum(e.discount) as discount,sum(e.total) as netTotal ,sum(e.payment) as netPayment , sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->addSelect('rd.name','rd.particularCode','rd.mobile');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $mode = isset($data['mode'])? $data['mode'] :'';
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Released','Death','Dead'));
        $qb->groupBy("rd.id");
        $qb->orderBy('rd.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }
    public function paymentCommissionInvoice(User $user , $data , $mode='')
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.referredDoctor','rd');
        $qb->select('sum(e.subTotal) as subTotal ,sum(e.discount) as discount,sum(e.totaL) as totaL ,sum(e.payment) as netPayment , sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->addSelect('rd.name','rd.particularCode','rd.mobile');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.invoiceMode.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Released','Death','Dead'));
        $qb->groupBy("rd.id");
        $qb->orderBy('rd.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function findWithSalesOverview(User $user , $data , $mode='')
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','it');
        $qb->select('sum(e.subTotal) as subTotal ,sum(e.discount) as discount ,sum(e.total) as netTotal , sum(e.payment) as netPayment , sum(e.due) as netDue , sum(e.commission) as netCommission');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        $this->handleDateRangeFind($qb,$data);
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted'));
        $result = $qb->getQuery()->getOneOrNullResult();
        $subTotal = !empty($result['subTotal']) ? $result['subTotal'] :0;
        $netTotal = !empty($result['netTotal']) ? $result['netTotal'] :0;
        $netPayment = !empty($result['netPayment']) ? $result['netPayment'] :0;
        $netDue = !empty($result['netDue']) ? $result['netDue'] :0;
        $discount = !empty($result['discount']) ? $result['discount'] :0;
        $vat = !empty($result['vat']) ? $result['vat'] :0;
        $netCommission = !empty($result['netCommission']) ? $result['netCommission'] :0;
        $data = array('subTotal'=> $subTotal ,'discount'=> $discount ,'vat'=> $vat ,'netTotal'=> $netTotal , 'netPayment'=> $netPayment , 'netDue'=> $netDue , 'netCommission'=> $netCommission);
        return $data;
    }

    public function findWithServiceOverview(User $user, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','it');
        $qb->leftJoin('e.invoiceParticulars','ip');
        $qb->leftJoin('ip.particular','p');
        $qb->leftJoin('p.service','s');
        $qb->select('sum(it.payment) as subTotal');
        $qb->addSelect('s.name as serviceName');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted','Release','Death','Released','Dead'));
        $this->handleDateRangeFind($qb,$data);
        $qb->groupBy('s.id');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function findWithTransactionOverview(User $user, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','it');
        $qb->leftJoin('ip.transactionMethod','p');
        $qb->select('sum(ip.payment) as paymentTotal');
        $qb->addSelect('p.name as transName');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        if (!empty($mode)){
            $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode);
        }
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted'));
        $this->handleDateRangeFind($qb,$data);
        $qb->groupBy('p.id');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function findWithCommissionOverview(User $user, $data)
    {
        if(empty($data)){
            $datetime = new \DateTime("now");
            $data['startDate'] = $datetime->format('Y-m-d 00:00:00');
            $data['endDate'] = $datetime->format('Y-m-d 23:59:59');
        }else{
            $data['startDate'] = date('Y-m-d',strtotime($data['startDate']));
            $data['endDate'] = date('Y-m-d',strtotime($data['endDate']));
        }


        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.doctorInvoices','ip');
        $qb->leftJoin('ip.assignDoctor','d');
        $qb->select('sum(ip.payment) as paymentTotal');
        $qb->addSelect('d.name as referredName');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital);
        $qb->andWhere('ip.process = :mode')->setParameter('mode', 'Paid');
        if (!empty($data['startDate']) ) {
            $qb->andWhere("ip.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }

        if (!empty($data['endDate'])) {
            $qb->andWhere("ip.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        $qb->groupBy('ip.assignDoctor');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }


    public function invoiceLists(User $user , $mode , $data)
    {

        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        if($mode == "diagnostic"){
            $process = (isset($data['process']) and $data['process']) ? $data['process']:'In-progress';
            if($process != 'all'){
                $qb->andWhere('e.process = :process')->setParameter('process',trim($process)) ;
            }
        }elseif($mode == "admission"){
            $process = (isset($data['process']) and $data['process']) ? $data['process']:'Admitted';
            if($process != 'all') {
                $qb->andWhere('e.process = :process')->setParameter('process', trim($process));
            }
        }elseif($mode == "visit"){
            $process = (isset($data['process']) and $data['process']) ? $data['process']:'In-progress';
            if($process != 'all') {
                $qb->andWhere('e.process = :process')->setParameter('process', trim($process));
            }
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $result = $qb->getQuery();
        return  $result;
    }

    public function invoiceDetailReporets(User $user , $mode , $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        $qb->andWhere('e.commissionApproved = 1');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function hmsSalesCollectionComissionReports(User $user,$data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.invoiceTransactions','ip');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        //$qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        $qb->andWhere('e.commissionApproved = 1');
        if (!empty($data['startDate']) ) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function hmsCommissionGroupReports(User $user,$data)
    {
        $em = $this->_em;
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $em->createQueryBuilder();
        $qb->from("HospitalBundle:DoctorInvoice",'e');
        $qb->join('e.hmsCommission','c');
        $qb->select('COUNT(e.id) as totalInvoice','SUM(e.payment) as total');
        $qb->addSelect('c.id as id','c.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        if (!empty($data['startDate']) ) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $mode = isset($data['mode'])? $data['mode'] :'';
        if(!empty($mode)){
            $qb->leftJoin('e.hmsInvoice','i');
            $qb->andWhere("i.invoiceMode = :mode")->setParameter('mode', $mode);
        }
        $user = isset($data['user'])? $data['user'] :'';
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        $referred = isset($data['referred'])? $data['referred'] :'';
        if(!empty($referred)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $referred);
        }
        $qb->groupBy('c.id');
        $qb->orderBy('c.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function hmsCommissionReportDetails(User $user,$data)
    {
        $em = $this->_em;
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $em->createQueryBuilder();
        $qb->from("HospitalBundle:DoctorInvoice",'e');
        $qb->join('e.hmsCommission','c');
        $qb->leftJoin('e.hmsInvoice','i');
        $qb->leftJoin('i.referredDoctor','r');
        $qb->leftJoin('i.assignDoctor','d');
        $qb->leftJoin('i.customer','p');
        $qb->select('e.payment as commission','e.updated as updated');
        $qb->addSelect('c.id as id','c.name as commissionName');
        $qb->addSelect('r.name as referred');
        $qb->addSelect('d.name as doctor');
        $qb->addSelect('p.name as customer');
        $qb->addSelect('i.created as created','i.invoice as invoice','i.subTotal as subTotal','i.discount as discount','i.total as total','i.payment as payment','i.discountRequestedBy as discountRequestedBy','i.invoiceMode as invoiceMode');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        if (!empty($data['startDate']) ) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $mode = isset($data['mode'])? $data['mode'] :'';
        if(!empty($mode)){
            $qb->andWhere("i.invoiceMode = :mode")->setParameter('mode', $mode);
        }
        $user = isset($data['user'])? $data['user'] :'';
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        $referred = isset($data['referred'])? $data['referred'] :'';
        if(!empty($referred)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $referred);
        }
        $qb->orderBy('e.updated','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }


    public function hmsSalesCollectionReports(User $user,$data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $qb->from(InvoiceTransaction::class,'ip');
        $qb->join('ip.hmsInvoice','e');
        $qb->join('ip.createdBy','ipui');
        $qb->join('e.createdBy','eui');
        $qb->leftJoin('e.assignDoctor','ad');
        $qb->leftJoin('e.referredDoctor','rd');
        $qb->join('e.customer','c');
        $qb->leftJoin('ip.transactionMethod','m');
        $qb->select('ip.updated as received','ip.transactionCode as transactionCode','ip.subTotal as subTotal','ip.total as total','ip.discount as discount','ip.payment as payment','ip.discountRequestedBy as discountRequestedBy');
        $qb->addSelect('e.id as invoiceId','e.invoice as invoice','e.created as created','e.invoiceMode as invoiceMode');
        $qb->addSelect('ipui.username as receivedBy');
        $qb->addSelect('eui.username as createdBy');
        $qb->addSelect('ad.name as doctor');
        $qb->addSelect('rd.name as referred');
        $qb->addSelect('c.name as customer');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere("ip.process = 'Done'");
        if (!empty($data['startDate']) ) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("ip.updated >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("ip.updated <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        $user = isset($data['user'])? $data['user'] :'';
        if(!empty($user)){
            $qb->andWhere("ip.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        $discountedBy = isset($data['discountedBy'])? $data['discountedBy'] :'';
        if(!empty($discountedBy)){
            $qb->andWhere("ip.discountRequestedBy = :discountRequestedBy");
            $qb->setParameter('discountRequestedBy', $discountedBy);
        }
        $invoiceMode = isset($data['mode'])? $data['mode'] :'';
        if(!empty($invoiceMode)){
            $qb->andWhere("e.invoiceMode = :invoiceMode");
            $qb->setParameter('invoiceMode', $invoiceMode);
        }
        $qb->orderBy('ip.updated','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }




    public function invoicePathologicalReportLists(User $user , $mode , $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $this->handleSearchBetween($qb,$data);
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic','Admitted'));
        $qb->orderBy('e.created','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function doctorInvoiceLists(User $user,$data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.assignDoctor','doctor');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
       // $qb->andWhere('e.paymentStatus != :status')->setParameter('status', 'pending') ;
        $qb->andWhere('e.process IN (:process)')->setParameter('process', array('Done','Released','Dead'));
        $qb->andWhere('e.commissionApproved = :approved')->setParameter('approved', 'false') ;
       // $qb->andWhere('doctor.sendToAccount = 1');
        $this->handleSearchBetween($qb,$data);
        $qb->orderBy('e.updated','DESC');
        $qb->getQuery();
        return  $qb;
    }

    public function updateInvoiceTotalPrice(Invoice $invoice)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('HospitalBundle:InvoiceParticular','si')
            ->select('sum(si.subTotal) as subTotal')
            ->addSelect('sum(si.commission) as subCommission')
            ->where('si.hmsInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->getQuery()->getOneOrNullResult();

        $subTotal = !empty($total['subTotal']) ? $total['subTotal'] :0;
        $subCommission = !empty($total['subCommission']) ? $total['subCommission'] :0;
        if($subTotal > 0){

            if ($invoice->getHospitalConfig()->getVatEnable() == 1 && $invoice->getHospitalConfig()->getVatPercentage() > 0) {
                $totalAmount = ($subTotal- $invoice->getDiscount());
                $vat = $this->getCulculationVat($invoice,$totalAmount);
                $invoice->setVat($vat);
            }
            $invoice->setSubTotal($subTotal);
            $invoice->setTotal($invoice->getSubTotal() + $invoice->getVat() - $invoice->getDiscount());
            $invoice->setEstimateCommission($subCommission);
            $invoice->setDue($invoice->getTotal() - $invoice->getPayment());
            if($invoice->getTotal() <= $invoice->getPayment()){
                $invoice->setDue(null);
                $invoice->setPayment($invoice->getTotal());
            }

        }else{

            $invoice->setSubTotal(0);
            $invoice->setEstimateCommission(0);
            $invoice->setTotal(0);
            $invoice->setDue(0);
            $invoice->setDiscount(0);
            $invoice->setVat(0);
        }

        $em->persist($invoice);
        $em->flush();

        return $invoice;

    }

    public function updateAdmissionInvoiceTotalPrice(InvoiceTransaction $transaction)
    {
        /* @var $invoice Invoice */

        $invoice = $transaction->getHmsInvoice();
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('HospitalBundle:InvoiceParticular','si')
            ->select('sum(si.subTotal) as subTotal')
            ->addSelect('sum(si.commission) as subCommission')
            ->where('si.hmsInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->getQuery()->getOneOrNullResult();

        $subTotal = !empty($total['subTotal']) ? $total['subTotal'] :0;
        $subCommission = !empty($total['subCommission']) ? $total['subCommission'] :0;
        if($subTotal > 0){

            if ($invoice->getHospitalConfig()->getVatEnable() == 1 && $invoice->getHospitalConfig()->getVatPercentage() > 0) {
                $totalAmount = ($subTotal- $invoice->getDiscount());
                $vat = $this->getCulculationVat($invoice,$totalAmount);
                $invoice->setVat($vat);
            }
            $invoice->setDiscountRequestedBy($transaction->getDiscountRequestedBy());
            $invoice->setDiscountRequestedComment($transaction->getDiscountRequestedComment());
            $invoice->setSubTotal($subTotal);
            $invoice->setSubTotal($subTotal);
            $invoice->setTotal($invoice->getSubTotal() + $invoice->getVat() - $invoice->getDiscount());
            $invoice->setEstimateCommission($subCommission);
            $invoice->setDue($invoice->getTotal() - $invoice->getPayment());
            if($invoice->getTotal() <= $invoice->getPayment()){
                $invoice->setDue(null);
                $invoice->setPayment($invoice->getTotal());
            }

        }else{

            $invoice->setSubTotal(0);
            $invoice->setEstimateCommission(0);
            $invoice->setTotal(0);
            $invoice->setDue(0);
            $invoice->setDiscount(0);
            $invoice->setVat(0);
        }

        $em->persist($invoice);
        $em->flush();

        return $invoice;

    }

    public function updateAdmissionPaymentReceive(Invoice $invoice)
    {
        $em = $this->_em;
        $res = $em->createQueryBuilder()
            ->from('HospitalBundle:InvoiceTransaction','si')
            ->select('sum(si.payment) as payment , sum(si.discount) as discount, sum(si.vat) as vat')
            ->where('si.hmsInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->andWhere('si.process = :process')->setParameter('process', 'Done')
            ->andWhere('si.approvedBy IS NOT NULL')
            ->getQuery()->getOneOrNullResult();
        $payment = !empty($res['payment']) ? $res['payment'] :0;
        $vat = !empty($res['vat']) ? $res['vat'] :0;
        $invoice->setPayment($payment);
        $invoice->setDiscount($res['discount']);
        $invoice->setVat($vat);
        $invoice->setReceive(0);
        $invoice->setTotal($invoice->getSubTotal() + $invoice->getVat() - $invoice->getDiscount());
        $invoice->setDue($invoice->getTotal() - $invoice->getPayment());
        if($invoice->getPayment() >= $invoice->getTotal()){
            $invoice->setPaymentStatus('Paid');
        }else{
            $invoice->setPaymentStatus('Due');
        }
        if($invoice->getPrintFor() == "visit" and $invoice->getPaymentStatus() == "Paid") {
            $invoice->setProcess('Done');
        }
        $em->flush();
    }

    public function updatePaymentReceive(Invoice $invoice)
    {
        $em = $this->_em;
        $res = $em->createQueryBuilder()
            ->from('HospitalBundle:InvoiceTransaction','si')
            ->select('sum(si.payment) as payment , sum(si.discount) as discount, sum(si.vat) as vat')
            ->where('si.hmsInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->andWhere('si.process = :process')->setParameter('process', 'Done')
            ->getQuery()->getOneOrNullResult();
        $payment = !empty($res['payment']) ? $res['payment'] :0;
        $vat = !empty($res['vat']) ? $res['vat'] :0;
        $discount = !empty($res['discount']) ? $res['discount'] :0;
        $invoice->setPayment($payment);
        $invoice->setDiscount($discount);
        $invoice->setVat($vat);
        $invoice->setReceive(0);
        $invoice->setTotal($invoice->getSubTotal() + $invoice->getVat() - $invoice->getDiscount());
        $invoice->setDue($invoice->getTotal() - $invoice->getPayment());
        if($invoice->getPayment() >= $invoice->getTotal()){
            $invoice->setPaymentStatus('Paid');
        }else{
            $invoice->setPaymentStatus('Due');
        }
        if($invoice->getPrintFor() == "visit" and $invoice->getPaymentStatus() == "Paid") {
            $invoice->setProcess('Done');
        }
        $em->flush();
    }

    public function updateCommissionPayment(Invoice $invoice)
    {
        $em = $this->_em;
        $res = $em->createQueryBuilder()
            ->from('HospitalBundle:DoctorInvoice','si')
            ->select('sum(si.payment) as payment')
            ->where('si.hmsInvoice = :invoice')
            ->setParameter('invoice', $invoice ->getId())
            ->andWhere('si.process = :process')
            ->setParameter('process', 'Paid')
            ->getQuery()->getOneOrNullResult();
        $payment = !empty($res['payment']) ? $res['payment'] :0;
        $invoice->setCommission($payment);
        $em->persist($invoice);
        $em->flush();

    }

    public function getCulculationVat(Invoice $sales,$totalAmount)
    {
        $vat = ( ($totalAmount * (int)$sales->getHospitalConfig()->getVatPercentage())/100 );
        return round($vat);
    }

    public function getInvoiceDetails(Invoice $invoice){

        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','ip');
        $qb->innerJoin('ip.particular','particular');
        $qb->where('si.hmsInvoice = :invoice');
        $qb->setParameter('invoice', $invoice ->getId());
        $qb->groupBy('particular.service');

    }

    public function updatePatientInfo($invoice,Customer $patient)
    {
        $em = $this->_em;
        $invoice = $this->_em->getRepository('HospitalBundle:Invoice')->find($invoice);
        $invoice->setCustomer($patient);
        $invoice->setMobile($patient->getMobile());
        $em->persist($invoice);
        $em->flush($invoice);

    }

    public function updateProcess(HmsInvoiceReturn $invoice)
    {
        $entity = $invoice->getHmsInvoice();
        $entity->setProcess('Returned');
        $this->_em->persist($entity);
        $this->_em->flush();
    }

    public function patientAdmissionUpdate($data,Invoice $entity)
    {
        $em = $this->_em;
        $invoiceInfo = $data['appstore_bundle_hospitalbundle_invoice'];
        if($invoiceInfo['cabin']){
            $cabin = $em->getRepository('HospitalBundle:Particular')->find($invoiceInfo['cabin']);
            $entity->setCabin($cabin);
        }
        if($invoiceInfo['assignDoctor']){
            $assignDoctor = $em->getRepository('HospitalBundle:Particular')->find($invoiceInfo['assignDoctor']);
            $entity->setAssignDoctor($assignDoctor);
        }
        if($invoiceInfo['department']){
            $department = $em->getRepository('HospitalBundle:HmsCategory')->find($invoiceInfo['department']);
            $entity->setDepartment($department);
        }
        if($invoiceInfo['cabinNo']){
            $entity->setCabinNo($invoiceInfo['cabinNo']);
        }
        if($invoiceInfo['disease']){
            $entity->setDisease($invoiceInfo['disease']);
        }
        $em->persist($entity);
        $em->flush($entity);

    }

    public function checkCabinBooking($invoice , $cabin)
    {
        $invoice = $this->_em->getRepository('HospitalBundle:Invoice')->find($invoice);
        $cabin = $this->_em->getRepository('HospitalBundle:Particular')->find($cabin);
        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.cabin) AS cabinCount');
        $qb->where('e.hospitalConfig = :config')->setParameter('config', $invoice ->getHospitalConfig()->getId());
        $qb->andWhere('e.cabin = :cabin')->setParameter('cabin', $cabin ->getId());
        $qb->andWhere('e.process = :process')->setParameter('process', 'Admitted');
        $res = $qb->getQuery()->getOneOrNullResult();
        if(!empty($res) and $res['cabinCount'] > 0 ){
            echo 'invalid';
        }else{
            echo 'valid';
        }
        exit;

    }

    public function checkNewCabinBooking($config,$cabin)
    {
        $cabin = $this->_em->getRepository('HospitalBundle:Particular')->find($cabin);
        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.cabin) AS cabinCount');
        $qb->where('e.hospitalConfig = :config')->setParameter('config', $config);
        $qb->andWhere('e.cabin = :cabin')->setParameter('cabin', $cabin ->getId());
        $qb->andWhere('e.process = :process')->setParameter('process', 'Admitted');
        $res = $qb->getQuery()->getOneOrNullResult();
        if(!empty($res) and $res['cabinCount'] > 0 ){
            echo 'invalid';
        }else{
            echo 'valid';
        }
        exit;

    }

    public function reportInvoiceLists(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $assignDoctor = isset($data['$assignDoctor'])? $data['$assignDoctor'] :'';
        $referred = isset($data['referred'])? $data['referred'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.customer','c');
        $qb->leftJoin('e.assignDoctor','ad');
        $qb->leftJoin('e.referredDoctor','rd');
        $qb->select('e.created as created','e.invoice as invoice','e.subTotal as subTotal','e.discount as discount','e.total as total','e.payment as receive');
        $qb->addSelect('c.name as name','c.mobile as mobile');
        $qb->addSelect('ad.name as doctor','rd.name as referred');
        $qb->leftJoin('e.createdBy','cb');
        $qb->leftJoin('cb.profile','up');
        $qb->addSelect('up.name as createdUser');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Diagnostic'));
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if(!empty($assignDoctor)){
            $qb->andWhere("ad.name = :doctor");
            $qb->setParameter('doctor', $process);
        }
        if(!empty($referred)){
            $qb->andWhere("rd.name = :referred");
            $qb->setParameter('referred', $referred);
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->orderBy('e.created','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportVisitLists(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $diseasesProfile = isset($data['diseasesProfile'])? $data['diseasesProfile'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.customer','c');
        $qb->leftJoin('e.assignDoctor','d');
        $qb->leftJoin('e.visitType','vt');
        $qb->select('e.created as created','e.invoice as invoice','e.payment as receive');
        $qb->addSelect('c.name as name','c.mobile as mobile');
        $qb->addSelect('d.name as doctor');
        $qb->addSelect('vt.name as visitType');
        $qb->leftJoin('e.createdBy','cb');
        $qb->leftJoin('cb.profile','up');
        $qb->addSelect('up.name as createdUser');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', $mode) ;
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if(!empty($diseasesProfile)){
            $qb->andWhere("e.diseasesProfile = :diseasesProfile");
            $qb->setParameter('diseasesProfile', $diseasesProfile);
        }
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->orderBy('e.created','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportHmsLists(User $user, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $referred = isset($data['referred'])? $data['referred'] :'';
        $anesthesiaDoctor = isset($data['anesthesiaDoctor'])? $data['anesthesiaDoctor'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $mode = isset($data['mode'])? $data['mode'] :'';
        $referredMode = isset($data['referredMode'])? $data['referredMode'] :'';
        $discountedBy = isset($data['discountedBy'])? $data['discountedBy'] :'';
        $marketingUser = isset($data['marketingUser'])? $data['marketingUser'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->leftJoin('e.doctorInvoices','di');
        $qb->leftJoin('e.customer','c');
        $qb->leftJoin('e.department','dep');
        $qb->leftJoin('e.diseasesProfile','dp');
        $qb->leftJoin('e.assignDoctor','d');
        $qb->leftJoin('e.referredDoctor','rd');
        $qb->leftJoin('e.anesthesiaDoctor','ad');
        $qb->leftJoin('e.marketingExecutive','me');
        $qb->leftJoin('me.marketingExecutive','mu');
        $qb->select('e.id as id','e.created as created','e.updated as updated','e.invoice as invoice','e.invoiceMode as invoiceMode','e.process as process','e.subTotal as subTotal','e.discount as discount','e.total as total','e.payment as receive','e.discountRequestedBy as discountRequestedBy');
        $qb->addSelect('c.name as name','c.mobile as mobile');
        $qb->addSelect('SUM(di.payment) as commission');
        $qb->addSelect('d.name as assignDoctor');
        $qb->addSelect('ad.name as anesthesiaDoctor');
        $qb->addSelect('rd.name as referred');
        $qb->leftJoin('e.createdBy','cb');
        $qb->leftJoin('cb.profile','up');
        $qb->addSelect('up.name as createdUser');
        $qb->addSelect('mu.username as marketing');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','In-progress','Release','Released','Dead','Death','Admitted'));
        if($referredMode == 'doctor'){
            $qb->andWhere("e.assignDoctor IS NOT NULL");
        }elseif($referredMode == 'referred'){
            $qb->andWhere("e.referredDoctor IS NOT NULL");
        }elseif($referredMode == 'assistant'){
            $qb->andWhere("e.assignDoctor IS NOT NULL");
        }elseif($referredMode == 'anesthesia'){
            $qb->andWhere("e.anesthesiaDoctor IS NOT NULL");
        }elseif($referredMode == 'discountBy'){
            $qb->andWhere("e.discountRequestedBy IS NOT NULL");
        }
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
         if(!empty($marketingUser)){
            $qb->andWhere("e.marketingExecutive = :marketingUser");
            $qb->setParameter('marketingUser', $marketingUser);
        }
        if(!empty($referred)){
            $qb->andWhere("e.referredDoctor = :referredDoctor");
            $qb->setParameter('referredDoctor', $referred);
        }
        if(!empty($anesthesiaDoctor)){
            $qb->andWhere("e.anesthesiaDoctor = :anesthesiaDoctor");
            $qb->setParameter('anesthesiaDoctor', $anesthesiaDoctor);
        }
         if(!empty($discountedBy)){
            $qb->andWhere("e.discountRequestedBy = :discountedBy");
            $qb->setParameter('discountedBy', $discountedBy);
        }
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if(!empty($mode)){
            $qb->andWhere("e.invoiceMode = :mode")->setParameter('mode', $mode);
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process")->setParameter('process', $process);
        }
        $qb->groupBy('e.id');
        $qb->orderBy('e.updated','ASC');
        $qb->addOrderBy('e.invoiceMode','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportAdmissionLists(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $department = isset($data['department'])? $data['department'] :'';
        $assistantDoctor = isset($data['assistantDoctor'])? $data['assistantDoctor'] :'';
        $anesthesiaDoctor = isset($data['anesthesiaDoctor'])? $data['anesthesiaDoctor'] :'';
        $diseasesProfile = isset($data['diseases'])? $data['diseases'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.customer','c');
        $qb->leftJoin('e.department','dep');
        $qb->leftJoin('e.diseasesProfile','dp');
        $qb->leftJoin('e.assignDoctor','d');
        $qb->leftJoin('e.anesthesiaDoctor','ad');
        $qb->leftJoin('e.assistantDoctor','assist');
        $qb->select('e.created as created','e.updated as updated','e.invoice as invoice','e.process as process','e.subTotal as subTotal','e.discount as discount','e.total as total','e.payment as receive');
        $qb->addSelect('c.name as name','c.mobile as mobile');
        $qb->addSelect('dp.name as diseasesProfile');
        $qb->addSelect('d.name as assignDoctor');
        $qb->addSelect('dep.name as department');
        $qb->addSelect('ad.name as anesthesiaDoctor');
        $qb->addSelect('assist.name as assistantDoctor');
        $qb->leftJoin('e.createdBy','cb');
        $qb->leftJoin('cb.profile','up');
        $qb->addSelect('up.name as createdUser');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', 'admission') ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Release','Released','Dead','Death','Admitted'));
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if(!empty($department)){
            $qb->andWhere("e.department = :department");
            $qb->setParameter('department', $department);
        }
        if(!empty($diseasesProfile)){
            $qb->andWhere("e.diseasesProfile = :diseasesProfile");
            $qb->setParameter('diseasesProfile', $diseasesProfile);
        }
        if(!empty($assistantDoctor)){
            $qb->andWhere("e.assistantDoctor = :assistantDoctor");
            $qb->setParameter('assistantDoctor', $assistantDoctor);
        }
        if(!empty($anesthesiaDoctor)){
            $qb->andWhere("e.anesthesiaDoctor = :anesthesiaDoctor");
            $qb->setParameter('anesthesiaDoctor', $anesthesiaDoctor);
        }
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate'])) {
            $startDate = str_replace('T',' ',$data['startDate']);
            $qb->andWhere("e.created >= :startDate");
            $qb->setParameter('startDate', $startDate);
        }
        if (!empty($data['endDate'])) {
            $endDate = str_replace('T',' ',$data['endDate']);
            $qb->andWhere("e.created <= :endDate");
            $qb->setParameter('endDate', $endDate);
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->orderBy('e.created','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportAdmissionService(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $department = isset($data['department'])? $data['department'] :'';
        $category = isset($data['category'])? $data['category'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $surgeryDepartment = isset($data['surgeryDepartment'])? $data['surgeryDepartment'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','ip');
        $qb->join('ip.hmsInvoice','e');
        $qb->join('ip.particular','p');
        $qb->join('p.service','s');
        $qb->leftJoin('p.serviceGroup','sg');
        $qb->leftJoin('p.surgeryDepartment','sd');
        $qb->select('p.id as id','p.name as name');
        $qb->addSelect('s.name as service');
        $qb->addSelect('sg.name as serviceGroup');
        $qb->addSelect('SUM(ip.quantity) as quantity','SUM(ip.quantity * ip.salesPrice) as price');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', 'admission') ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Release','Released','Dead','Death','Admitted'));
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if(!empty($surgeryDepartment)){
            $qb->andWhere("sd.id = :surgeryDepartment");
            $qb->setParameter('surgeryDepartment', $surgeryDepartment);
        }
        if(!empty($category)){
            $qb->andWhere("p.category = :category");
            $qb->setParameter('category', $department);
        }
        if(!empty($department)){
            $qb->andWhere("p.department = :department");
            $qb->setParameter('department', $department);
        }
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->groupBy('p.id');
        $qb->orderBy('p.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportAdmissionDepartment(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $assistantDoctor = isset($data['assistantDoctor'])? $data['assistantDoctor'] :'';
        $anesthesiaDoctor = isset($data['anesthesiaDoctor'])? $data['anesthesiaDoctor'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','ip');
        $qb->join('ip.hmsInvoice','e');
        $qb->join('ip.particular','p');
        $qb->join('p.surgeryDepartment','sd');
        $qb->select('sd.id as id','sd.name as name');
        $qb->addSelect('SUM(ip.quantity) as quantity','SUM(ip.quantity * ip.salesPrice) as price');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', 'admission') ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Release','Released','Dead','Death','Admitted'));
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->groupBy('sd.id');
        $qb->orderBy('sd.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportDiseases(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.diseasesProfile','d');
        $qb->select('d.id as id','d.name as name');
        $qb->addSelect('COUNT(e.id) as quantity');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode in (:modes)')->setParameter('modes', array('admission','visit')) ;
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportDiseasesDetails(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.diseasesProfile','d');
        $qb->join('e.customer','c');
        $qb->join('e.assignDoctor','ad');
        $qb->select('d.name as diseases');
        $qb->addSelect('ad.name as assignDoctor');
        $qb->addSelect('e.invoice as invoice','e.created as created','e.updated as updated','e.process as process','e.invoiceMode as mode');
        $qb->addSelect('c.id as customerId','c.name as customer','c.mobile as mobile');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode in (:modes)')->setParameter('modes', array('admission','visit')) ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Release','Released','Dead','Death','Admitted'));
        if(!empty($assignDoctor)){
            $qb->andWhere("e.assignDoctor = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function reportAdmissionDepartmentDetails(User $user,$mode, $data)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','ip');
        $qb->join('ip.hmsInvoice','e');
        $qb->join('e.customer','c');
        $qb->join('e.assignDoctor','ad');
        $qb->join('ip.particular','p');
        $qb->join('p.service','s');
        $qb->leftJoin('p.surgeryDepartment','sd');
        $qb->select('s.name as service');
        $qb->addSelect('sd.name as surgeryDepartment');
        $qb->addSelect('ad.name as assignDoctor');
        $qb->addSelect('p.name as particular');
        $qb->addSelect('e.invoice as invoice','e.created as created','e.updated as updated','e.process as process');
        $qb->addSelect('c.id as customerId','c.name as customer','c.mobile as mobile');
        $qb->addSelect('ip.quantity as quantity','ip.salesPrice as price','ip.discountPrice as discountPrice');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode', 'admission') ;
        $qb->andWhere("e.process IN (:process)");
        $qb->setParameter('process', array('Done','Paid','In-progress','Release','Released','Dead','Death','Admitted'));
        $assignDoctor = isset($data['doctor'])? $data['doctor'] :'';
        $serviceGroup = isset($data['serviceGroup'])? $data['serviceGroup'] :'';
        $surgeryDepartment = isset($data['surgeryDepartment'])? $data['surgeryDepartment'] :'';
        $particular = isset($data['particular'])? $data['particular'] :'';
        $user = isset($data['user'])? $data['user'] :'';
        $process = isset($data['process'])? $data['process'] :'';
        if(!empty($assignDoctor)){
            $qb->andWhere("ad.id = :assignDoctor");
            $qb->setParameter('assignDoctor', $assignDoctor);
        }
        if(!empty($serviceGroup)){
            $qb->andWhere("s.id = :service");
            $qb->setParameter('service', $serviceGroup);
        }
        if(!empty($surgeryDepartment)){
            $qb->andWhere("sd.id = :department");
            $qb->setParameter('department', $surgeryDepartment);
        }
        if(!empty($particular)){
            $qb->andWhere("p.id = :particular");
            $qb->setParameter('particular', $particular);
        }
        if(!empty($user)){
            $qb->andWhere("e.createdBy = :user");
            $qb->setParameter('user', $user);
        }
        if (!empty($data['startDate']) ) {
            $qb->andWhere("e.updated >= :startDate");
            $qb->setParameter('startDate', $data['startDate'].' 00:00:00');
        }
        if (!empty($data['endDate'])) {
            $qb->andWhere("e.updated <= :endDate");
            $qb->setParameter('endDate', $data['endDate'].' 23:59:59');
        }
        if(!empty($process)){
            $qb->andWhere("e.process = :process");
            $qb->setParameter('process', $process);
        }
        $qb->orderBy('e.updated','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function getAssignDoctor($hospital, $mode = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.assignDoctor','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        if($mode){
            $qb->andWhere('e.invoiceMode =:mode')->setParameter('mode',$mode) ;
        }else{
            $qb->andWhere('e.invoiceMode IN (:mode)')->setParameter('mode',array('visit','admission','diagnostic')) ;
        }
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function getAssignProcess($hospital, $mode = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode IN (:mode)')->setParameter('mode',array('visit','admission','diagnostic')) ;
        if($mode == "assign-doctor"){
            $qb->join('e.assignDoctor','d');
            $qb->select('d.id as id','d.name as name');
            $qb->andWhere('e.assignDoctor IS NOT NULL');
        }elseif ($mode == "anesthesia-doctor"){
            $qb->join('e.anesthesiaDoctor','d');
            $qb->select('d.id as id','d.name as name');
            $qb->andWhere('e.assignDoctor IS NOT NULL');
        }elseif ($mode == "referred-doctor"){
            $qb->join('e.referredDoctor','d');
            $qb->select('d.id as id','d.name as name','d.mobile as mobile');
            $qb->andWhere('e.referredDoctor IS NOT NULL');
        }
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }


    public function getDiseasesProfile($hospital, $mode = '')
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.diseasesProfile','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        if($mode){
            $qb->andWhere('e.invoiceMode =:mode')->setParameter('mode',$mode) ;
        }else{
            $qb->andWhere('e.invoiceMode IN (:mode)')->setParameter('mode',array('visit','admission')) ;
        }
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }


    public function getAanesthesiaDoctor($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.anesthesiaDoctor','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode','admission') ;
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }
    public function getAssistantDoctor($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.assistantDoctor','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode','admission') ;
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function getReferredDoctors($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.referredDoctor','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

      public function getMarketingUser($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.marketingExecutive','d');
        $qb->join('d.marketingExecutive','u');
        $qb->select('d.id as id','u.username as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

     public function getDiscountedUsers($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.discountRequestedBy as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.discountRequestedBy IS NOT NULL');
        $qb->groupBy('e.discountRequestedBy');
        $qb->orderBy('e.discountRequestedBy','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }

    public function getDepartments($hospital)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.department','d');
        $qb->select('d.id as id','d.name as name');
        $qb->where('e.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->andWhere('e.invoiceMode = :mode')->setParameter('mode','admission') ;
        $qb->groupBy('d.id');
        $qb->orderBy('d.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }
    public function getServiceGroups($hospital)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','e');
        $qb->join('e.particular','p');
        $qb->join('p.service','s');
        $qb->select('s.id as id','s.name as name');
        $qb->where('p.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->groupBy('s.id');
        $qb->orderBy('s.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }
    public function getServices($hospital)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','e');
        $qb->join('e.particular','p');
        $qb->join('p.serviceGroup','s');
        $qb->select('s.id as id','s.name as name');
        $qb->where('p.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->groupBy('s.id');
        $qb->orderBy('s.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;
    }
    public function getParticulars($hospital)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->from('HospitalBundle:InvoiceParticular','e');
        $qb->join('e.particular','p');
        $qb->join('p.service','s');
        $qb->select('p.id as id','p.name as name');
        $qb->addSelect('s.id as sid');
        $qb->where('p.hospitalConfig = :hospital')->setParameter('hospital', $hospital) ;
        $qb->groupBy('p.id');
        $qb->orderBy('p.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $particularGroups = array();
        foreach ($result as $row){
            $particularGroups[$row['sid']][] = $row;
        }
        return  $particularGroups;
    }


    public function searchAutoComplete($q, HospitalConfig $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->leftJoin('e.customer', 'c');
        $query->select('e.invoice as id');
        $query->addSelect("CONCAT(e.invoice,'-[',e.process,'] - ', c.name,' - Mob:', c.mobile) as text");
        $query->where("e.hospitalConfig = :config")->setParameter('config', $config->getId());
        $query->andWhere('e.invoice LIKE :searchTerm OR c.name LIKE :searchTerm OR c.mobile LIKE :searchTerm  OR c.customerId LIKE :searchTerm');
        $query->setParameter('searchTerm', '%'.trim($q).'%');
        $query->orderBy('e.created', 'DESC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }


    public function searchAdmissionAutoComplete($q, HospitalConfig $config)
    {

        $query = $this->createQueryBuilder('e');
        $query->leftJoin('e.customer', 'c');
        $query->leftJoin('e.cabin', 'cb');
        $query->select('e.invoice as id');
        $query->addSelect("CONCAT(e.invoice,'-[',e.process,'] C/B: ',cb.name,' (', c.name,' -', c.mobile,')') as text");
        $query->where("e.hospitalConfig = :config")->setParameter('config', $config->getId());
        $query->andWhere('e.invoice LIKE :searchTerm OR c.name LIKE :searchTerm OR c.mobile LIKE :searchTerm OR c.customerId LIKE :searchTerm');
        $query->andWhere('e.invoiceMode = :mode')->setParameter('mode','admission') ;
        $query->andWhere('e.cabin IS NOT NULL');
        $query->andWhere('e.process IN (:process)')->setParameter('process',array('Admitted','Release','Revised','Death')) ;
        $query->setParameter('searchTerm', '%'.trim($q).'%');
        $query->orderBy('e.created', 'DESC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }

    public function getExistingCabin($config)
    {
        $query = $this->createQueryBuilder('e');
        $query->leftJoin('e.customer', 'c');
        $query->select('e.id as id');
        $query->addSelect("CONCAT(e.invoice,'-', c.name) as text");
        $query->where("e.hospitalConfig = :config")->setParameter('config', $config->getId());
        $query->orderBy('e.created', 'DESC');
        $query->setMaxResults( '50' );
        return $query->getQuery()->getResult();

    }



}
