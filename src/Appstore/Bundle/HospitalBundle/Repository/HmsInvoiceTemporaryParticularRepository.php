<?php

namespace Appstore\Bundle\HospitalBundle\Repository;
use Appstore\Bundle\HospitalBundle\Entity\HmsInvoiceTemporaryParticular;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTemporaryParticular;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;


/**
 * InvoiceTemporaryParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HmsInvoiceTemporaryParticularRepository extends EntityRepository
{

    public function getSubTotalAmount(User $user)
    {
        $hospital = $user->getGlobalOption()->getHospitalConfig()->getId();
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.subTotal) AS subTotal');
        $qb->where('e.hospitalConfig = :hospital');
        $qb->setParameter('hospital', $hospital);
        $qb->andWhere("e.user =".$user->getId());
        $res = $qb->getQuery()->getOneOrNullResult();
        return $res['subTotal'];
    }

    public function insertInvoiceItems(User $user, $data)
    {
        $particular = $this->_em->getRepository('HospitalBundle:Particular')->find($data['particularId']);
        $em = $this->_em;
        $entity = new HmsInvoiceTemporaryParticular();
        $invoiceParticular = $this->_em->getRepository('HospitalBundle:HmsInvoiceTemporaryParticular')->findOneBy(array('user' => $user ,'particular' => $particular));

        if(!empty($invoiceParticular)) {
            $entity = $invoiceParticular;
            if ($particular->getService()->getHasQuantity() == 1){
                $entity->setQuantity($invoiceParticular->getQuantity() + $data['quantity']);
            }else{
                $entity->setQuantity(1);
            }
            $entity->setSubTotal($data['price'] * $entity->getQuantity());

        }else{

            if ($particular->getService()->getHasQuantity() == 1){
                $entity->setQuantity($data['quantity']);
            }else{
                $entity->setQuantity(1);
            }
            $entity->setSalesPrice($data['price']);
            $entity->setSubTotal($data['price'] * $data['quantity']);
        }
        $entity->setUser($user);
        $entity->setHospitalConfig($user->getGlobalOption()->getHospitalConfig());
        $entity->setParticular($particular);
        $entity->setEstimatePrice($particular->getPrice());
        $em->persist($entity);
        $em->flush();

    }


    public function getSalesItems(User $user)
    {
        $entities = $user->getHmsInvoiceTemporaryParticulars();
        $data = '';
        $i = 1;

        /* @var $entity HmsInvoiceTemporaryParticular */

        foreach ($entities as $entity) {
            $data .= '<tr id="remove-'. $entity->getId() . '">';
            $data .= '<td class="" >' . $i . '</td>';
            $data .= '<td class="" >' . $entity->getParticular()->getName() . '</td>';
            $data .= '<td class="" >' . $entity->getQuantity() . '</td>';
            $data .= '<td class="" >' . $entity->getSalesPrice() . '</td>';
            $data .= '<td class="" >' . $entity->getSubTotal() . '</td>';
            $data .= '<td class="" ><a id="'.$entity->getId().'" data-id="'.$entity->getId().'" data-url="/hms/invoice-temporary/' . $entity->getId() . '/particular-delete" href="javascript:" class="btn red mini particularDelete" ><i class="icon-trash"></i></a></td>';
            $data .= '</tr>';
            if ($entity->getParticular()->getService()->getSlug()  == "diagnostic" and (!empty($entity->getParticular()->getInstruction()))){
                $data .= "<tr><td colspan='6'><strong>Instruction</strong>:{$entity->getParticular()->getInstruction()}</td></tr>";
            }
            $i++;
        }
        return $data;
    }

    public function removeInitialParticular(User $user)
    {
        $em = $this->_em;
        $config = $user->getGlobalOption()->getHospitalConfig()->getId();
        $DoctorInvoice = $em->createQuery('DELETE HospitalBundle:HmsInvoiceTemporaryParticular e WHERE e.hospitalConfig = '.$config.' and e.user = '.$user->getId());
        $DoctorInvoice->execute();
    }

}
