<?php

namespace Appstore\Bundle\HospitalBundle\Repository;
use Appstore\Bundle\HospitalBundle\Controller\InvoiceController;
use Appstore\Bundle\HospitalBundle\Entity\AdmissionPatientParticular;
use Appstore\Bundle\HospitalBundle\Entity\Invoice;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceParticular;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceTransaction;
use Appstore\Bundle\HospitalBundle\Entity\Particular;
use Doctrine\ORM\EntityRepository;


/**
 * AdmissionPatientParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdmissionPatientParticularRepository extends EntityRepository
{

    public function insertDefaultInvoiceItems($transaction,$records)
    {
        $em = $this->_em;
        foreach ($records as $record){
            /* @var $record Particular */
            $entity = new AdmissionPatientParticular();
            $entity->setQuantity(1);
            $entity->setSalesPrice($record->getPrice());
            $entity->setSubTotal($record->getPrice());
            $entity->setInvoiceTransaction($transaction);
            $entity->setParticular($record);
            $entity->setEstimatePrice($record->getPrice());
            $em->persist($entity);
        }
        $em->flush();
    }

    public function insertInvoiceItems($transaction, $data)
    {
        $particular = $this->_em->getRepository('HospitalBundle:Particular')->find($data['particularId']);
        $em = $this->_em;
        $entity = new AdmissionPatientParticular();
        $invoiceParticular = $this->_em->getRepository('HospitalBundle:AdmissionPatientParticular')->findOneBy(array('invoiceTransaction' => $transaction ,'particular' => $particular));
        if(!empty($invoiceParticular)) {
            $entity = $invoiceParticular;
            if ($particular->getService()->getHasQuantity() == 1){
                $entity->setQuantity($invoiceParticular->getQuantity() + $data['quantity']);
            }else{
                $entity->setQuantity(1);
            }
            $entity->setSubTotal($data['price'] * $entity->getQuantity());

        }else{

            if ($particular->getService()->getHasQuantity() == 1){
                $entity->setQuantity($data['quantity']);
            }else{
                $entity->setQuantity(1);
            }
            $entity->setSalesPrice($data['price']);
            $entity->setSubTotal($data['price'] *  $entity->getQuantity());
        }
        $entity->setInvoiceTransaction($transaction);
        $entity->setParticular($particular);
        $entity->setEstimatePrice($particular->getPrice());
        $em->persist($entity);
        $em->flush();

    }

    public function initialUpdateInvoiceParticulars(Invoice $entity,$transaction)
    {
        /* @var $particular InvoiceParticular */
        $em = $this->_em;

        foreach ($entity->getInvoiceParticulars() as $particular ){

            $admission = New AdmissionPatientParticular();
            $admission->setInvoiceTransaction($transaction);
            $admission->setParticular($particular->getParticular());
            $admission->setSalesPrice($particular->getSalesPrice());
            $admission->setEstimatePrice($particular->getEstimatePrice());
            $admission->setQuantity($particular->getQuantity());
            $admission->setSubTotal($particular->getSubTotal());
            $em->persist($admission);
            $em->flush($admission);
        }

    }

    public function getSalesItems(InvoiceTransaction $sales)
    {
        $entities = $sales->getAdmissionPatientParticulars();
        $data = '';
        $i = 1;
        foreach ($entities as $entity) {
            $data .= '<tr id="delete-'. $entity->getId() . '">';
            $data .= '<td class="span1" >' . $i . '</td>';
            $data .= '<td class="span1" >' . $entity->getParticular()->getParticularCode() . '</td>';
            $data .= '<td class="span4" >' . $entity->getParticular()->getName() . '</td>';
            $data .= '<td class="span2" >' . $entity->getParticular()->getService()->getName() . '</td>';
            $data .= '<td class="span1" >' . $entity->getQuantity() . '</td>';
            $data .= '<td class="span2" >' . $entity->getSalesPrice() . '</td>';
            $data .= '<td class="span2" >' . $entity->getSubTotal() . '</td>';
            $data .= '<td class="span1" >
            <a id="'.$entity->getId().'" data-id="'.$entity->getId().'" title="Are you sure went to delete ?" data-url="/hms/invoice-admission/' . $sales->getId(). '/' . $entity->getId() . '/admitted-patient-daily-invoice-particular-delete" href="javascript:" class="btn red mini delete" ><i class="icon-trash"></i></a>
            </td>';
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }

    public function invoiceParticularLists($user){


    }

    public function updateInvoiceTransactionTotalPrice(InvoiceTransaction $transaction)
    {
        $em = $this->_em;
        $total = $em->createQueryBuilder()
            ->from('HospitalBundle:AdmissionPatientParticular','si')
            ->select('sum(si.subTotal) as subTotal')
            ->where('si.invoiceTransaction = :invoice')
            ->setParameter('invoice', $transaction ->getId())
            ->getQuery()->getOneOrNullResult();

        $subTotal = !empty($total['subTotal']) ? $total['subTotal'] :0;
        $transaction->setTotal($subTotal);
        $em->persist($transaction);
        $em->flush();
        return $transaction;

    }
}
