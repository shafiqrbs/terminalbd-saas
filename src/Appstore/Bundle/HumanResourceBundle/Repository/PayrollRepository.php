<?php

namespace Appstore\Bundle\HumanResourceBundle\Repository;
use Appstore\Bundle\HumanResourceBundle\Entity\EmployeePayroll;
use Appstore\Bundle\HumanResourceBundle\Entity\EmployeePayrollParticular;
use Core\UserBundle\Entity\User;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * LeavePolicyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PayrollRepository extends \Doctrine\ORM\EntityRepository
{


    public function findWithSearch($option)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id as id','e.created as created','e.effectedMonth as effectedMonth','e.totalAmount as total','e.payableAmount as payable','e.advanceAmount as advance','e.arearAmount as arear','e.basicAmount as basic','e.loanReceive as loan','e.allowanceAmount as allowance','e.deductionAmount as deduction');
        $qb->where("e.globalOption =".$option);
        $qb->orderBy("e.created","DESC");
        $result = $qb->getQuery()->getResult();
        return $result;

    }

    public function getPayrollEmployee($option)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.employee','u');
        $qb->join('u.profile','p');
        $qb->leftJoin('p.designation','d');
        $qb->select('e.id as id');
        $qb->addSelect('d.name as designationName');
        $qb->addSelect('p.name as name','p.mobile as mobile','p.joiningDate');
        $qb->where("e.globalOption =".$option);
        $qb->andWhere('e.domainOwner = 2');
        $qb->andWhere('e.isDelete != 1');
        $qb->orderBy("p.name","ASC");
        $result = $qb->getQuery()->getResult();
        return $result;


    }

    public function userInsertUpdate(User $user)
    {

        $em = $this->_em;
        if($user->getEmployeePayroll()){

            return $user->getEmployeePayroll();

        }else{

            $entity = new EmployeePayroll();
            $entity->setEmployee($user);
            $entity->setProfile($user->getProfile());
            $entity->setGlobalOption($user->getGlobalOption());
            $entity->setEmployeeName($user->getProfile()->getName());
            $em->persist($entity);
            $em->flush();
            return $entity;
        }
    }

    public function insertUpdateParticular(EmployeePayroll $payroll , $data)
    {
        $em = $this->_em;
        $basic = $payroll->getBasicAmount();

        foreach ($data['particular'] as $key => $value):

            if(!empty($data['unit'][$key])){
                $particular = $em->getRepository('HumanResourceBundle:PayrollSetting')->find($value);
                $exist = $em->getRepository('HumanResourceBundle:EmployeePayrollParticular')->findOneBy(array('employeePayroll' => $payroll,'particular' => $particular));
                if($exist){
                    $exist->setUnit($data['unit'][$key]);
                    if($data['unit'][$key] and $data['type'][$key] == 'Percentage'){
                        $amount = $this->calculateAmount($basic,$data['unit'][$key]);
                        $exist->setAmount($amount);
                    }else{
                        $exist->setAmount($data['unit'][$key]);
                    }
                    $exist->setType($data['type'][$key]);
                    $em->persist($exist);
                    $em->flush();

                }else{

                    $entity = new EmployeePayrollParticular();
                    $entity->setEmployeePayroll($payroll);
                    $entity->setParticular($particular);
                    $entity->setMode($particular->getMode());
                    $entity->setUnit($data['unit'][$key]);
                    if($data['unit'][$key] and $data['type'][$key] == 'Percentage'){
                        $amount = $this->calculateAmount($basic,$data['unit'][$key]);
                        $entity->setAmount($amount);
                    }else{
                        $entity->setAmount($data['unit'][$key]);
                    }
                    $entity->setType($data['type'][$key]);
                    $em->persist($entity);
                    $em->flush();
                }
            }
        endforeach;
    }

    private function calculateAmount($basic,$unit){

        $amount = (($basic * $unit)/100);
        return $amount;
    }

    public function insertUpdate(EmployeePayroll $payroll)
    {
        $allowance = $this->getAllowanceDeduction($payroll->getId(),'allowance');
        $deduction = $this->getAllowanceDeduction($payroll->getId(),'deduction');

        $em = $this->_em;
        $payroll->setAllowanceAmount($allowance);
        $payroll->setDeductionAmount($deduction);
        $amount = ($payroll->getBasicAmount() + $allowance);
        $payroll->setTotalAmount($amount);
        if($payroll->isBonusApplicable() == 1){
            $payroll->setBonusAmount($this->calculateAmount($payroll->getBasicAmount(),$payroll->getBonusPercentage()));
        }
        $payable = (($payroll->getTotalAmount() + $payroll->getArearAmount() + $payroll->getBonusAmount()) - ($deduction + $payroll->getLoanInstallment() + $payroll->getAdvanceAmount()));
        $payroll->setPayableAmount($payable);
        $em->persist($payroll);
        $em->flush();

    }

    public function getAllowanceDeduction( $payroll,$mode)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.employeePayrollParticulars','p');
        $qb->select('SUM(p.amount) as amount');
        $qb->where("e.id ={$payroll}");
        $qb->andWhere("p.mode ='{$mode}'");
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'];
    }
}