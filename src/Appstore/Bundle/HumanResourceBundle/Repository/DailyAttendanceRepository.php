<?php

namespace Appstore\Bundle\HumanResourceBundle\Repository;
use Appstore\Bundle\HumanResourceBundle\Entity\Attendance;
use Appstore\Bundle\HumanResourceBundle\Entity\DailyAttendance;
use Appstore\Bundle\HumanResourceBundle\Entity\EmployeeLeave;
use Core\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;

/**
 * HrAttendanceMonthRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DailyAttendanceRepository extends EntityRepository
{

    public function attendanceYearMonth(GlobalOption $option)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.year AS year ,e.month AS month ');
        $qb->where('e.globalOption='.$option->getId());
        $qb->groupBy('e.year','e.month');
        $qb->orderBy('e.year','DESC');
        $qb->orderBy('e.month','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function monthWiseAttendance(User $user)
    {

        $qb = $this->createQueryBuilder('e');
        $qb->select('e.year AS year ,e.month AS month, sum(e.present) AS present');
        $qb->where('e.user = :employee')->setParameter('employee', $user->getId());
        $qb->groupBy('e.year','e.month');
        $qb->orderBy('e.year','DESC');
        $qb->orderBy('e.month','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;

    }

    public function checkLeaveMonthly(Attendance $attendance)
    {
        $datetime = new \DateTime("now");
        $today  = $datetime->format('d');
        $month  = $datetime->format('F');
        $year   = $datetime->format('Y');
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.user = :employee')->setParameter('employee', $attendance->getEmployee()->getId());
        $qb->andWhere('e.presentDay = :presentDay')->setParameter('presentDay',$today);
        $qb->andWhere('e.month = :month')->setParameter('month',$month);
        $qb->andWhere('e.year = :year')->setParameter('year',$year);
        $count = $qb->getQuery()->getOneOrNullResult();
        return $count;
    }

    public function checkLeaveToday(Attendance $attendance)
    {
        $datetime = new \DateTime("now");
        $today  = $datetime->format('d');
        $month  = $datetime->format('F');
        $year   = $datetime->format('Y');
        $qb = $this->createQueryBuilder('e');
        $qb->where('e.user = :employee')->setParameter('employee', $attendance->getEmployee()->getId());
        $qb->andWhere('e.presentDay = :presentDay')->setParameter('presentDay',$today);
        $qb->andWhere('e.month = :month')->setParameter('month',$month);
        $qb->andWhere('e.year = :year')->setParameter('year',$year);
        $count = $qb->getQuery()->getOneOrNullResult();
        return $count;
    }

    public function dailyLeaveAttendance(EmployeeLeave $leave,Attendance $attendance,\DateTime $datetime)
    {

        $em = $this->_em;
        $today  = $datetime->format('d');
        $month  = $datetime->format('F');
        $year   = $datetime->format('Y');
        $entity = New DailyAttendance();
        $entity->setAttendance($attendance);
        $entity->setUser($leave->getEmployee());
        $entity->setGlobalOption($leave->getGlobalOption());
        $entity->setEmployeeLeave($leave);
        $entity->setPresent(false);
        $entity->setPresentDay($today);
        $entity->setPresentIn(false);
        $entity->setPresentOut(false);
        $entity->setMonth($month);
        $entity->setYear($year);
        $em->persist($entity);
        $em->flush();
        $this->_em->getRepository('HumanResourceBundle:Attendance')->employeeTotalPresentDay($attendance);
    }



}
