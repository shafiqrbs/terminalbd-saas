<?php

namespace Frontend\FrontentBundle\Service;

use Doctrine\ORM\EntityManager;
use Doctrine\Bundle\DoctrineBundle\Registry;
use Doctrine\ORM\EntityRepository;
use Doctrine\DBAL\Connection;
use Setting\Bundle\AppearanceBundle\Entity\Menu;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;
use Symfony\Component\Debug\Debug;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * RequestManager
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class MenuTreeManager

{

    /**
     * @var EntityManager
     */
    protected  $em;
    /**
     * @var \Doctrine\Bundle\DoctrineBundle\Registry
     */
    private $doctrine;

    public function  __construct(Registry $doctrine)
    {
        $this->doctrine = $doctrine;
        $this->em = $doctrine->getManager();
    }

    public function checkModule($slug)
    {
        $em = $this->em;

        $module = $em->getRepository('SettingToolBundle:Module')->findOneBy(array('menuSlug'=>$slug));
        $syndicateModule = $em->getRepository('SettingToolBundle:SyndicateModule')->findOneBy(array('menuSlug'=>$slug));


    }

    public function getWebsiteMobileMenuTree($arrs,$subdomain)
    {

	    $value ='';
	    $prefix = '';
	    $value .='<ul>';

       foreach ($arrs as $val) {

		    $menu = $val->getMenu()->getMenu();

		    if (!empty($menu)) {
			    $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
			    if($subIcon == 1){

				    $value .= '<li><a  href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
				    $value .= $this->getWebsiteMobileMenuTree($val->getChildren(),$subdomain);
			    }else{
				    $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
			    }
			    $value .= '</li>';
		    } else {
			    $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">'.$val->getMenu()->getMenu() . '</a></li>';
		    }
	    }
	    $value .='</ul>';

	    return $value;

    }

    public function getMenuTree($arrs,GlobalOption $globalOption , $device ='', $option = "")
    {

        $value ='';
        if(!empty($option)){
	        $value .='<ul class="'.$option.'">';
        }else{
	        $arr = array('navbar-right','navbar-center');
	        $position = $globalOption->getTemplateCustomize()->getMenuPosition();
	        $class = in_array($position,$arr) ? $position :'';
        	$value .="<ul class='nav navbar-nav {$class}' data-in='fadeInDown' data-out='fadeOutUp' >";
        }
        $prefix = '';
        foreach ($arrs as $val) {

            $menu = $val->getMenu()->getMenu();
            
            if (!empty($menu)) {
                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
                if($subIcon == 1){
	                $option = "dropdown-menu animated fadeOutUp";
                    $value .= '<li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" data-hover="'.$val->getMenu()->getMenu().'" href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                    $value .= $this->getMenuTree($val->getChildren(),$globalOption,$device,$option);
                }else{
                    $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                }
                $value .= '</li>';
            } else {
                $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">'.$val->getMenu()->getMenu() . '</a></li>';
            }
        }
        $value .='</ul>';

        return $value;

    }


    public function getEcommerceFooterMenuTree($arr,$subdomain,$device ='')
    {

        $value ='';
        $value .='<ul>';
        $prefix = '';
        foreach ($arr as $val) {

            $menu = $val->getMenu()->getMenu();
            if (!empty($menu)) {
                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
                if($subIcon == 1){
                    $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                    $value .= $this->getMenuTree($val->getChildren(),$subdomain,$device);
                }else{
                    $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                }
                $value .= '</li>';
            } else {
                $value .= '<li><a href="/'.$val->getMenu()->getSlug().'">'.$val->getMenu()->getMenu() . '</a></li>';
            }
        }
        $value .='</ul>';

        return $value;

    }

    public function getMobileMenuTree($arr,$subdomain,$device ='')
    {

        $value ='';
        $value .='<ul>';
        $prefix = '/web-builder/mobile/'.$subdomain.'/';
        foreach ($arr as $val) {

            $menu = $val->getMenu()->getMenu();
            if (!empty($menu)) {
                $subIcon = (count($val->getChildren()) > 0 ) ? 1 : 2 ;
                if($subIcon == 1){
                    $value .= '<li><a href="'.$prefix.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                    $value .= $this->getMenuTree($val->getChildren(),$subdomain,$device);
                }else{
                    $value .= '<li><a href="'.$prefix.$val->getMenu()->getSlug().'">' . $val->getMenu()->getMenu().'</a>';
                }

                $value .= '</li>';
            } else {
                $value .= '<li><a href="'.$prefix.$val->getMenu()->getSlug().'">'.$val->getMenu()->getMenu() . '</a></li>';
            }
        }
        $value .='</ul>';

        return $value;

    }

    public function getFooterMenu($menus,$subdomain,$device ='')
    {

        $value ='<ul class="list-footer">';
        $prefix = $subdomain;
        foreach ($menus as $val) {
            $menu = $val->getMenu()->getMenu();
            if (!empty($menu)) {
                $value .= '<li><a href="/'. $val->getMenu()->getSlug() . '"><i class="fa fa-angle-right"></i> ' . $val->getMenu()->getMenu() . '</a></li>';
            }
        }
        $value .='</ul>';

        return $value;

    }



    public function getModuleTheme($menu)
    {


        /* this condition return module,syndicate module , page ,syndicate functional theme return. */
        $moduleTheme = false;

        if($menu->getModule()){
            $moduleTheme = $menu->getModule()->getModuleClass();
        }elseif($menu->getSyndicateModule()){
            $moduleTheme = $menu->getSyndicateModule()->getModuleClass();
        }elseif($menu->getSyndicate()){
            $moduleTheme = 'SyndicateContent';
        }

        return $moduleTheme;


    }

    public function getCheckModule($menu)
    {


        /* this condition return module,syndicate module , page ,syndicate functional theme return. */
        $moduleTheme = false;

        if($menu->getModule()){
            $moduleTheme = $menu->getModule()->getModuleClass();
        }elseif($menu->getSyndicateModule()){
            $moduleTheme = $menu->getSyndicateModule()->getModuleClass();
        }elseif($menu->getSyndicate()){
            $moduleTheme = 'SyndicateContent';
        }

        return $moduleTheme;


    }



}
