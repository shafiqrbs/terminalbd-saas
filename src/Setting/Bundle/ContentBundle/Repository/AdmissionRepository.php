<?php

namespace Setting\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AdmissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdmissionRepository extends EntityRepository
{

    public function findFeatureContent($entity)
    {
        $user = $entity->getUser()->getId();
        $currDate = date('Y-m-d h:m:s');
        $limit = $entity->getUser()->getHomePage()->getShowingListing();
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where($qb->expr()->eq('a.status', 1))
            ->andWhere($qb->expr()->eq('a.user', $user))
            ->andWhere('a.startDate > :startDate')
            ->setParameter('startDate', $currDate )
            ->setMaxResults($limit)
            ->orderBy('a.startDate', 'DESC');

        return $qb->getQuery()->getResult();
    }


    public function findUserModuleContent($entity,$limit= 5)
    {
        $user = $entity->getUser()->getId();
        $currDate = date('Y-m-d h:m:s');
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where($qb->expr()->eq('a.status', 1))
            ->andWhere($qb->expr()->eq('a.user', $user))
            ->andWhere('a.endDate > :endDate')
            ->setParameter('endDate', $currDate )
            ->setMaxResults($limit)
            ->orderBy('a.startDate', 'DESC');

        return $qb->getQuery()->getResult();
    }


    public function getCourseUnderAdmission($level)
    {
        $currDate = date('Y-m-d h:m:s');
        if($level){

            $query = $this->createQueryBuilder('a')
                ->select('a')
                ->innerJoin('SettingToolBundle:Course', 'c', 'WITH', 'c.id = a.course')
                ->where('a.status = :status')
                ->setParameter('status', 1)
                ->andWhere('a.endDate > :endDate')
                ->setParameter('endDate', $currDate )
                ->andWhere('a.courseLevel > :courseLevel')
                ->setParameter('courseLevel', $level )
                ->groupBy('a.course')
                ->orderBy('c.name', 'ASC');
        }else{

            $query = $this->createQueryBuilder('a')
                ->select('a')
                ->innerJoin('SettingToolBundle:Course', 'c', 'WITH', 'c.id = a.course')
                ->where('a.status = :status')
                ->setParameter('status', 1)
                ->andWhere('a.endDate > :endDate')
                ->setParameter('endDate', $currDate )
                ->groupBy('a.course')
                ->orderBy('c.name', 'ASC');
        }


        return $query->getQuery()->getResult();

    }





    public function getAdmissionGroupList($course){

        $currDate = date('Y-m-d h:m:s');
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.course = :course')
            ->andWhere('a.status = :status')
            ->andWhere('a.endDate > :endDate')
            ->setParameter('course', $course)
            ->setParameter('status', 1)
            ->setParameter('endDate', $currDate )
            ->setMaxResults(6)
            ->orderBy('a.startDate', 'DESC');

        return $qb->getQuery()->getResult();

    }

    public function getPromotionAdmission()
    {

        $currDate = date('Y-m-d h:m:s');
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.status = :status')
            ->setParameter('status', 1)
            ->andWhere('a.isPromotion = :promotion')
            ->setParameter('promotion', 1)
            ->setMaxResults(4)
            ->orderBy('a.startDate', 'DESC');

        return $qb->getQuery()->getResult();

    }

}

