<?php

namespace Setting\Bundle\ContentBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ContentBundle\Entity\PageModule;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageModuleRepository extends EntityRepository
{
    public function createFeatureModule($page,$data)
    {
        if(!empty($data['rowModule'])){
            foreach( $data['rowModule'] as $key => $row ){

                $pageModule = !empty($data['pageModule'][$key]) ? $data['pageModule'][$key] :0;
                $module = !empty($data['module'][$key]) ? $data['module'][$key] :0;
                if($pageModule > 0 and $module == 0 ){
                    $this->remove($pageModule);
                }
                if(!empty($data['module'][$key])) {

                    $pageModuleId = !empty($data['pageModule'][$key]) ? $data['pageModule'][$key] :0;
                    $moduleId = !empty($data['module'][$key]) ? $data['module'][$key] :0;

                    if($pageModuleId > 0){
                        $entity = $this->_em->getRepository('SettingContentBundle:PageModule')->find($pageModuleId);
                    }else{
                        $entity = new PageModule();
                    }
                    $module = $this->_em->getRepository('SettingToolBundle:Module')->find($moduleId);
                    $entity->setName($data['name'][$key]);
                    $entity->setShowLimit($data['showLimit'][$key]);
                    $entity->setShowColumn($data['showColumn'][$key]);
                    $entity->setContentPosition($data['contentPosition'][$key]);
                    $entity->setShowingType($data['showingType'][$key]);
                    $entity->setPage($page);
                    $entity->setModule($module);
                    $this->_em->persist($entity);
                    $this->_em->flush();

                }

            }
        }

    }

    public function createMenuFeatureModule($menu ,$data)
    {
        if(!empty($data['rowModule'])){
            foreach( $data['rowModule'] as $key => $row ){

                $pageModule = !empty($data['pageModule'][$key]) ? $data['pageModule'][$key] :0;
                $module = !empty($data['module'][$key]) ? $data['module'][$key] :0;
                if($pageModule > 0 and $module == 0 ){
                    $this->remove($pageModule);
                }
                if(!empty($data['module'][$key])) {

                    $pageModuleId = !empty($data['pageModule'][$key]) ? $data['pageModule'][$key] :0;
                    $moduleId = !empty($data['module'][$key]) ? $data['module'][$key] :0;

                    if($pageModuleId > 0){
                        $entity = $this->_em->getRepository('SettingContentBundle:PageModule')->find($pageModuleId);
                    }else{
                        $entity = new PageModule();
                    }
                    $module = $this->_em->getRepository('SettingToolBundle:Module')->find($moduleId);
                    $entity->setName($data['name'][$key]);
                    $entity->setShowLimit($data['showLimit'][$key]);
                    $entity->setContentPosition($data['contentPosition'][$key]);
                    $entity->setShowingType($data['showingType'][$key]);
                    $entity->setMenu($menu);
                    $entity->setModule($module);
                    $this->_em->persist($entity);
                    $this->_em->flush();

                }

            }
        }

    }

    private  function remove($pageModule)
    {
        if(!empty($pageModule)){
            $em =$this->_em;
            $entity = $em->getRepository('SettingContentBundle:PageModule')->find($pageModule);
            $em->remove($entity);
            $em->flush();
        }

    }

    public function createHomeFeatureModule($page,$data)
    {
        $this->removeHome($page);
        if(isset($data['module']) and !empty( $data['module']) ){

            $i = 0;
            foreach( $data['module'] as $row ){

               if(isset($data['module'][$i]) and !empty( $data['module'][$i]) ) {

                    $moduleId = $data['module'][$i];
                    $module = $this->_em->getRepository('SettingToolBundle:Module')->find($moduleId);
                    $entity = new PageModule();
                    $entity->setName($data['name'][$i]);
                    $entity->setShowLimit($data['showLimit'][$i]);
                    $entity->setShowColumn($data['showColumn'][$i]);
                    $entity->setHomePage($page);
                    $entity->setModule($module);
                    $this->_em->persist($entity);

                }
                $i++;
            }
            $this->_em->flush();
        }
    }


    private  function removeHome($page)
    {

        $em =$this->_em;
        $entities = $em->getRepository('SettingContentBundle:PageModule')->findBy(array('homePage'=>$page));
        foreach ($entities as $entity )
        {
            $em->remove($entity);
        }
        $em->flush();


    }
}

