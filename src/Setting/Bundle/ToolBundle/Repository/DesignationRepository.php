<?php

namespace Setting\Bundle\ToolBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\Designation;
use Gedmo\Tree\Entity\Repository\MaterializedPathRepository;

/**
 * DesignationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DesignationRepository extends MaterializedPathRepository
{

    public function getFlatTree()
    {

        $designations = $this->childrenHierarchy();

        $this->buildFlatTree($designations, $array);

        return $array;
    }

    public function getFlatDesignationTree()
    {

        $designations = $this->childrenHierarchy();

        $this->buildFlatDesignationTree($designations, $array);

        return $array;
    }

    private function buildFlatTree($designations, &$array = array())
    {
        usort($designations, function($a, $b){
            return strcmp($a["name"], $b["name"]);
        });

        foreach($designations as $designation) {
            $array[$designation['id']] = $this->formatLabel($designation['level'], $designation['name']);
            if(isset($designation['__children'])) {
                $this->buildFlatTree($designation['__children'], $array);
            }
        }
    }

    private function buildFlatDesignationTree($designations, &$array = array())
    {
        usort($designations, function($a, $b){
            return strcmp($a["name"], $b["name"]);
        });

        foreach($designations as $designation) {
            $array[] = $this->find($designation['id']);
            if(isset($designation['__children'])) {
                $this->buildFlatDesignationTree($designation['__children'], $array);
            }
        }
    }

    private function formatLabel($level, $value) {
        $level = $level - 1;
        return str_repeat("-", $level * 3) . str_repeat(">", $level) . "$value";
    }


    public function getDesignationOptions(){

        $ret = array();
        $em = $this->_em;
        $designations = $em->getRepository('ProductProductBundle:Designation')->findBy(array(),array('name'=>'asc'));

        foreach( $designations as $cat ){
            if( !$cat->getParent() ){
                continue;
            }
            if(!array_key_exists($cat->getParent()->getName(), $ret) ){
                $ret[ $cat->getParent()->getName() ] = array();
            }
            $ret[ $cat->getParent()->getName() ][ $cat->getId() ] = $cat;
        }
        return $ret;
    }

    /**
     * @param $designations Designation[]
     * @return array
     */
    public function buildDesignationGroup($designations)
    {
        $result = array();

        foreach($designations as $designation) {
            $parentDesignation = $this->getParentDesignationByLevel($designation, 2);


            if(empty($parentDesignation)) {
                continue;
            }

            $parentId = $parentDesignation->getId();

            if(!isset($result[$parentId])) {
                $result[$parentId] = array(
                    'name' =>  $parentDesignation->getName(),
                    'slug' =>  $parentDesignation->getSlug(),
                    '__children' =>  array(),
                );
            }

            $result[$parentId]['__children'][] = array(
                'name' => $designation->getName(),
                'slug' => $designation->getSlug()
            );
        }

        return $result;
    }

    public function getDesignationOptionGroup()
    {
        $results = $this->createQueryBuilder('node')
            ->orderBy('node.parent', 'ASC')
            ->where('node.level < 2')
            ->getQuery()
            ->getResult();

        $designations = $this->getDesignationsIndexedById($results);

        $grouped = array();

        foreach ($designations as $designation) {
            switch($designation->getLevel()) {

                case 3:
                    $grouped[$designations[$designation->getParentIdByLevel(3)]->getName()][$designation->getId()] = $designation;
            }
        }

        return $grouped;
    }

    public function getDistrictOptionGroup()
    {
        $results = $this->createQueryBuilder('node')
            ->orderBy('node.level, node.name', 'ASC')
            ->where('node.level < 3')
            ->getQuery()
            ->getResult();

        $designations = $this->getDesignationsIndexedById($results);

        $grouped = array();

        foreach ($designations as $designation) {
            switch($designation->getLevel()) {
                case 2:
                    $grouped[$designation[$designation->getParentIdByLevel(2)]->getName()][$designation->getId()] = $designation;
            }
        }

        return $grouped;
    }

    /**
     * @param Designation $designation
     * @param int $level
     * @return Designation
     */
    public function getParentDesignationByLevel(Designation $designation, $level = 2)
    {
        return $this->find($designation->getParentIdByLevel($level));
    }

    /**
     * @param $results
     * @return Designation[]
     */
    protected function getDesignationsIndexedById($results)
    {
        $designations = array();

        foreach ($results as $designation) {
            $designations[$designation->getId()] = $designation;
        }
        return $designations;
    }



}
