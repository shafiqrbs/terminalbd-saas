<?phpnamespace Core\UserBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Core\UserBundle\Entity\User;use Doctrine\ORM\Repository;class UserController extends Controller{    public function usernameCheckAction(Request $request)    {        $user = $this->get('fos_user.user_manager')->findUserByUsername(trim($request->request->get('userName')));        if ($user) {            $return = array("responseCode" => 200, "user_name" => "User name already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "user_name" => "User name available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function emailCheckAction(Request $request)    {        $email = $this->get('fos_user.user_manager')->findUserByEmail(trim($request->request->get('email')));        if ($email) {            $return = array("responseCode" => 200, "email_check" => "Email already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "email_check" => "Email address available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function userDeactiveAction(User $user)    {        $status = '0';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Deactivated'        );        return $this->redirect($this->generateUrl('docudex_user_manager'));    }    public function userActiveAction(User $user)    {        $status = '1';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Activated'        );        return $this->redirect($this->generateUrl('docudex_user_manager'));    }    public function paginate($dql)    {        $em = $this->get('doctrine.orm.entity_manager');        $query = $em->createQuery($dql);        $paginator = $this->get('knp_paginator');        $value = $paginator->paginate(            $query,            $page = $this->get('request')->query->get('page', 1) /*page number*/,            10/*limit per page*/        );        return array($value, $page);    }    public function autoSearchAction(Request $request)    {        $data = $_REQUEST['q'];        if ($data) {            $globalOption = $this->getUser()->getGlobalOption();            $data = $this->getDoctrine()->getRepository('UserBundle:User')->searchAutoComplete($data,$globalOption);        }        return new JsonResponse($data);    }}